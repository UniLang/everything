class
❪vector❫
❪string❫
❪"code/tools/reflexivity/deps_define/data/dependency_location"❫
❪"code/tools/reflexivity/deps_define/data/build_definitions"❫
❪"code/tools/reflexivity/deps_define/data/patch_file"❫
⚯

⚞⚟

◀public:

    //unique name for the 3rd party dependency in the monorepo
    std::string lib_name;
    
    //places to find and download the dependency.
    //ordered by desired precedence.
    //we expect a trusted mirror first
    std::vector<Dependency_Location> locations;
    
    //information for assuming the dependency is already on the system
    //ideally, we don't want this at all, but sometimes its a necessity when hermetics is too hard to achieve.
    //that being said, we really only want 1 dependency to be system.
    //it should be a system dependency for the whole system,
    //and the build file for it includes all of the unhermetic references in 1 place
    bool system=false;
    std::string system_path;
    
    //information on building the dependency
    //patches are inevitable, and they are described here
    std::vector<std::string> patch_cmds;
    
    //reference preexisting files
    std::vector<std::string> patch_files;
    
    //reference files encoded in this structure
    std::vector<Patch_File> inline_patch_files;
    
    std::vector<std::string> patch_args;
    
    //sometimes the dependency itself is a bazel repo that already has bazel files inside of it.
    //in that case, we don't need to point to our own maintained BUILD rule.
    //if that's the case, we can set this to true.
    //sometimes repositories do have their own bazel BUILD files but they are still hard to integrate.
    //in those cases you sometimes see patch files deleting them, and this staying at false.
    bool build_content_in_dependency=false;
    
    //for dependencies that need dependencies, these are often mapped in
    std::vector<std::pair<std::string,std::string>> repo_mapping;
    
    //this represents the content for the entire build file
    //we want to generate things as much as possible for flexibility and introspection.
    //these contents may be described in other ways, and effectively transformed into a final string here.
    Build_Definitions build_defs;
▶
