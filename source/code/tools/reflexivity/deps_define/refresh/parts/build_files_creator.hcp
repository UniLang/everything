class
❪string❫
❪vector❫
❪"code/tools/reflexivity/deps_define/data/dependency_specifications_getter"❫
❪"code/utilities/filesystem/paths/lib"❫
⚯
❪"code/utilities/filesystem/files/creating/lib"❫
❪"code/tools/reflexivity/comment/generated_comment_getter"❫
❪"code/utilities/types/strings/transformers/appending/lib"❫
❪"code/utilities/types/strings/transformers/casing/case_modifier"❫
❪"code/utilities/types/strings/transformers/search_replace/lib"❫
❪"code/utilities/types/strings/transformers/removing/lib"❫
❪"code/utilities/web/url/github_url_getter"❫
⚞⚟


◀public: static▶ void ☀Create(Dependency_Specifications const& all_specs)❰

    //move into the folder where all the deps are
    Temporarily_Move_To_Path_To_Call_Function(Bazel_Deps_Directory(),[&](){
        
        for (auto it: all_specs.specs){
            
                //create folder
                auto folder_name = As_Removed_Dashes(it.lib_name);
                Create_Path_If_It_Doesnt_Already_Exist(folder_name);
                Create_Path_If_It_Doesnt_Already_Exist(folder_name + "/patches");
                
                Possibly_Print_Build_File(it,folder_name);
                Possibly_Print_Patch_Files(it,folder_name);
        }
    
    });
❱

◀private: static▶ void ☀Possibly_Print_Build_File(Dependency_Specification const& spec, std::string const& folder_name)❰

        auto build_file_path = folder_name + "/build.BUILD";
        if (Should_Print_Build_File(spec)){
            auto source_data  = Create_File_Content(spec);
            Write_To_File_With_Auto_Gen_Comment(build_file_path,Source_Language::PYTHON,source_data);
        }
        
        
        //if the file doesn't exist, we can at least create an empty one for convenience
        if (!spec.build_content_in_dependency){
            Create_File_If_It_Doesnt_Exist(build_file_path);
        }
        else {
            execute("rm -f " + build_file_path);
        }
        
❱

◀private: static▶ bool ☀Should_Print_Build_File(Dependency_Specification const& spec)❰

    return !spec.build_defs.raw_starlark.empty();
❱

◀private: static▶ std::string ☀Create_File_Content(Dependency_Specification const& spec)❰

    std::string x;
    x += spec.build_defs.raw_starlark;
    return x;
❱

◀private: static▶ void ☀Possibly_Print_Patch_Files(Dependency_Specification const& spec, std::string const& folder_name)❰
    std::string file_name = folder_name + "/patches/BUILD";
    std::string content = "package(default_visibility = [\"//visibility:public\"])";
    Write_To_File_With_Auto_Gen_Comment(file_name,Source_Language::PYTHON,content);
❱