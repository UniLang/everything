class
❪vector❫
❪string❫
❪iostream❫
❪sstream❫
❪iomanip❫
❪unordered_map❫
❪"code/utilities/types/vectors/transformers/lib"❫
❪"code/utilities/types/vectors/observers/lib"❫
❪"code/utilities/types/strings/observers/other/lib"❫
❪"code/utilities/types/strings/transformers/removing/lib"❫
❪"code/utilities/types/strings/transformers/appending/lib"❫
❪"code/utilities/program/call/lib"❫
❪"code/utilities/random/files/random_files"❫
❪"code/utilities/random/lib"❫
❪"src/main/protobuf/spawn.pb.h"❫
❪"src/main/protobuf/analysis.pb.h"❫
❪"code/utilities/formats/serialization/protobuf"❫
❪"code/utilities/program/wrappers/bazel/run_environment"❫
❪"code/utilities/program/inputs/flags/data/flags"❫
❪"code/utilities/program/inputs/flags/flag_util"❫
❪"code/utilities/program/wrappers/bazel/query/query_deps_flags"❫
⚯
⚞⚟


◀public: static▶ analysis::CqueryResult ☀Run(std::string const& bazel_wrapper, std::string const& dep_name)❰

    //build it first, so the artifacts exist
    //this should be optional,
    //Build_It(bazel_wrapper,dep_name);
    
    
    std::string command = bazel_wrapper;
    command += " cquery ";
    //command += "--output=proto ";
    command += "--output=proto ";
    
    //quiet
    command += "--noshow_progress ";
    command += "--noshow_loading_progress ";
    command += "--noshow_task_finish ";
    //command += "--noshow_warnings ";
    
    command += "'" + dep_name + "'";
    
    std::string output_file = Random_Files::Random_Tmp_Filename();
    execute_to_file(command,output_file);
    std::cout << output_file << std::endl;
    
    auto x = Deserialize<analysis::CqueryResult>(output_file);
    return x;
❱

◀private: static▶ void ☀Build_It(std::string const& bazel_wrapper, std::string const& dep_name)❰

    std::string command = bazel_wrapper;
    command += " build ";
    command += dep_name;
    
    execute(command);
❱
