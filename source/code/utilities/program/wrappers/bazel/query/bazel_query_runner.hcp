class
❪vector❫
❪string❫
❪iostream❫
❪sstream❫
❪iomanip❫
❪unordered_map❫
❪"code/utilities/types/vectors/transformers/lib"❫
❪"code/utilities/types/vectors/observers/lib"❫
❪"code/utilities/types/strings/observers/other/lib"❫
❪"code/utilities/types/strings/transformers/removing/lib"❫
❪"code/utilities/types/strings/transformers/appending/lib"❫
❪"code/utilities/program/call/lib"❫
❪"code/utilities/random/lib"❫
❪"code/utilities/random/files/random_files"❫
❪"src/main/protobuf/spawn.pb.h"❫
❪"src/main/protobuf/build.pb.h"❫
❪"code/utilities/formats/serialization/protobuf"❫
❪"code/utilities/program/wrappers/bazel/run_environment"❫
❪"code/utilities/program/inputs/flags/data/flags"❫
❪"code/utilities/program/inputs/flags/flag_util"❫
❪"code/utilities/program/wrappers/bazel/query/query_deps_flags"❫
⚯
⚞⚟



◀public: static▶ blaze_query::QueryResult ☀Run(std::string const& bazel_wrapper, std::string const& dep_name)❰

    //build it first, so the artifacts exist
    //this should be optional,
    //Build_It(bazel_wrapper,dep_name);
    
    
    std::string command = bazel_wrapper;
    command += " query ";
    //command += "--output=proto ";
    command += "--output=proto ";
    
    //quiet
    command += "--noshow_progress ";
    command += "--noshow_loading_progress ";
    command += "--noshow_task_finish ";
    //command += "--noshow_warnings ";
    
    command += "'" + dep_name + "'";
    
    std::string output_file = Random_Files::Random_Tmp_Filename();
    execute_to_file(command,output_file);
    std::cout << output_file << std::endl;
    
    auto x = Deserialize<blaze_query::QueryResult>(output_file);
    return x;
❱









//more specific queries
◀public: static▶ std::vector<std::string> ☀Get_All_Test_Targets_Tagged_No_Remote(std::string const& bazel_wrapper)❰
    auto command = Get_No_Remote_Test_Target_Query_Command(bazel_wrapper);
    auto results = Get_Each_Line_Of_Shell_Command(command);
    
    Sort_And_Remove_Duplicates(results);
    return results;
❱

◀public: static▶ std::vector<std::string> ☀Get_All_Test_Targets(std::string const& bazel_wrapper)❰
    auto command = Get_All_Test_Targets_Query_Command(bazel_wrapper);
    std::cout << command << std::endl;
    auto results = Get_Each_Line_Of_Shell_Command(command);
    
    Sort_And_Remove_Duplicates(results);
    return results;
❱

//this function can help answer the question: "if I upgrade this library, what other libraries might break and need upgraded as well?"
◀public: static▶ std::vector<std::string> ☀Get_All_Third_Party_Libs_That_Rely_On_Third_Party_Lib(std::string const& bazel_wrapper, std::string const& dep_name)❰

    auto command = Get_Third_Party_RDep_Query_Command(bazel_wrapper,dep_name);
    auto results = Get_Each_Line_Of_Shell_Command(command);
    Remove_If(results,[&](std::string s){
        return !Begins_With(s,"@");
    });
    
    for (auto & it: results){
        Remove_First_Char(it); //@
        Remove_Everything_After_Found_Instance(it,"//");
    }
    
    Sort_And_Remove_Duplicates(results);
    return results;
❱



//"what are the specific targets of this third party library?"
◀public: static▶ std::vector<std::string> ☀Get_All_Self_Third_Party_Deps(std::string const& bazel_wrapper, std::string const& dep_name)❰
    auto command = Get_Third_Party_Deps_Query_Command(bazel_wrapper,dep_name);
    auto results = Get_Each_Line_Of_Shell_Command(command);
    Remove_If(results,[&](std::string s){
        return !Begins_With(s,"@" + dep_name + "//:");
    });
    return results;
❱

//"what are the specific dependencies of this target within this third party library?"
◀public: static▶ std::vector<std::string> ☀Get_All_Deps_Within_Third_Party(std::string const& bazel_wrapper, std::string const& dep_name, std::string const& target)❰
    auto command = Get_Deps_Query_Command(bazel_wrapper,target);
    auto results = Get_Each_Line_Of_Shell_Command(command);
    Remove_If(results,[&](std::string s){
        return !Begins_With(s,"@" + dep_name + "//:");
    });
    return results;
❱




//command building
◀private: static▶ std::string ☀Get_Deps_Query_Command(std::string const& bazel_wrapper, std::string const& dep_name) ❰

    //decide flags
    Flags flags;
    Query_Deps_Flags dep_settings;
    Add_Dep_Query_Flags(flags,dep_settings);
    Add_Miscellaneous_Flags(flags);
    
    std::string command = bazel_wrapper;
    command += " query " + Lib_Deps_Query(dep_name);
    command += " ";
    command += Flag_Util::In_Cli_Form(flags);
    return command;
❱

◀private: static▶ std::string ☀Get_RDep_Query_Command(std::string const& bazel_wrapper, std::string const& dep_name) ❰

    //decide flags
    Flags flags;
    Query_Deps_Flags dep_settings;
    Add_Dep_Query_Flags(flags,dep_settings);
    Add_Miscellaneous_Flags(flags);
    
    std::string command = bazel_wrapper;
    command += " query " + Lib_RDeps_Query(dep_name);
    command += " ";
    command += Flag_Util::In_Cli_Form(flags);
    return command;
❱
◀private: static▶ std::string ☀Get_Third_Party_Deps_Query_Command(std::string const& bazel_wrapper, std::string const& dep_name) ❰

    //decide flags
    Flags flags;
    Query_Deps_Flags dep_settings;
    Add_Dep_Query_Flags(flags,dep_settings);
    Add_Miscellaneous_Flags(flags);
    
    std::string command = bazel_wrapper;
    command += " query " + Third_Party_Lib_Deps_Query(dep_name);
    command += " ";
    command += Flag_Util::In_Cli_Form(flags);
    return command;
❱

◀private: static▶ std::string ☀Get_Third_Party_RDep_Query_Command(std::string const& bazel_wrapper, std::string const& dep_name) ❰

    //decide flags
    Flags flags;
    Query_Deps_Flags dep_settings;
    Add_Dep_Query_Flags(flags,dep_settings);
    Add_Miscellaneous_Flags(flags);
    
    std::string command = bazel_wrapper;
    command += " query " + Third_Party_Lib_RDeps_Query(dep_name);
    command += " ";
    command += Flag_Util::In_Cli_Form(flags);
    return command;
❱

◀private: static▶ std::string ☀Get_No_Remote_Test_Target_Query_Command(std::string const& bazel_wrapper) ❰

    //decide flags
    Flags flags;
    Query_Deps_Flags dep_settings;
    Add_Dep_Query_Flags(flags,dep_settings);
    Add_Miscellaneous_Flags(flags);
    
    std::string command = bazel_wrapper;
    command += " query 'attr(tags, no-remote, tests(//...))'";
    command += " ";
    command += Flag_Util::In_Cli_Form(flags);
    return command;
❱

◀private: static▶ std::string ☀Get_All_Test_Targets_Query_Command(std::string const& bazel_wrapper) ❰

    //decide flags
    Flags flags;
    Query_Deps_Flags dep_settings;
    Add_Dep_Query_Flags(flags,dep_settings);
    Add_Miscellaneous_Flags(flags);
    
    std::string command = bazel_wrapper;
    command += " query 'tests(...)'";
    command += " ";
    command += Flag_Util::In_Cli_Form(flags);
    return command;
❱


//flag building
◀private: static▶ void ☀Add_Miscellaneous_Flags(Flags & flags)❰

    Flag_Util::Add_Flag(flags,"keep_going");
❱

◀private: static▶ void ☀Add_Dep_Query_Flags(Flags & flags, Query_Deps_Flags const& settings)❰

    if (settings.implicit_deps){
        Flag_Util::Add_Flag(flags,"implicit_deps");
    }
    else {
        Flag_Util::Add_Flag(flags,"noimplicit_deps");
    }
    if (settings.host_deps){
        Flag_Util::Add_Flag(flags,"host_deps");
    }
    else {
        Flag_Util::Add_Flag(flags,"nohost_deps");
    }
    
❱


◀private: static▶ std::string ☀Lib_Deps_Query(std::string const& dep_name)❰
    std::string x = "'deps(" + dep_name + ")'";
    return x;
❱
◀private: static▶ std::string ☀Lib_RDeps_Query(std::string const& dep_name)❰
    std::string x = "'rdeps(...," + dep_name + ")'";
    return x;
❱
◀private: static▶ std::string ☀Third_Party_Lib_Deps_Query(std::string const& dep_name)❰
    std::string x = "'deps(@" + dep_name + "//...)'";
    return x;
❱
◀private: static▶ std::string ☀Third_Party_Lib_RDeps_Query(std::string const& dep_name)❰
    std::string x = "'rdeps(...,@" + dep_name + "//...)'";
    return x;
❱