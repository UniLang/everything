class
❪string❫
❪unordered_map❫
❪utility❫
❪cstdlib❫
❪vector❫
❪"code/utilities/fonts/bdf/settings/character_segment"❫
❪"code/utilities/data_structures/graphics/objects/label/data/label_settings"❫
❪"code/utilities/data_structures/graphics/objects/buttoned_faced_label/data/positioned_buttoned_faced_label"❫
❪"code/utilities/data_structures/graphics/objects/buttoned_faced_tree/data/positioned_button_face_tree"❫
❪"code/utilities/data_structures/graphics/objects/buttoned_faced_tree/data/button_face_tree"❫
❪"code/utilities/data_structures/graphics/objects/label/label_drawer"❫
❪"code/utilities/data_structures/graphics/objects/frame_elements"❫
❪"code/utilities/types/vectors/operators/lib"❫
❪"code/utilities/data_structures/graphics/objects/faced_label/faced_label_drawer"❫
❪"code/utilities/data_structures/graphics/objects/faced_label/faced_label_eventer"❫
❪"code/utilities/peripheral/mouse/state/mouse_state"❫
❪"code/utilities/fonts/bdf/character_maps/character_maps"❫
❪"code/utilities/data_structures/counters/unique_max_counter/unique_max_counter"❫
❪"code/utilities/code/properties/references/reference_lookup_map"❫
❪"code/utilities/data_structures/graphics/objects/buttoned_faced_tree/button_face_tree_range"❫
❪"code/utilities/data_structures/graphics/objects/buttoned_faced_tree/positioned_button_tree_iterator"❫
❪"code/utilities/data_structures/graphics/objects/buttoned_faced_tree/data/draw_strategy"❫
⚯
❪"code/utilities/data_structures/graphics/objects/mouse/events/mouse_events_checker"❫
❪"code/utilities/types/vectors/operators/lib"❫
❪"code/utilities/types/vectors/observers/lib"❫
❪"code/utilities/data_structures/graphics/bitmap/premade/vertical_line"❫
❪"code/utilities/data_structures/graphics/bitmap/premade/horizontal_line"❫
❪"code/utilities/data_structures/graphics/bitmap/premade/l_line"❫
❪"code/utilities/data_structures/graphics/bitmap/premade/right_arrow"❫
❪"code/utilities/data_structures/graphics/bitmap/premade/left_arrow"❫
❪"code/utilities/data_structures/graphics/objects/buttoned_faced_label/buttoned_faced_label_is_active"❫
❪"code/utilities/data_structures/graphics/objects/faced_label/faced_label_is_active"❫
❪"code/utilities/data_structures/graphics/objects/faced_label/faced_label_set_active"❫
❪"code/utilities/data_structures/graphics/objects/buttoned_faced_tree/button_tree_global_navigation"❫
❪"code/utilities/data_structures/graphics/objects/buttoned_faced_label/buttoned_faced_label_drawer"❫
❪"code/utilities/data_structures/graphics/objects/buttoned_faced_tree/for_each_noncollapsed"❫
❪"code/utilities/data_structures/graphics/objects/buttoned_faced_tree/button_face_tree_full_path_name"❫
❪"code/utilities/data_structures/graphics/objects/buttoned_faced_tree/button_face_tree_connection_drawer"❫
❪"code/utilities/data_structures/graphics/objects/buttoned_faced_tree/button_face_tree_drawer_wide"❫
❪"code/utilities/data_structures/graphics/objects/buttoned_faced_tree/button_face_tree_drawer_regular"❫
❪"code/utilities/math/math"❫
⚞⚟

◀public: static▶ Frame_Elements ☀Draw(Character_Maps const& font_chars, Positioned_Button_Face_Tree & tree, Pc_Input_State const& pc_input, Reference_Lookup_Map const& ref_map)❰
    
    Frame_Elements elements;
    
    //create traversal range
    Button_Face_Tree_Range range = Full_Range(tree);
    
    Button_Tree_Global_Navigation::Handle_User_Events     (font_chars,elements,pc_input,tree.pos,tree.nodes,tree.nodes.begin(),tree.nodes.end());
    Draw_Tree(font_chars,elements,pc_input,tree.pos,tree.nodes,tree.draw_settings,range,ref_map);
    return elements;
❱
◀public: static▶ Frame_Elements ☀Draw(Character_Maps const& font_chars, Button_Face_Tree & tree, Position const& pos, Pc_Input_State const& pc_input, Reference_Lookup_Map const& ref_map)❰
    
    Frame_Elements elements;
    
    //create traversal range
    Button_Face_Tree_Range range = Full_Range(tree);
    
    Button_Tree_Global_Navigation::Handle_User_Events     (font_chars,elements,pc_input,pos,tree.nodes,tree.nodes.begin(),tree.nodes.end());
    Draw_Tree(font_chars,elements,pc_input,pos,tree.nodes,tree.draw_settings,range,ref_map);
    return elements;
❱



//get full ranges
◀private: static▶ Button_Face_Tree_Range ☀Full_Range(Button_Face_Tree & tree)❰
    Button_Face_Tree_Range range;
    range.begin = tree.nodes.begin();
    range.end = tree.nodes.end();
    return range;
❱
◀private: static▶ Button_Face_Tree_Range ☀Full_Range(Positioned_Button_Face_Tree & tree)❰
    Button_Face_Tree_Range range;
    range.begin = tree.nodes.begin();
    range.end = tree.nodes.end();
    return range;
❱


◀private: static▶ void ☀Draw_Tree(Character_Maps const& font_chars, Frame_Elements & elements, Pc_Input_State const& pc_input, Position const& pos, const tree<Buttoned_Faced_Label>& tr, Button_Face_Tree_Draw_Settings const& draw_settings, Button_Face_Tree_Range const& range, Reference_Lookup_Map const& ref_map)❰
    
    
    elements.types += Build_Branches_And_Button_Labels(font_chars,pc_input,pos,tr,draw_settings,range).types;
    elements.types += Button_Face_Tree_Connection_Drawer::Draw(font_chars,pc_input,pos,tr,range,ref_map).types;
    
❱


◀private: static▶ Frame_Elements  ☀Build_Branches_And_Button_Labels(Character_Maps const& font_chars, Pc_Input_State const& pc_input, Position const& pos, const tree<Buttoned_Faced_Label>& tr, Button_Face_Tree_Draw_Settings const& draw_settings, Button_Face_Tree_Range const& range)❰
    
    
    if (draw_settings.draw_strategy == Draw_Strategy::REGULAR_TREE) {
        return Button_Face_Tree_Drawer_Regular::Draw(font_chars,pc_input,pos,tr,draw_settings,range);
    }
    else if (draw_settings.draw_strategy == Draw_Strategy::WIDE_TREE){
        return Button_Face_Tree_Drawer_Wide::Draw(font_chars,pc_input,pos,tr,draw_settings,range);
    }
    
❱
