class
❪string❫
❪unordered_map❫
❪utility❫
❪cstdlib❫
❪vector❫
❪"code/utilities/fonts/bdf/settings/character_segment"❫
❪"code/utilities/data_structures/graphics/objects/label/data/label_settings"❫
❪"code/utilities/data_structures/graphics/objects/buttoned_faced_label/data/positioned_buttoned_faced_label"❫
❪"code/utilities/data_structures/graphics/objects/buttoned_faced_tree/data/positioned_button_face_tree"❫
❪"code/utilities/data_structures/graphics/objects/buttoned_faced_tree/data/button_face_tree"❫
❪"code/utilities/data_structures/graphics/objects/label/label_drawer"❫
❪"code/utilities/data_structures/graphics/objects/frame_elements"❫
❪"code/utilities/types/vectors/operators/lib"❫
❪"code/utilities/data_structures/graphics/objects/faced_label/faced_label_drawer"❫
❪"code/utilities/data_structures/graphics/objects/faced_label/faced_label_eventer"❫
❪"code/utilities/peripheral/mouse/state/mouse_state"❫
❪"code/utilities/fonts/bdf/character_maps/character_maps"❫
❪"code/utilities/data_structures/counters/unique_max_counter/unique_max_counter"❫
❪"code/utilities/code/references/reference_lookup_map"❫
❪"code/utilities/data_structures/graphics/objects/buttoned_faced_tree/button_face_tree_range"❫
❪"code/utilities/data_structures/graphics/objects/buttoned_faced_tree/positioned_button_tree_iterator"❫
❪"code/utilities/data_structures/graphics/objects/buttoned_faced_tree/data/draw_strategy"❫
⚯
❪"code/utilities/data_structures/graphics/objects/mouse/events/mouse_events_checker"❫
❪"code/utilities/types/vectors/operators/lib"❫
❪"code/utilities/types/vectors/observers/lib"❫
❪"code/utilities/data_structures/graphics/bitmap/premade/vertical_line"❫
❪"code/utilities/data_structures/graphics/bitmap/premade/horizontal_line"❫
❪"code/utilities/data_structures/graphics/bitmap/premade/l_line"❫
❪"code/utilities/data_structures/graphics/bitmap/premade/right_arrow"❫
❪"code/utilities/data_structures/graphics/bitmap/premade/left_arrow"❫
❪"code/utilities/data_structures/graphics/objects/buttoned_faced_label/buttoned_faced_label_is_active"❫
❪"code/utilities/data_structures/graphics/objects/faced_label/faced_label_is_active"❫
❪"code/utilities/data_structures/graphics/objects/faced_label/faced_label_set_active"❫
❪"code/utilities/data_structures/graphics/objects/buttoned_faced_tree/button_tree_global_navigation"❫
❪"code/utilities/data_structures/graphics/objects/buttoned_faced_label/buttoned_faced_label_drawer"❫
❪"code/utilities/data_structures/graphics/objects/buttoned_faced_tree/for_each_noncollapsed"❫
❪"code/utilities/data_structures/graphics/objects/buttoned_faced_tree/button_face_tree_full_path_name"❫
❪"code/utilities/data_structures/graphics/objects/buttoned_faced_tree/button_face_tree_connection_drawer"❫
❪"code/utilities/math/math"❫
⚞⚟



◀public: static▶ Frame_Elements  ☀Draw(Character_Maps const& font_chars, Pc_Input_State const& pc_input, Position const& pos, const tree<Buttoned_Faced_Label>& tr, Button_Face_Tree_Draw_Settings const& draw_settings, Button_Face_Tree_Range const& range)❰
    
    auto start_pos = pos;
    auto current_pos = pos;
    
    Frame_Elements all;
    Frame_Elements branches;
    Frame_Elements labels;
    
    
    For_Each_Noncollapsed::Iterate_With_Previous(tr,range.begin,range.end,[&](tree<Buttoned_Faced_Label>::pre_order_iterator prev, tree<Buttoned_Faced_Label>::pre_order_iterator it, int depth){
        
        //branches
        if (draw_settings.can_draw_branches) {
            Append(branches.types,Possibly_Add_Branches(tr,it,it->label,start_pos,current_pos,depth).types);
        }
        
        //adjust position for label. perform event update.
        Adjust_Positions_For_Next_Cell_Before_Draw(it->label,start_pos,current_pos,depth);
        
        //should we show the button
        if (draw_settings.can_draw_buttons) {
            it->style.show_button = tr.number_of_children(it) > 0;
        }
        else {
            it->style.show_button = false;
        }
        
        //draw the label
        Faced_Label_Eventer::Event_It(font_chars,it->label,current_pos,pc_input);
        Append(labels.types,Buttoned_Faced_Label_Drawer::Draw(font_chars,*it,current_pos,pc_input).types);
        
        Adjust_Positions_For_Next_Cell_After_Draw(it->label,start_pos,current_pos,depth);
        
        
        return Should_Break::NO;
    });
    
    all.types += branches.types;
    all.types += labels.types;
    return all;
❱


◀private: static▶ Frame_Elements  ☀Possibly_Add_Branches(tree<Buttoned_Faced_Label> const& tr, tree<Buttoned_Faced_Label>::pre_order_iterator it, Faced_Label const& label, Position const& start_pos, Position const& current_pos, int const& depth)❰

    Frame_Elements elements;
    
    auto dim = Faced_Label_Drawer::Get_Dimensions(label);

    Positioned_Multi_Color_Bitmap branch_data;
    branch_data.bitmap = Vertical_Line::Create(14);
    branch_data.pos.x = start_pos.x;
    branch_data.pos.y = current_pos.y + dim.y-7;
    for (size_t i = 0; i < depth; ++i){
        
        
        if (Should_Put_Vertical_Bar(tr,it,i)){
            branch_data.pos.x = start_pos.x + (10 * i) - 16;
            elements.types.emplace_back(branch_data);
        }
    }
    
    if (depth != 0){
        branch_data.bitmap = L_Line::Create(14,11);
        branch_data.pos.x = start_pos.x + (10 * depth) - 16;
        branch_data.pos.y = current_pos.y + dim.y-7;
        elements.types.emplace_back(branch_data);
    }
    
    //add selector arrow
    if (Faced_Label_Is_Active::Is_Active(label)){
        branch_data.bitmap = Right_Arrow::Create(5);
        branch_data.pos.x = start_pos.x - 18;
        branch_data.pos.y = current_pos.y + 20;
        elements.types.emplace_back(branch_data);
    }
    
    return elements;
    
❱

◀private: static▶ bool  ☀Should_Put_Vertical_Bar(tree<Buttoned_Faced_Label> const& tr, tree<Buttoned_Faced_Label>::pre_order_iterator it, int depth)❰

    auto current_depth = tr.depth(it);
    auto ptr = it;
    for (int i = depth; i < current_depth; ++i){
        ptr = tr.parent(ptr);
    }
    
    bool another_parent_child = (tr.next_sibling(ptr) != nullptr);
    return another_parent_child;
❱


◀private: static▶ void  ☀Adjust_Positions_For_Next_Cell_Before_Draw(Faced_Label const& label, Position const& start_pos, Position & current_pos, int const& depth)❰
        Move_Down_And_Indent(label,start_pos,current_pos,depth);
        //Indent(label,start_pos,current_pos,depth);
❱
◀private: static▶ void  ☀Adjust_Positions_For_Next_Cell_After_Draw(Faced_Label const& label, Position const& start_pos, Position & current_pos, int const& depth)❰
        //Move_Down_And_Indent(label,start_pos,current_pos,depth);
        //Indent(label,start_pos,current_pos,depth);
❱

◀private: static▶ void  ☀Move_Down_And_Indent(Faced_Label const& label, Position const& start_pos, Position & current_pos, int const& depth)❰

        auto dim = Faced_Label_Drawer::Get_Dimensions(label);
        current_pos.x = start_pos.x + 10 * depth;
        current_pos.y += dim.y-1;
❱