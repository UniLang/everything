class
❪string❫
❪unordered_map❫
❪utility❫
❪cstdlib❫
❪"code/utilities/data_structures/graphics/objects/buttoned_faced_tree/button_face_tree"❫
❪"code/utilities/data_structures/tree/generic/child_lookup_map"❫
❪"code/utilities/code/style_theme/style_lookup_map"❫
❪"code/utilities/code/style_theme/style_theme"❫
❪"code/utilities/data_structures/tree/generic/child_lookup_map"❫
❪"code/utilities/code/style_theme/style_lookup_map"❫
⚯
❪"code/utilities/data_structures/graphics/objects/faced_tree/tree_label_click_finder"❫
❪"code/utilities/data_structures/graphics/objects/buttoned_faced_label/premade/buttoned_faced_label_premades"❫
❪"code/utilities/data_structures/graphics/objects/buttoned_faced_tree/button_face_tree_full_path_name"❫
❪"code/utilities/data_structures/tree/generic/child_lookup_map_find"❫
❪"code/utilities/types/strings/transformers/removing/lib"❫
❪"code/utilities/data_structures/graphics/objects/buildable_faced_tree/buildable_face_tree_action_doer"❫
❪"code/utilities/types/vectors/observers/lib"❫
⚞⚟




◀public: static▶ void ☀Apply_Theme(Button_Face_Tree & tree, Child_Lookup_Map const& schema, Style_Lookup_Map const& schema_styles)❰

    for (auto it = tree.nodes.begin(); it != tree.nodes.end(); ++it){
        //auto full_name = With_Child_Name(tree,tree.nodes.parent(it),it->name);
        //Button_Faced_Label_Style_Applier::Apply_Theme(tree,schema_styles,full_name);
    }
❱



◀private: static▶ std::string ☀With_Child_Name(Button_Face_Tree const& structure, ::tree<Buttoned_Faced_Label>::pre_order_iterator it, std::string const& child_name)❰
    auto full_name = Button_Face_Tree_Full_Path_Name::Get(structure,it);
    full_name += child_name + "/";
    return full_name;
❱