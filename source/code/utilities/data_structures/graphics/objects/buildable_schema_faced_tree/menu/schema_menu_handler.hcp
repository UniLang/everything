class
❪string❫
❪unordered_map❫
❪utility❫
❪cstdlib❫
❪"code/utilities/fonts/bdf/settings/character_segment"❫
❪"code/utilities/data_structures/graphics/objects/label/data/label_settings"❫
❪"code/utilities/data_structures/graphics/objects/buttoned_faced_label/data/positioned_buttoned_faced_label"❫
❪"code/utilities/data_structures/graphics/objects/buttoned_faced_tree/positioned_button_face_tree"❫
❪"code/utilities/data_structures/graphics/objects/buttoned_faced_tree/button_tree_label_drawer"❫
❪"code/utilities/data_structures/graphics/objects/buildable_faced_tree/data/buildable_face_tree"❫
❪"code/utilities/data_structures/graphics/objects/buildable_faced_tree/data/positioned_buildable_face_tree"❫
❪"code/utilities/data_structures/graphics/objects/buildable_faced_tree/buildable_label_action"❫
❪"code/utilities/data_structures/graphics/objects/label/label_drawer"❫
❪"code/utilities/data_structures/graphics/objects/frame_elements"❫
❪"code/utilities/types/vectors/operators/lib"❫
❪"code/utilities/data_structures/graphics/objects/faced_label/faced_label_drawer"❫
❪"code/utilities/peripheral/mouse/state/mouse_state"❫
❪"code/utilities/fonts/bdf/character_maps/character_maps"❫
❪"code/utilities/data_structures/counters/unique_max_counter/unique_max_counter"❫
❪"code/utilities/data_structures/graphics/objects/select_menu/select_menu"❫
❪"code/utilities/data_structures/tree/generic/child_lookup_map"❫
❪"code/utilities/code/style_theme/style_lookup_map"❫
❪"code/utilities/data_structures/graphics/objects/buildable_schema_faced_tree/menu/create/schema_tree_menu_creation_settings"❫
❪"code/utilities/data_structures/graphics/objects/buildable_schema_faced_tree/menu/schema_menu_type"❫
❪"code/utilities/data_structures/graphics/objects/buildable_schema_faced_tree/menu/schema_menu_open_strategy"❫
⚯
❪"code/utilities/data_structures/graphics/objects/mouse/events/mouse_events_checker"❫
❪"code/utilities/types/vectors/operators/lib"❫
❪"code/utilities/types/vectors/observers/lib"❫
❪"code/utilities/data_structures/graphics/bitmap/premade/vertical_line"❫
❪"code/utilities/data_structures/graphics/bitmap/premade/horizontal_line"❫
❪"code/utilities/data_structures/graphics/bitmap/premade/l_line"❫
❪"code/utilities/data_structures/graphics/objects/faced_label/premade/faced_label_premades"❫
❪"code/utilities/data_structures/graphics/objects/faced_tree/tree_label_drawer"❫
❪"code/utilities/data_structures/graphics/objects/buttoned_faced_tree/button_face_tree_click_finder"❫
❪"code/utilities/data_structures/graphics/objects/faced_tree/tree_label_click_finder"❫
❪"code/utilities/data_structures/graphics/objects/buttoned_faced_label/premade/buttoned_faced_label_premades"❫
❪"code/utilities/data_structures/graphics/objects/buildable_faced_tree/buildable_face_tree_action_doer"❫
❪"code/utilities/output/printers/lib"❫
❪"code/utilities/data_structures/tree/generic/child_lookup_map_find"❫
❪"code/utilities/data_structures/graphics/objects/buttoned_faced_tree/button_face_tree_full_path_name"❫
❪"code/utilities/data_structures/graphics/objects/buildable_schema_faced_tree/menu/create/schema_tree_menu_creator"❫
❪"code/utilities/data_structures/graphics/objects/buildable_schema_faced_tree/menu/select/schema_tree_menu_click_handler"❫
❪"code/utilities/data_structures/graphics/objects/buildable_schema_faced_tree/menu/select/schema_tree_menu_select_handler"❫
❪"code/utilities/data_structures/graphics/objects/buttoned_faced_tree/button_face_tree_active_pos_finder"❫
❪"code/utilities/data_structures/graphics/objects/faced_tree/faced_tree_next_active"❫
❪"code/utilities/data_structures/graphics/objects/faced_tree/faced_tree_previous_active"❫
❪"code/utilities/data_structures/graphics/objects/buildable_schema_faced_tree/menu/schema_menu_control_settings"❫
⚞⚟

◀public: static▶ void ☀Handle_Menu_Logic(Frame_Elements & elements, Position const& pos, Character_Maps const& font_chars, Pc_Input_State const& pc_input, Buildable_Face_Tree_State & state, Child_Lookup_Map const& lookup, Style_Lookup_Map const& style_lookup, Schema_Menu_Open_Strategy const& how_to_open)❰


    //was an element clicked?
    //decide to show the action menu 
    Possibly_Open_Menu(pc_input,pos,state,lookup,style_lookup,how_to_open);
    
    //how to draw and handle menu clicks
    Handle_Menu(elements,font_chars,pos,lookup,style_lookup,state,pc_input,how_to_open);
❱



◀private: static▶ void ☀Possibly_Open_Menu(Pc_Input_State const& pc_input, Position const& pos, Buildable_Face_Tree_State & tree, Child_Lookup_Map const& lookup, Style_Lookup_Map const& style_lookup, Schema_Menu_Open_Strategy const& how_to_open)❰

    if (how_to_open != Schema_Menu_Open_Strategy::DONT_OPEN){
        
        auto settings = Create_Menu_Settings(pc_input);
        auto menu_out = Schema_Tree_Menu_Creator::Create_Menu(tree.structure,lookup,settings,tree.selected_node);
        tree.menu.menu = menu_out.menu;
        tree.menu.pos = Decide_Menu_Location(pc_input,pos,tree,how_to_open);
        
        //does the generated meny actually have menu items?
        //if it doesn't let's keep the menu invisible.  
        //otherwise we bring up an empty menu that the yser can't see.
        //and its confusing, because they have to do something to make the meny disappear
        //before their actions have another effect.
        if (tree.menu.menu.nodes.size() > 0){
            tree.menu.visible = true;
        }
    }
❱

◀private: static▶ Position ☀Decide_Menu_Location(Pc_Input_State const& pc_input, Position const& pos, Buildable_Face_Tree_State & tree, Schema_Menu_Open_Strategy const& how_to_open)❰

    if (how_to_open == Schema_Menu_Open_Strategy::ALONGSIDE){
        return Button_Face_Tree_Active_Pos_Finder::Find_Active_Pos(tree.structure,pos);
    }
    return pc_input.mouse.pos;
❱


◀private: static▶ Schema_Tree_Menu_Creation_Settings ☀Create_Menu_Settings(Pc_Input_State const& pc_input)❰
    
    Schema_Tree_Menu_Creation_Settings settings;
    settings.add_global_manipulation_options = false;
    settings.add_local_manipulation_options = false;
    settings.add_sibiling_rename_options = false;
    settings.add_children_append_options = false;
    
    auto menu_type = Choose_Menu_Type(pc_input);
    
    switch (menu_type){
        case Schema_Menu_Type::GLOBAL:
        settings.menu_name = "global";
        settings.add_global_manipulation_options = true;
        break;
        
        case Schema_Menu_Type::LOCAL:
        settings.menu_name = "local";
        settings.add_local_manipulation_options = true;
        break;
        
        case Schema_Menu_Type::RENAME:
        settings.menu_name = "rename";
        settings.add_sibiling_rename_options = true;
        break;
        
        case Schema_Menu_Type::INSERT:
        settings.menu_name = "insert";
        settings.add_children_append_options = true;
        break;
    }
    
    return settings;
    

❱


◀private: static▶ Schema_Menu_Type ☀Choose_Menu_Type(Pc_Input_State const& pc_input)❰

    //keyboard input
    Schema_Menu_Control_Settings control_settings;
    auto pick_global_key_state = pc_input.keyboard.key_states[control_settings.choose_menu_global];
    auto pick_local_key_state = pc_input.keyboard.key_states[control_settings.choose_menu_local];
    auto pick_rename_key_state = pc_input.keyboard.key_states[control_settings.choose_menu_rename];
    
    if (pick_global_key_state == Key_State::DOWN || pick_global_key_state == Key_State::PRESSED){
        return Schema_Menu_Type::GLOBAL;
    }
    if (pick_local_key_state == Key_State::DOWN || pick_local_key_state == Key_State::PRESSED){
        return Schema_Menu_Type::LOCAL;
    }
    if (pick_rename_key_state == Key_State::DOWN || pick_rename_key_state == Key_State::PRESSED){
        return Schema_Menu_Type::RENAME;
    }
    
    return Schema_Menu_Type::INSERT;
❱

◀private: static▶ void ☀Handle_Menu(Frame_Elements & elements, Character_Maps const& font_chars, Position const& pos, Child_Lookup_Map const& lookup, Style_Lookup_Map const& style_lookup, Buildable_Face_Tree_State & tree, Pc_Input_State const& pc_input, Schema_Menu_Open_Strategy const& how_to_open)❰


    //keyboard input
    auto select_key_state = pc_input.keyboard.key_states[tree.menu.key_control.select_active];
    auto up_key_state = pc_input.keyboard.key_states[tree.menu.key_control.navigate_up];
    auto down_key_state = pc_input.keyboard.key_states[tree.menu.key_control.navigate_down];
    
    if (tree.menu.visible){
        elements.types += Tree_Label_Drawer::Draw(font_chars,tree.menu.menu,tree.menu.pos,pc_input).types;
        
        if (how_to_open == Schema_Menu_Open_Strategy::DONT_OPEN){
            
            //user clicked a menu item
            if (pc_input.mouse.left.clicked || pc_input.mouse.right.clicked){
                tree.menu.visible = false;
                Schema_Tree_Menu_Click_Handler::Handle_Menu_Click(font_chars, pos, tree, lookup,style_lookup, pc_input);
            }
            
            //user selected a menu item
            else if (select_key_state == Key_State::PRESSED){
                tree.menu.visible = false;
                Schema_Tree_Menu_Select_Handler::Handle_Menu_Select(font_chars, pos, tree, lookup,style_lookup, pc_input);
            }
            
            //user navigated up
            else if (up_key_state == Key_State::PRESSED){
                Faced_Tree_Previous_Active::Perform(tree.menu.menu);
            }
            
            //user navigated down
            else if (down_key_state == Key_State::PRESSED){
                Faced_Tree_Next_Active::Perform(tree.menu.menu);
            }
            
            
            
        }
    }
❱

