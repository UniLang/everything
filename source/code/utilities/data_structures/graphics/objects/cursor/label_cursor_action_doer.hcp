class
❪"code/utilities/graphics/imgui/loop/mechanics"❫
❪"SDL.h"❫
❪"code/utilities/data_structures/graphics/objects/label/data/positioned_label"❫
❪"code/utilities/peripheral/pc/pc_input_state"❫
❪"code/utilities/fonts/bdf/character_maps/character_maps"❫
❪"code/utilities/data_structures/graphics/objects/cursor/text_box_action_decider"❫
⚯
❪"code/utilities/graphics/imgui/ui_renders"❫
❪"code/utilities/graphics/imgui/window/window_renderer"❫
❪"code/utilities/graphics/imgui/window/window_position_finder"❫
❪"code/utilities/peripheral/keyboard/key_detector"❫
❪"code/utilities/data_structures/graphics/objects/cursor/label_cursor_mover"❫
❪"code/utilities/data_structures/graphics/objects/cursor/label_cursor_actions"❫
⚞⚟

◀public: static▶ void ☀Handle_Actions(Character_Maps const& font_chars, Positioned_Label & label, Label_Cursor_Selection & selection, Pc_Input_State const& pc_input)❰
    Handle_Actions(font_chars,label.pos,label.state,selection,pc_input);
❱

◀public: static▶ void ☀Handle_Actions(Character_Maps const& font_chars, Position pos, Label_Settings & label, Label_Cursor_Selection & selection, Pc_Input_State const& pc_input)❰

    //we assume the textbox is already active
    auto action = Text_Box_Action_Decider::Decide(pc_input);
    Perform_Action(font_chars,pos,label,selection,action,pc_input);
❱


◀public: static▶ void ☀Perform_Action(Character_Maps const& font_chars, Position pos, Label_Settings & label, Label_Cursor_Selection & selection, Text_Box_Action const& action, Pc_Input_State const& pc_input)❰

    switch (action){
        case Text_Box_Action::SELECT_FORWARD:    Maybe_Selection_Forwards(font_chars,pos,label,selection);        break;
        case Text_Box_Action::NAVIGATE_FORWARD:  Maybe_NonSelection_Forwards(font_chars,pos,label,selection);     break;
        case Text_Box_Action::SELECT_BACKWARD:   Maybe_Selection_Backwards(font_chars,pos,label,selection);       break;
        case Text_Box_Action::NAVIGATE_BACKWARD: Maybe_NonSelection_Backwards(font_chars,pos,label,selection);    break;
        case Text_Box_Action::BACKSPACE:         Maybe_Handle_Backwards_Deletion(font_chars,pos,label,selection); break;
        case Text_Box_Action::SELECT_ALL:        Maybe_Handle_All_Selection(font_chars,pos,label,selection);      break;
        case Text_Box_Action::COPY:              Maybe_Copy(font_chars,pos,label,selection);                      break;
        case Text_Box_Action::PASTE:             Maybe_Paste(font_chars,pos,label,selection);                     break;
        case Text_Box_Action::DELETE: //todo
        
        //purposefully empty
        case Text_Box_Action::ADD_CHARS:
        case Text_Box_Action::NONE:
        break;
        //TODO: more?
    }
    
    
    //currently outside detection (Text_Box_Action::ADD_CHARS)
    Maybe_Handle_Fowards_Insertion(font_chars,pos,label,selection,pc_input);
❱


//how to perform each action
◀private: static▶ void ☀Maybe_Selection_Forwards(Character_Maps const& font_chars, Position pos, Label_Settings & label, Label_Cursor_Selection & selection)❰
    if (label.cursors.ability.can_select_forward){
        Label_Cursor_Actions::Selection_Forwards(font_chars,pos,label,selection);
    }
❱
◀private: static▶ void ☀Maybe_NonSelection_Forwards(Character_Maps const& font_chars, Position pos, Label_Settings & label, Label_Cursor_Selection & selection)❰
    if (label.cursors.ability.can_noselect_forward){
        Label_Cursor_Actions::NonSelection_Forwards(font_chars,pos,label,selection);
    }
❱
◀private: static▶ void ☀Maybe_Selection_Backwards(Character_Maps const& font_chars, Position pos, Label_Settings & label, Label_Cursor_Selection & selection)❰
    if (label.cursors.ability.can_select_backward){
        Label_Cursor_Actions::Selection_Backwards(font_chars,pos,label,selection);
    }
❱
◀private: static▶ void ☀Maybe_NonSelection_Backwards(Character_Maps const& font_chars, Position pos, Label_Settings & label, Label_Cursor_Selection & selection)❰
    if (label.cursors.ability.can_noselect_backward){
        Label_Cursor_Actions::NonSelection_Backwards(font_chars,pos,label,selection);
    }
❱
◀private: static▶ void ☀Maybe_Handle_Backwards_Deletion(Character_Maps const& font_chars, Position pos, Label_Settings & label, Label_Cursor_Selection & selection)❰
    if (label.cursors.ability.can_backward_delete){
        Label_Cursor_Actions::Handle_Backwards_Deletion(font_chars,pos,label,selection);
    }
❱
◀private: static▶ void ☀Maybe_Handle_All_Selection(Character_Maps const& font_chars, Position pos, Label_Settings & label, Label_Cursor_Selection & selection)❰
    if (label.cursors.ability.can_select_all){
        Label_Cursor_Actions::Handle_All_Selection(font_chars,pos,label,selection);
    }
❱
◀private: static▶ void ☀Maybe_Copy(Character_Maps const& font_chars, Position pos, Label_Settings & label, Label_Cursor_Selection & selection)❰
    if (label.cursors.ability.can_copy){
        Label_Cursor_Actions::Copy(font_chars,pos,label,selection);
    }
❱
◀private: static▶ void ☀Maybe_Paste(Character_Maps const& font_chars, Position pos, Label_Settings & label, Label_Cursor_Selection & selection)❰
    if (label.cursors.ability.can_paste){
        Label_Cursor_Actions::Paste(font_chars,pos,label,selection);
    }
❱
◀private: static▶ void ☀Maybe_Handle_Fowards_Insertion(Character_Maps const& font_chars, Position pos, Label_Settings & label, Label_Cursor_Selection & selection, Pc_Input_State const& pc_input)❰
    if (label.cursors.ability.can_foward_insert){
        Label_Cursor_Actions::Handle_Fowards_Insertion(font_chars,pos,label,selection,pc_input);
    }
❱