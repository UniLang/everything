class
❪string❫
❪unordered_map❫
❪"code/utilities/data_structures/graphics/bitmap/full_color_bitmap/full_color_bitmap"❫
❪"code/utilities/fonts/bdf/settings/character_segment"❫
❪"code/programs/ide/settings/ide_settings"❫
❪"code/utilities/data_structures/graphics/objects/label/data/label_settings"❫
❪"code/utilities/data_structures/graphics/objects/mouse/events/mouse_events_checker"❫
❪"code/utilities/graphics/imgui/render/elements/rectangle_drawer"❫
❪"code/utilities/graphics/imgui/render/elements/full_color_bitmap_drawer"❫
❪"code/utilities/data_structures/graphics/text/text_to_bitmap"❫
❪"code/utilities/graphics/imgui/ui_renders"❫
❪"code/utilities/data_structures/graphics/bitmap/pixel/pixel_slider"❫
❪"code/utilities/colors/defaults/rectangle_shades"❫
❪"code/utilities/data_structures/graphics/objects/faced_label/data/faced_label"❫
❪"code/utilities/data_structures/graphics/objects/label/style/default_label_styles"❫
⚯
❪"code/utilities/colors/defaults/color_defaults"❫
❪"code/utilities/data_structures/graphics/objects/cursor/premade/blue_cursor"❫
❪"code/utilities/data_structures/graphics/objects/cursor/premade/red_cursor"❫
❪"code/utilities/data_structures/graphics/objects/cursor/data/default_cursor_ability"❫
⚞⚟

◀public: static▶ Faced_Label ☀Highlightable_Single_Plain_White_Box()❰
    Faced_Label x;
    
    //add the face
    Label_Face face;
    face.name = "<name>";
    face.label.message = "<message>";
    face.label.styles = Default_Label_Styles::Highlightable_Plain_White_Box();
    x.state.faces.emplace_back(face);
    
    return x;
❱
◀public: static▶ Faced_Label ☀Single_Plain_White_Box()❰
    Faced_Label x;
    
    //add the face
    Label_Face face;
    face.name = "<name>";
    face.label.message = "<message>";
    face.label.styles = Default_Label_Styles::Plain_White_Box();
    x.state.faces.emplace_back(face);
    
    return x;
❱


// A "concept face label" will just be a label with two faces
// The first face represents the concept
// The second face represents the value of that concept.
// From a semiotic perspective, this is very much a signifier/signified relationship.
//however, in terms of our composition layout for data structures, only the leaf nodes have editable content
//therefore, the non-leaf nodes do not need a signified.  They can be concept only.
◀public: static▶ Faced_Label ☀Single_Gray_Concept()❰
    Faced_Label x;
    
    //add the concept face
    x.state.faces.emplace_back(Signifier_Face());
    
    //we want to start on the only available face
    x.state.index = 0;
    
    return x;
❱

◀public: static▶ Faced_Label ☀Single_Gray_Concept_With_Plain_White_Value()❰
    Faced_Label x;
    
    //add the concept face
    x.state.faces.emplace_back(Signifier_Face());
    
    //add the value face
    x.state.faces.emplace_back(Signified_Face());
    
    //we want to start the appearance on the value
    x.state.index = 1;
    
    return x;
❱


◀public: static▶ Label_Face ☀Signifier_Face()❰
    Label_Face face;
    face.name = "<concept>";
    face.label.message = "<concept>";
    face.label.styles = Default_Label_Styles::Plain_Gray_Box();

    //the signifier should not be editable
    face.label.cursors.ability = Default_Cursor_Ability::No_Edit();
    
    return face;
❱

◀public: static▶ Label_Face ☀Signified_Face()❰
    Label_Face face;
    face.name = "<value>";
    face.label.message = "<value>";
    face.label.styles = Default_Label_Styles::Plain_White_Box();
    return face;
❱