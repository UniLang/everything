class


❪"code/utilities/comments/doxygen/maker/doxygen_block_maker"❫
❪"code/utilities/comments/doxygen/maker/doxygen_data"❫
❪"code/utilities/code/concept_static_tree_structs"❫
❪"code/utilities/linguistics/computer/frontends/parts/module_settings"❫
⚯
❪"code/utilities/comments/doxygen/maker/doxygen_data_shared"❫
❪"code/utilities/types/converters/lib"❫
❪"code/utilities/types/converters/lib"❫
❪"code/utilities/types/vectors/observers/lib"❫
⚞⚟

◀public: static▶ void ☀Add(Doxygen_Data & data, model::Function const& method, Module_Settings const& options)❰
    
    auto brief = Potentially_Derive_Brief_Statement(method,options);
    auto details = Potentially_Derive_Details_Statement(method,options);
    
    Doxygen_Data_Shared::Add_If_There_Is_A_Value(data,"brief",brief,options.portion.method_options.comment.grammar);
    Doxygen_Data_Shared::Add_If_There_Is_A_Value(data,"details",details,options.portion.method_options.comment.grammar);
❱



◀private: static▶ std::string ☀Potentially_Derive_Brief_Statement(model::Function const& method, Module_Settings const& options)❰
    
    auto comment = First_Element_Or_Default(method.brief).value;
    
    //use the provided one
    if (!comment.empty()){
        return comment;
    }
    
    
    //user didn't provide one.  lets make it up instead
    auto function_name = First_Element_Or_Default(method.name).value;
    if (options.portion.method_options.derive_brief_comment){
      return function_name;
    }
    
    return "";
❱


◀private: static▶ std::string ☀Potentially_Derive_Details_Statement(model::Function const& method, Module_Settings const& options)❰
    
    auto comment = First_Element_Or_Default(method.detail).value;
    
    //use the provided one
    if (!comment.empty()){
        return comment;
    }
    
    
    //user didn't provide one.  lets make it up instead
    auto function_name = First_Element_Or_Default(method.name).value;
    if (options.portion.method_options.derive_details_comment){
      return function_name;
    }
    
    return "";
❱
