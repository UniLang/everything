class


❪"code/utilities/comments/doxygen/maker/doxygen_data"❫
❪"code/utilities/code/concept_static_tree_structs"❫
❪"code/utilities/linguistics/computer/frontends/parts/module_settings"❫
⚯
❪"code/utilities/comments/doxygen/maker/doxygen_block_maker"❫
❪"code/utilities/comments/doxygen/maker/doxygen_data_getter"❫
❪"code/utilities/comments/doxygen/maker/doxygen_data_shared"❫
❪"code/utilities/types/strings/transformers/other/lib"❫
⚞⚟





◀public: static▶ std::string ☀Get_Indented_Block(model::Module const& x, Module_Settings const& options, unsigned int indent_amount)❰
    
    std::string str;
    
    if (Should_Print(x,options)){
      auto data = Doxygen_Data_Getter::Get(x,options);
      str = Doxygen_Block_Maker::Create_Doxygen_Block(data,options.general.comment.doxygen);
      Indent_Each_Line_N_Amount(str,indent_amount);
    }
    
    return str;
❱


◀public: static▶ std::string ☀Get_Indented_Block(model::Function const& method, std::vector<model::Function> const& methods, Module_Settings const& options, unsigned int indent_amount)❰

    std::string str;
    
    if (Should_Print(method,options)){
      auto data = Doxygen_Data_Getter::Get(method,methods,options);
      str = Doxygen_Block_Maker::Create_Doxygen_Block(data,options.general.comment.doxygen);
      Indent_Each_Line_N_Amount(str,indent_amount);
    }
    
    return str;
❱

◀public: static▶ std::string ☀Get_Indented_Block(model::DataMember const& item, Module_Settings const& options, unsigned int indent_amount)❰

    std::string str;
    if (Should_Print(item,options)){
      auto data = Doxygen_Data_Getter::Get(item,options);
      str = Doxygen_Block_Maker::Create_Doxygen_Block(data,options.general.comment.doxygen);
      Indent_Each_Line_N_Amount(str,indent_amount);
    }
    
    return str;
❱


//for module
◀private: static▶ bool ☀Should_Print(model::Module const& x, Module_Settings const& options)❰
return true;
❱

//for method
◀private: static▶ bool ☀Should_Print(model::Function const& x, Module_Settings const& options)❰
  //return !method.brief_description.value.empty() || !method.detailed_description.value.empty();
return true;
❱

//for data member
◀private: static▶ bool ☀Should_Print(model::DataMember const& x, Module_Settings const& options)❰

  // if (as_string(item.brief.value).empty() && options.portion.data_member_options.derive_brief_comment){return true;}
  // if (!item.detail.value.empty()){return true;}
  // if (!item.units.value.empty()){return true;}
  
  // for (auto const& it: item.comment_pair){
  //   if (!it.key.value.empty() && !it.value.value.empty()){
  //     return true;
  //   }
  // }
  
  // for (auto const& it: item.value_constraints){
  //   if (!it.operation.value.empty() && !it.value.value.empty()){
  //     return true;
  //   }
  // }
  
  // for (auto const& it: item.value_meaning){
  //   if (!it.value.value.empty() && !it.meaning.value.empty()){
  //     return true;
  //   }
  //}
  
  return true;
  
  
❱
