class

❪"code/utilities/code/concept_static_tree_structs"❫
❪"code/utilities/linguistics/computer/frontends/parts/module_settings"❫
❪"code/utilities/comments/doxygen/maker/doxygen_data"❫
⚯
❪"code/utilities/comments/doxygen/maker/doxygen_data_shared"❫
❪"code/utilities/types/converters/lib"❫
❪"code/utilities/types/general/lib"❫
❪"code/utilities/code/query/class_name_getter"❫
❪"code/utilities/linguistics/grammar/grammar_adjuster"❫
❪"code/utilities/types/strings/observers/reflow/sentence_reflower"❫
⚞⚟

◀public: static▶ Doxygen_Data ☀Get(model::Module const& m, Module_Settings const& options)❰
    
    Doxygen_Data data;
    
    //possibly add a dumb redundant class tag
     if (options.general.comment.doxygen.use_repetitive_class_tag){
             auto class_name = Class_Name_Getter::Get(m,options);
             Doxygen_Data_Shared::Add_If_There_Is_A_Value(data,options.general.comment.doxygen.class_tag,class_name);
     }
     
     Add_Description_Tags(data,m,options);
    
    return data;
❱

◀private: static▶ void ☀Add_Description_Tags(Doxygen_Data & data, model::Module const& m, Module_Settings const& options)❰

    //get module sentences
    auto brief_sentences = Get_Sentences(m.module_brief);
    auto detail_sentences = Get_Sentences(m.module_detail);

    //fix their grammar
    Fix_Grammar(brief_sentences,options.general.comment.grammar);
    Fix_Grammar(detail_sentences,options.general.comment.grammar);
    
    //reflow them
    auto final_brief = Sentence_Reflower::Possibly_Apply_Reflow(brief_sentences,options.general.comment.grammar,options.general.comment.reflow);
    auto final_detail = Sentence_Reflower::Possibly_Apply_Reflow(detail_sentences,options.general.comment.grammar,options.general.comment.reflow);
    
    //add them
    Doxygen_Data_Shared::Add_If_There_Is_A_Value(data,options.general.comment.doxygen.brief_tag,final_brief);
    Doxygen_Data_Shared::Add_If_There_Is_A_Value(data,options.general.comment.doxygen.detail_tag,final_detail);
      
❱

◀private: static▶ void ☀Fix_Grammar(std::vector<std::string> & sentences, Comment_Grammar_Settings const& grammar)❰
        
        for (auto & it: sentences){
            it = Grammar_Adjuster::Get_Adjusted(it,grammar);
        }
❱


◀private: static▶ std::vector<std::string> ☀Get_Sentences(std::vector<model::ModuleBrief> const& x)❰
    
    std::vector<std::string> result;
    for (auto const& a: x){
        for (auto const& b: a.brief_sentence){
            result.emplace_back(b.value);
        }
    }
    
    return result;
❱
◀private: static▶ std::vector<std::string> ☀Get_Sentences(std::vector<model::ModuleDetail> const& x)❰
    
    std::vector<std::string> result;
    for (auto const& a: x){
        for (auto const& b: a.detail_sentence){
            result.emplace_back(b.value);
        }
    }
    
    return result;
❱
