class
❪string❫
❪iostream❫
❪vector❫
⚯
⚞⚟



◀public: static▶ float ☀toRadians(float const& degrees)❰
    return degrees * 3.14159265f / 180;
❱

◀public: static▶ float ☀toDegrees(float const& radians)❰
    return (radians * 180) / 3.14159265f;
❱

◀public: static▶ float ☀clamped_difference(float a, float b, float roof)❰
    auto d = difference(a,b);
    clamp_if_over(d,roof);
    return d;
❱

◀public: static▶ void ☀clamp_if_over(float & val, float const& roof)❰
    if (val > roof){
        val = roof;
    }
❱

◀public: static▶ float ☀difference(float a, float b)❰
    if (a < b){
        return b-a;
    }
    return a-b;
❱

◀public: static▶ int ☀difference(int a, int b)❰
    if (a < b){
        return b-a;
    }
    return a-b;
❱

//value, existing range of value, new range
◀public: static▶ float ☀map_value_across_range(float s, float a1, float a2, float b1, float b2)❰
    
    //in case the mapped value is invalid we clamp it correctly
    if (s < a1){
        s = a1;
    }
    else if (s > a2){
        s = a2;
    }
    
    
    //avoid dividing by zero and getting NaN
    if (a2-a1 == 0){
        return b1;
    }

    return b1 + (s-a1)*(b2-b1)/(a2-a1);
❱

◀public: static▶ bool ☀different(std::vector<float> const& a, std::vector<float> const& b)❰
    if (a.size() != b.size()){
        return true;
    }
    
    for (size_t i = 0; i < a.size(); ++i){
        if (a[i] != b[i]){
            return true;
        }
    }
    
    return false;
❱

◀public: static▶ int ☀highest_common_factor(int a, int b)❰
    while (a != b) { 
        if (a > b)         
            a = a - b;         
        else        
            b = b - a;         
    } 
    return a; 
❱

◀public: static▶ bool ☀is_divisible_by(int num, int by)❰
    return (num % by == 0);
❱

◀public: static▶ int ☀average(std::vector<int> const& vec)❰
    int i = 0;
    for (auto const& it: vec){
        i += it;
    }
    
    return i / vec.size();
❱