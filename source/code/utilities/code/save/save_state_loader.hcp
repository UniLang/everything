class
❪"code/tools/ide/settings/ide_elements"❫
❪"code/utilities/formats/json/converters/json_file_io"❫
⚯
❪"code/tools/ide/global_actions/global_action_decider"❫
❪"code/utilities/program/wrappers/zenity/file_selector/file_selector"❫
❪"code/utilities/formats/json/converters/lib"❫
❪"code/utilities/code/concept_string_tree_parser"❫
❪"code/utilities/formats/json/converters/lib"❫
❪"code/utilities/code/save/save_state"❫
❪"code/utilities/code/save/patch_settings_getter"❫
⚞⚟


◀public: static▶ Ide_Elements ☀Load(std::string const& file_name)❰
    
    //load raw json first so that we understand the version it was saved at
    auto json = Deserialize_Save_File(file_name);
    int version = json["version"];
    
    //provide forward compatibility on the json object by adjusting it to meet the needs of the current version
    //after thuis adjustment it will be safe to deserialize.
    Upgrade_Json_For_Deserialization_Compadibility(json,version);
    
    //Now that the json has been modified, we can deserialize the object
    Save_State x;
    
    try {
        x = json.get<Save_State>();
    }
    catch(std::exception const& e){
        std::cerr << "We couldn't convert the json to the c++ object properly :(" << std::endl;
        std::cerr << "Here is the library exception: " << e.what() << std::endl;
        std::cerr << "What this means is that the upgrade patching mechanism for the saved format did not properly adjust your data for proper deserialization." << std::endl;
        std::cerr << "How to fix it?  The right patch needs added or corrected inside the editor's save state loader." << std::endl;
        //std::cerr << "We will now dump that object:" << std::endl;
        //std::cerr << json.dump(2) << std::endl;
        exit(-1);
    }
    
    //unpack it
    return x.elements;
❱

◀private: static▶ nlohmann::json ☀Deserialize_Save_File(std::string const& file_name)❰
    
    nlohmann::json json;
    try {
        json = Json_File_Io::Read_Compressed_Json_From_File(file_name,Json_Compression_Format::BSON);
    }
    catch(std::exception const& e){
        std::cerr << "We couldn't deserialize the unilang file into generic json :(" << std::endl;
        std::cerr << "This usually means the file is corrupt and not even valid compressed json." << std::endl;
        std::cerr << "Here is the library exception: " << e.what() << std::endl;exit(-1);
        exit(-1);
    }
    return json;
❱

◀private: static▶ void ☀Upgrade_Json_For_Deserialization_Compadibility(nlohmann::json & j, int version)❰

    auto patches = Patch_Settings_Getter::Get();
    
    for (int i = version; i < patches.size(); ++i){
        std::cout << "applying patch " << i << std::endl;
        patches[i](j);
    }

    if (version == patches.size()){
        std::cout << "No patching needed.  You are at the correct version (" << version << "). " << std::endl;
    }
    if (version > patches.size()){
        std::cerr << "You're IDE is too old to open this file.  It claims to be version: " << version << "." << std::endl;
        exit(-1);
    }
❱