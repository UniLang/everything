class
❪string❫
❪iostream❫
❪cmath❫
❪map❫
❪"code/utilities/data_structures/tree/generic/string_tree"❫
❪"code/utilities/code/concept_string_tree_getter"❫
❪"code/utilities/data_structures/graphics/objects/buttoned_faced_tree/positioned_button_face_tree"❫
❪"code/utilities/data_structures/graphics/objects/frame_elements"❫
❪"code/utilities/peripheral/mouse/state/mouse_state"❫
❪"code/utilities/peripheral/pc/pc_input_state"❫
❪"code/tools/ide/settings/ide_settings"❫
❪"code/tools/ide/frame/everything_draw_settings"❫
❪"code/tools/ide/frame/everything_drawer"❫
❪"code/utilities/filesystem/files/temp/incrementing_tmp_images"❫
❪"src/tree.hh"❫
⚯
❪"code/utilities/data_structures/graphics/bitmap/premade/tree_button"❫
❪"code/utilities/fonts/bdf/complete/unilang/unilang_character_maps"❫
❪"code/utilities/data_structures/graphics/objects/buttoned_faced_tree/button_tree_label_drawer"❫
❪"code/utilities/graphics/cairo/render/cairo_render_settings"❫
❪"code/utilities/graphics/cairo/render/frame_renderer"❫
❪"code/utilities/data_structures/graphics/objects/label/style/default_label_styles"❫
❪"code/utilities/personal/hosting/hosting_repo"❫
❪"code/utilities/filesystem/paths/lib"❫
❪"code/utilities/types/tree/converters/tree_full_paths_getter"❫
❪"code/utilities/data_structures/graphics/objects/buttoned_faced_tree/string_tree_to_buttoned_face_tree"❫
❪"code/tools/ide/settings/ide_settings_getter"❫
❪"code/utilities/filesystem/files/temp/temp_dir"❫
⚞⚟

◀public: static▶ void ☀Create()❰

    auto s = Ide_Settings_Getter::Get("");
    
    //what parts of the experience to draw
    //only the ide elements please.
    Everything_Draw_Settings draw_settings;
    draw_settings.draw_background = false;
    draw_settings.draw_mouse = false;
    draw_settings.draw_elements = true;
    
    //how to save image frames to disk
    Incrementing_Tmp_Images output_dir(true);
    
    
    //the simulation of using the unilang ide
    Draw_To_Image(s,draw_settings,output_dir.Next_Image_Name());
    //Press_Button_And_Draw_Image(s,output_dir,draw_settings,226);
    //Press_Button_And_Draw_Image(s,output_dir,draw_settings,40);
    Draw_To_Image(s,draw_settings,output_dir.Next_Image_Name());
    Draw_To_Image(s,draw_settings,output_dir.Next_Image_Name());
    Draw_To_Image(s,draw_settings,output_dir.Next_Image_Name());
    Draw_To_Image(s,draw_settings,output_dir.Next_Image_Name());
    Draw_To_Image(s,draw_settings,output_dir.Next_Image_Name());
    Draw_To_Image(s,draw_settings,output_dir.Next_Image_Name());
    Draw_To_Image(s,draw_settings,output_dir.Next_Image_Name());
    //Press_Button_And_Draw_Image(s,output_dir,draw_settings,226);
    
    
    std::cout << output_dir.Path() << std::endl;
❱

◀private: static▶ void ☀Press_Button_And_Draw_Image(Ide_Settings & s, Incrementing_Tmp_Images & output_dir, Everything_Draw_Settings const& draw_settings, int key)❰

    s.desktop.input.keyboard.key_states[key] = Key_State::PRESSED;
    Draw_To_Image(s,draw_settings,output_dir.Next_Image_Name());
    s.desktop.input.keyboard.key_states[key] = Key_State::NONE;
❱

◀private: static▶ void ☀Draw_To_Image(Ide_Settings & s, Everything_Draw_Settings const& draw_settings, std::string const& file_name)❰

    //draw the elements to an image
    Cairo_Render_Settings settings;
    settings.file_name = file_name;
    
    //calculate and draw
    std::cout << "calculate" << std::endl;
    auto frames = Everything_Drawer::Draw(s,draw_settings,s.desktop.input);
    
    std::cout << "draw" << std::endl;
    Frame_Renderer::Render(frames,settings);
    
❱


    // int navigate_up = 82;
    // int navigate_down = 81;
    // int select_active = 40;

