class
❪string❫
❪iostream❫
❪cmath❫
❪map❫
❪"code/utilities/data_structures/tree/generic/string_tree"❫
❪"code/utilities/code/concept_string_tree_getter"❫
❪"code/utilities/data_structures/graphics/objects/buttoned_faced_tree/positioned_button_face_tree"❫
❪"code/utilities/data_structures/graphics/objects/frame_elements"❫
❪"code/utilities/peripheral/mouse/state/mouse_state"❫
❪"code/utilities/peripheral/pc/pc_input_state"❫
❪"src/tree.hh"❫
❪"code/utilities/data_structures/graph/conceptually_laid_out_graph/conceptually_laid_out_graph"❫
❪"code/utilities/data_structures/graphics/objects/fitted_faced_label_graph/data/fitted_faced_label_graph"❫
❪"code/utilities/data_structures/graphics/objects/fitted_faced_label_graph/data/positioned_fitted_faced_label_graph"❫
⚯
❪"code/utilities/data_structures/graphics/bitmap/premade/tree_button"❫
❪"code/utilities/fonts/bdf/complete/unilang/unilang_character_maps"❫
❪"code/utilities/data_structures/graphics/objects/buttoned_faced_tree/button_tree_label_drawer"❫
❪"code/utilities/graphics/cairo/render/cairo_render_settings"❫
❪"code/utilities/graphics/cairo/render/frame_renderer"❫
❪"code/utilities/data_structures/graphics/objects/label/style/default_label_styles"❫
❪"code/utilities/personal/hosting/hosting_repo"❫
❪"code/utilities/filesystem/paths/lib"❫
❪"code/utilities/types/tree/converters/tree_full_paths_getter"❫
❪"code/utilities/data_structures/graphics/objects/buttoned_faced_tree/string_tree_to_buttoned_face_tree"❫
❪"code/utilities/program/wrappers/convert/image_transparent"❫
❪"code/utilities/types/vectors/observers/lib"❫
❪"code/utilities/data_structures/graphics/objects/buildable_schema_faced_tree/string_tree_to_buildable_schema_faced_tree"❫
❪"code/utilities/data_structures/graphics/objects/buildable_schema_faced_tree/buildable_schema_face_tree_drawer"❫
❪"code/utilities/data_structures/graphics/objects/fitted_faced_label_graph/fitted_faced_label_graph_creator"❫
❪"code/utilities/data_structures/graphics/objects/fitted_faced_label_graph/fitted_faced_label_graph_drawer"❫
❪"code/utilities/data_structures/graphics/objects/faced_label/premade/faced_label_premades"❫
❪"code/utilities/data_structures/graphics/objects/faced_label/faced_label_first_name"❫
⚞⚟


//create a diagram showing the unilang transformation
◀public: static▶ void ☀Create()❰


    //concept
    auto fitted_graph = Create_Conceptually_Fitted_Graph();
    
    //actual graph with concept information
    auto drawable_fitted_graph = Fitted_Faced_Label_Graph_Creator::Create(fitted_graph);
    
    //recolor some nodes
    Change_Color(drawable_fitted_graph,"file.unilang");
    Change_Color(drawable_fitted_graph,"code.json");
    Change_Color(drawable_fitted_graph,"c++ code");
    Change_Color(drawable_fitted_graph,"python code");
    Change_Color(drawable_fitted_graph,"X");
    
    //render object
    Pc_Input_State pc_input;
    auto unilang_font_lookup = Unilang_Character_Maps::Get();
    Position pos;
    auto frame_elements = Fitted_Faced_Label_Graph_Drawer::Full_Draw(unilang_font_lookup,drawable_fitted_graph.state,pos,pc_input);
    
    //make image
    Convert_To_Image(frame_elements);


❱

◀private: static▶ void ☀Change_Color(Fitted_Faced_Label_Graph & drawable_fitted_graph, std::string const& name)❰
    for (auto & it: drawable_fitted_graph.state.nodes){
        if (Faced_Label_First_Name::Get(it) == name){
            it = Faced_Label_Premades::Single_Plain_Light_Purple_Box(name);
        }
    }
❱

◀private: static▶ Conceptually_Laid_Out_Graph ☀Create_Conceptually_Fitted_Graph()❰
    Conceptually_Laid_Out_Graph g;
    Add_Nodes(g);
    Add_Edges(g);
    
    return g;
❱

◀private: static▶ void ☀Add_Nodes(Conceptually_Laid_Out_Graph & g)❰

    Conceptually_Laid_Out_Node node;
    
    node.name = "unilang-editor";
    node.pos.x = 0;
    node.pos.y = 0;
    g.nodes.emplace_back(node);
    
    node.name = "file.unilang";
    node.pos.x = 1;
    node.pos.y = 0;
    g.nodes.emplace_back(node);
    
    node.name = "unilang-to-code";
    node.pos.x = 2;
    node.pos.y = 0;
    g.nodes.emplace_back(node);
    
    node.name = "code.json";
    node.pos.x = 3;
    node.pos.y = 0;
    g.nodes.emplace_back(node);
    
    node.name = "code-to-cpp";
    node.pos.x = 4;
    node.pos.y = 0;
    g.nodes.emplace_back(node);
    
    node.name = "c++ code";
    node.pos.x = 5;
    node.pos.y = 0;
    g.nodes.emplace_back(node);
    
    node.name = "code-to-python";
    node.pos.x = 4;
    node.pos.y = 1;
    g.nodes.emplace_back(node);
    
    node.name = "python code";
    node.pos.x = 5;
    node.pos.y = 1;
    g.nodes.emplace_back(node);
    
    node.name = "code-to-X";
    node.pos.x = 4;
    node.pos.y = 2;
    g.nodes.emplace_back(node);
    
    node.name = "X";
    node.pos.x = 5;
    node.pos.y = 2;
    g.nodes.emplace_back(node);
❱

◀private: static▶ void ☀Add_Edges(Conceptually_Laid_Out_Graph & g)❰

    Conceptually_Laid_Out_Edge edge;
    
    edge.from = "unilang-editor";
    edge.to = "file.unilang";
    g.edges.emplace_back(edge);
    
    edge.from = "file.unilang";
    edge.to = "unilang-editor";
    g.edges.emplace_back(edge);
    
    edge.from = "file.unilang";
    edge.to = "unilang-to-code";
    g.edges.emplace_back(edge);
    
    edge.from = "unilang-to-code";
    edge.to = "code.json";
    g.edges.emplace_back(edge);
    
    edge.from = "code.json";
    edge.to = "code-to-cpp";
    g.edges.emplace_back(edge);
    
    edge.from = "code-to-cpp";
    edge.to = "c++ code";
    g.edges.emplace_back(edge);
    
    edge.from = "code.json";
    edge.to = "code-to-python";
    g.edges.emplace_back(edge);
    
    edge.from = "code-to-python";
    edge.to = "python code";
    g.edges.emplace_back(edge);
    
    edge.from = "code-to-X";
    edge.to = "X";
    g.edges.emplace_back(edge);
❱

◀private: static▶ void ☀Convert_To_Image(Frame_Elements const& elements)❰

    //draw the elements to an image
    Cairo_Render_Settings settings;
    
    auto host_folder = Bazel_Derived_Root_Of_Repo();
    settings.file_name = host_folder + ".readme/unilang_code_pipeline.png";
    Frame_Renderer::Render(elements,settings);
    
    //additional cleanuo
    Image_Transparent::Convert(settings.file_name);
❱