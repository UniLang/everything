class


❪"code/utilities/linguistics/computer/frontends/parts/data_member/data_member_options"❫
⚯
❪"code/utilities/types/converters/lib"❫
❪"code/utilities/types/strings/observers/other/lib"❫
⚞⚟

◀public: static▶ std::vector<Method_Item> ☀Get(std::vector<Data_Member_Item> const& items, Data_Member_Options const& options, Data_Member_Utility_Function_Options const& sub_settings, C_Language_Version const& version)❰
    std::vector<Method_Item> results;
    
    results.push_back(Create_Method(items,options,sub_settings,version));
    
    return results;
❱

◀private: static▶ Method_Item ☀Create_Method(std::vector<Data_Member_Item> const& items,  Data_Member_Options const& options, Data_Member_Utility_Function_Options const& sub_settings, C_Language_Version const& version)❰
    Method_Item m;
    
    m.subgroup.value = L"debug";
    
    //property related
    m.class_access  = sub_settings.printable.access;
    m.storage = Storage_Specifier::NONE;
    
    //doesnt matter
    m.overload_specifiers.is_const = true; // <- this matters
    m.overload_specifiers.value = Value_Overload::NONE;
    
    //documentation related
    //TODO: auto type_name = as_string(item.name.value);
    auto generated_function_name = sub_settings.printable.function_name;
    m.names.function_name.value = as_wstring(generated_function_name);
    //TODO: m.brief_description.value = L"prints " + as_wstring(type_name) + L" to the terminal";
    m.detailed_description.value = L"prints or calls prints on all of the relevant data members";
    
    //arguments
    auto depth_argument = Depth_Argument();
    m.function_arguments.push_back(depth_argument);
    
    //there is no return value
    Add_Body(m,items,options,sub_settings,version);
    
    return m;
❱

◀private: static▶ Function_Argument ☀Depth_Argument()❰
    Function_Argument arg;
    arg.is_mutable = false;
    arg.is_reference = false;
    arg.usage_requirement = Usage_Requirement::NOT_IGNORED;
    arg.type.value = L"i";
    arg.identifier.value = L"depth";
    arg.comment.value = L"the indent level of the print";
    
    return arg;
❱

◀private: static▶ void ☀Add_Body(Method_Item & m, std::vector<Data_Member_Item> const& items,  Data_Member_Options const& options, Data_Member_Utility_Function_Options const& sub_settings, C_Language_Version const& version)❰

    //the body of the function
    std::vector<Body_Token_Value> body;
    Body_Token_Value t;
    
    t.name = Body_Token_Name::COMMENT;
    t.value = as_wstring("create an indent string"); 
    body.push_back(t);
    
    t.name = Body_Token_Name::REGULAR;
    t.value =  L"\nAsciiStringT tIndent = ConstructAsciiString(\"\");\n\n";
    body.push_back(t);
    
    t.name = Body_Token_Name::COMMENT;
    t.value = as_wstring("fill the indent string"); 
    body.push_back(t);

    t.name = Body_Token_Name::REGULAR;
    t.value =  L"\n";
    body.push_back(t);
    
    t.name = Body_Token_Name::REGULAR;
    t.value =  L"AsciiStringAppendCharNTimes(&tIndent,' ',";
    body.push_back(t);

    t.name = Body_Token_Name::BODY_PARAMETER;
    t.value =  L"depth";
    body.push_back(t);

    t.name = Body_Token_Name::REGULAR;
    t.value =  L"*4";
    body.push_back(t);

    t.name = Body_Token_Name::REGULAR;
    t.value =  L");\n\n";
    body.push_back(t);
    
    for (auto it: items){
      body += Decide_If_And_How_To_Print_Data_Member(it,version);
    }
    
    t.name = Body_Token_Name::REGULAR;
    t.value =  L"\n\n";
    body.push_back(t);
    
    t.name = Body_Token_Name::COMMENT;
    t.value = as_wstring("destruct local indent"); 
    body.push_back(t);
    
    t.name = Body_Token_Name::REGULAR;
    t.value =  L"\n";
    body.push_back(t);
    
    t.name = Body_Token_Name::REGULAR;
    t.value =  L"DestructAsciiStringT(&tIndent);\n";
    body.push_back(t);
    
    
    //assign
    m.body = body;
❱

◀private: static▶ std::vector<Body_Token_Value> ☀Decide_If_And_How_To_Print_Data_Member(Data_Member_Item const& item, C_Language_Version const& version)❰
  
  std::vector<Body_Token_Value> body;
  Body_Token_Value t;
  
  if (item.reflection.printable){
    body += Printf_Code_Generator::Create_Printf_Statement(item,version,Printf_Statement_Kind::REGULAR_PRINT);
  }
  
  //add a comment saying that we don't want to print it
  else{
    body += Print_Skip_Message(item);
  }
  
  return body;
❱

◀private: static▶ std::vector<Body_Token_Value> ☀Print_Skip_Message(Data_Member_Item const& item)❰
    
    std::vector<Body_Token_Value> body;
    Body_Token_Value t;
    
    t.name = Body_Token_Name::COMMENT;
    t.value = item.name.value + as_wstring(" is excluded from the debug print"); 
    body.push_back(t);
    
    return body;
❱



//util
◀private: static▶  bool ☀Enum_Data_Member(Data_Member_Item const& item)❰
  //TODO: not good to look for the E at the end because hungarian notation should be an implementation
  //detail and it can change and we should be bale to reference the type from the unilang name
  return Ends_With(as_string(item.type.value),"E");
❱
◀private: static▶  bool ☀Custom_Type_Data_Member(Data_Member_Item const& item)❰
  //TODO: not good to look for the T at the end because hungarian notation should be an implementation
  //detail and it can change and we should be bale to reference the type from the unilang name
  return Ends_With(as_string(item.type.value),"T");
❱
