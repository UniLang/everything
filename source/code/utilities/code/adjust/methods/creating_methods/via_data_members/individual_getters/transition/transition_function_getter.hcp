class


❪"code/utilities/linguistics/computer/frontends/parts/data_member/data_member_options"❫
⚯
❪"code/utilities/types/converters/lib"❫
❪"code/utilities/types/strings/observers/other/lib"❫
❪"code/utilities/types/strings/transformers/removing/lib"❫
❪"code/utilities/types/vectors/operators/lib"❫
⚞⚟

◀public: static▶ std::vector<Method_Item> ☀Get(std::string const& self_type, std::vector<Data_Member_Item> const& items, Data_Member_Options const& options, Data_Member_Utility_Function_Options const& sub_settings, C_Language_Version const& version)❰
    std::vector<Method_Item> results;
    
    results.push_back(Create_Method(self_type, items,options,sub_settings,version));
    
    return results;
❱

◀private: static▶ Method_Item ☀Create_Method(std::string const& self_type, std::vector<Data_Member_Item> const& items,  Data_Member_Options const& options, Data_Member_Utility_Function_Options const& sub_settings, C_Language_Version const& version)❰
    Method_Item m;

    m.subgroup.value = L"debug";
    
    //property related
    m.class_access  = sub_settings.transition.access;
    m.storage = Storage_Specifier::NONE;
    
    //doesnt matter
    m.overload_specifiers.is_const = false;
    m.overload_specifiers.value = Value_Overload::NONE;
    
    //documentation related
    auto generated_function_name = sub_settings.transition.function_name;
    m.names.function_name.value = as_wstring(generated_function_name);
    m.brief_description.value = L"prints differences between a transitioning structure";
    m.detailed_description.value = L"prints what values have changed and how they transitioned";

    //arguments
    auto arg1 = Parent_Argument();
    m.function_arguments.push_back(arg1);
    auto arg2 = Before_Argument(self_type);
    m.function_arguments.push_back(arg2);
    
    //return value
    
    Add_Body(m,items,options,sub_settings,version);
    
    return m;
❱

◀private: static▶ Function_Argument ☀Parent_Argument()❰
    Function_Argument arg;
    arg.is_mutable = false;
    arg.is_reference = false;
    arg.usage_requirement = Usage_Requirement::NOT_IGNORED;
    arg.type.value = as_wstring("char[]");
    arg.identifier.value = L"parent";
    arg.comment.value = L"the name of the parent structure the function is being called from";
    
    return arg;
❱
◀private: static▶ Function_Argument ☀Before_Argument(std::string const& self_type)❰
    Function_Argument arg;
    arg.is_mutable = false;
    arg.is_reference = true;
    arg.usage_requirement = Usage_Requirement::NOT_IGNORED;
    arg.type.value = as_wstring(self_type);
    arg.identifier.value = L"before";
    arg.comment.value = L"the state of the object before the transition period";
    
    return arg;
❱

◀private: static▶ void ☀Add_Body(Method_Item & m, std::vector<Data_Member_Item> const& items,  Data_Member_Options const& options, Data_Member_Utility_Function_Options const& sub_settings, C_Language_Version const& version)❰

    //the body of the function
    std::vector<Body_Token_Value> body;
    Body_Token_Value t;

    t.name = Body_Token_Name::COMMENT;
    t.value = as_wstring("extend parent string"); 
    body.push_back(t);
    
    t.name = Body_Token_Name::REGULAR;
    t.value =  L"\nAsciiStringT tParent = ConstructAsciiString(";
    body.push_back(t);

    t.name = Body_Token_Name::BODY_PARAMETER;
    t.value =  as_wstring("parent");
    body.push_back(t);

    t.name = Body_Token_Name::REGULAR;
    t.value =  L");\n";
    body.push_back(t);

    t.name = Body_Token_Name::REGULAR;
    t.value =  L"AsciiStringT tAdjusted;\n";
    body.push_back(t);

    body += Add_Potential_Self_Naming_Adjustment(items);

    t.name = Body_Token_Name::REGULAR;
    t.value =  L"tAdjusted = CopyConstructAsciiString(&tParent);\n\n";
    body.push_back(t);
    
    t.name = Body_Token_Name::COMMENT;
    t.value = as_wstring("print any changes between the transitioning structure"); 
    body.push_back(t);

    t.name = Body_Token_Name::REGULAR;
    t.value =  as_wstring("\n");
    body.push_back(t);

    for (auto it: items){
      body += Handle_Transition_For_Data_Member(it,version);
    }

    t.name = Body_Token_Name::REGULAR;
    t.value =  L"\n\n";
    body.push_back(t);
    
    t.name = Body_Token_Name::COMMENT;
    t.value = as_wstring("destruct local strings"); 
    body.push_back(t);
    
    t.name = Body_Token_Name::REGULAR;
    t.value =  L"\n";
    body.push_back(t);
    
    t.name = Body_Token_Name::REGULAR;
    t.value =  L"DestructAsciiStringT(&tParent);\n";
    body.push_back(t);
    t.name = Body_Token_Name::REGULAR;
    t.value =  L"DestructAsciiStringT(&tAdjusted);\n";
    body.push_back(t);
    
    //assign
    m.body = body;
❱

◀private: static▶ std::vector<Body_Token_Value> ☀Add_Potential_Self_Naming_Adjustment(std::vector<Data_Member_Item> const& items)❰
	
    //the body of the function
    std::vector<Body_Token_Value> body;
    Body_Token_Value t;

   //look for a self name
   bool has_a_self_name = false;
    Data_Member_Item found;
	for (auto it: items){
		if (it.is_a_name_for_the_enveloping_type){
			has_a_self_name = true;
			found = it;
			break;
		}
	}

	//make self name adjustment if there is a self name
	if (has_a_self_name){

		t.name = Body_Token_Name::COMMENT;
		t.value =  L"data member '" + found.name.value + L"' represents the name of the type.";
		body.push_back(t);

		t.name = Body_Token_Name::REGULAR;
		t.value =  L"\n";
		body.push_back(t);

		t.name = Body_Token_Name::COMMENT;
		t.value =  L"we will use its value instead of the parent name.";
		body.push_back(t);

		t.name = Body_Token_Name::REGULAR;
		t.value =  L"\n";
		body.push_back(t);

		t.name = Body_Token_Name::REGULAR;
		t.value =  L"AsciiStringRightTrimUntilChar(&tParent,'/');\n";
		body.push_back(t);

		t.name = Body_Token_Name::REGULAR;
		t.value =  L"AsciiStringAppend(&tParent,&";
		body.push_back(t);

		t.name = Body_Token_Name::SELF_DATA_MEMBER;
		t.value =  found.name.value;
		body.push_back(t);

		t.name = Body_Token_Name::REGULAR;
		t.value =  L");\n";
        body.push_back(t);

		t.name = Body_Token_Name::REGULAR;
		t.value =  L"AsciiStringAppendChar(&tParent,'/'";
		body.push_back(t);

		t.name = Body_Token_Name::REGULAR;
		t.value =  L");\n\n";
		body.push_back(t);
	}

	return body;
❱

◀private: static▶ std::vector<Body_Token_Value> ☀Handle_Transition_For_Data_Member(Data_Member_Item const& item, C_Language_Version const& version)❰
  
  std::vector<Body_Token_Value> body;
  Body_Token_Value t;
  
  if (item.reflection.log_value_transition){
    body += Show_Transition_Decider(item,version);
  }
  
  //add a comment saying that we don't want to print it
  else{
    body += Print_Skip_Message(item);
  }
  
  return body;
❱

◀private: static▶ std::vector<Body_Token_Value> ☀Show_Transition_Decider(Data_Member_Item const& item, C_Language_Version const& version)❰
    
    std::vector<Body_Token_Value> body;
	if (!Custom_Type_Data_Member(item)){
		body += Show_Transition_Decider_For_Fundamental(item,version);
	}
	else{
		body += Show_Transition_Decider_For_NonFundamental(item,version);
	}
    
    return body;
❱

◀private: static▶ std::vector<Body_Token_Value> ☀Show_Transition_Decider_For_Fundamental(Data_Member_Item const& item, C_Language_Version const& version)❰
    
    std::vector<Body_Token_Value> body;
	bool unused=false;
	auto boolean_expression = Boolean_Expression_Creator::Create(item,"before",Relational_Operator::NOT_EQUAL,unused);
    body += If_Statement_Creator(item,version,boolean_expression);
    
    return body;
❱

◀private: static▶ std::vector<Body_Token_Value> ☀If_Statement_Creator(Data_Member_Item const& item, C_Language_Version const& version, std::vector<Body_Token_Value> const& boolean_expression)❰

    std::vector<Body_Token_Value> body;
    Body_Token_Value t;

    t.name = Body_Token_Name::COMMENT;
    t.value =  as_wstring("compare values and print the transition if they are different");
    body.push_back(t);

    t.name = Body_Token_Name::REGULAR;
    t.value =  as_wstring("\n");
    body.push_back(t);
    
    t.name = Body_Token_Name::REGULAR;
    t.value =  as_wstring("if(");
    body.push_back(t);

    body += boolean_expression;

    t.name = Body_Token_Name::REGULAR;
    t.value =  as_wstring("){\n");
    body.push_back(t);

    body += Get_Parent_Append_Portion(item);
    body += Printf_Code_Generator::Create_Printf_Statement(item,version,Printf_Statement_Kind::REGULAR_TRANSITION);
    body += Get_Parent_ReAssign_Portion(item);
	
    t.name = Body_Token_Name::REGULAR;
    t.value =  as_wstring("}\n\n");
    body.push_back(t);
    
    return body;
❱


◀private: static▶ std::vector<Body_Token_Value> ☀Get_Parent_Append_Portion(Data_Member_Item const& item)❰

    std::vector<Body_Token_Value> body;
    Body_Token_Value t;

    t.name = Body_Token_Name::REGULAR;
    t.value =  as_wstring("AsciiStringAppendCString(&tAdjusted,\"");
    body.push_back(t);

    t.name = Body_Token_Name::REGULAR;
    t.value =  item.name.value;
    body.push_back(t);

    t.name = Body_Token_Name::REGULAR;
    t.value =  as_wstring("\");\n");
    body.push_back(t);

	return body;
❱
◀private: static▶ std::vector<Body_Token_Value> ☀Get_Parent_Append_Forwarding_Portion(Data_Member_Item const& item)❰

    std::vector<Body_Token_Value> body;
    Body_Token_Value t;

    t.name = Body_Token_Name::REGULAR;
    t.value =  as_wstring("AsciiStringAppendCString(&tAdjusted,\"");
    body.push_back(t);

    t.name = Body_Token_Name::REGULAR;
    t.value =  item.name.value + as_wstring("/");
    body.push_back(t);

    t.name = Body_Token_Name::REGULAR;
    t.value =  as_wstring("\");\n");
    body.push_back(t);

	return body;
❱
◀private: static▶ std::vector<Body_Token_Value> ☀Get_Parent_ReAssign_Portion(Data_Member_Item const& item)❰
    
	std::vector<Body_Token_Value> body;
    Body_Token_Value t;

    t.name = Body_Token_Name::REGULAR;
    t.value =  as_wstring("AsciiStringAssign(&tAdjusted,&tParent);\n");
    body.push_back(t);

	return body;
❱

◀private: static▶ std::vector<Body_Token_Value> ☀Show_Transition_Decider_For_NonFundamental(Data_Member_Item const& item, C_Language_Version const& version)❰
    
    std::vector<Body_Token_Value> body;
    Body_Token_Value t;
  
  bool found=false;
  auto boolean_expression = Boolean_Expression_Creator::Create(item,"before",Relational_Operator::NOT_EQUAL,found);

	//special / non-fundamental
	if (found){
		body += If_Statement_Creator(item,version,boolean_expression);
	}

    //non-special / non-fundamental
	else{

		t.name = Body_Token_Name::COMMENT;
		t.value = as_wstring("forward parent name to sub structure's transition call"); 
		body.push_back(t);

		t.name = Body_Token_Name::REGULAR;
		t.value =  as_wstring("\n");
		body.push_back(t);

		body += Get_Parent_Append_Forwarding_Portion(item);

		t.name = Body_Token_Name::FOREIGN_FUNCTION_CALL;
auto temp = item.type.value;
auto temp_str = as_string(temp);
		t.value =  as_wstring(Remove_Last_Char(temp_str)) + L" print transition changes";
		body.push_back(t);

		t.name = Body_Token_Name::REGULAR;
		t.value =  as_wstring("&");
		body.push_back(t);

	    t.name = Body_Token_Name::SELF_DATA_MEMBER;
		t.value =  item.name.value;
		body.push_back(t);

		t.name = Body_Token_Name::REGULAR;
		t.value =  L",AsciiStringCStr(&tAdjusted),";
		body.push_back(t);

		t.name = Body_Token_Name::REGULAR;
		t.value =  as_wstring("&");
		body.push_back(t);

		t.name = Body_Token_Name::BODY_PARAMETER;
		t.value =  as_wstring("before");
		body.push_back(t);

		t.name = Body_Token_Name::REGULAR;
		t.value =  as_wstring("->");
		body.push_back(t);

		t.name = Body_Token_Name::SELF_DATA_MEMBER_WITHOUT_OBJ;
		t.value =  item.name.value;
		body.push_back(t);

		t.name = Body_Token_Name::REGULAR;
		t.value =  as_wstring(");");
		body.push_back(t);

		body += Get_Parent_ReAssign_Portion(item);

		t.name = Body_Token_Name::REGULAR;
		t.value =  as_wstring("\n\n");
		body.push_back(t);

	}
    
    return body;
❱

◀private: static▶ std::vector<Body_Token_Value> ☀Print_Skip_Message(Data_Member_Item const& item)❰
    
    std::vector<Body_Token_Value> body;
    Body_Token_Value t;
    
    t.name = Body_Token_Name::COMMENT;
    t.value = item.name.value + as_wstring(" is excluded from transition detection\n"); 
    body.push_back(t);
    
    return body;
❱


◀private: static▶  bool ☀Custom_Type_Data_Member(Data_Member_Item const& item)❰
  //TODO: not good to look for the T at the end because hungarian notation should be an implementation
  //detail and it can change and we should be bale to reference the type from the unilang name
  return Ends_With(as_string(item.type.value),"T");
❱

