class


❪"code/utilities/linguistics/computer/frontends/parts/data_member/data_member_options"❫
⚯
❪"code/utilities/types/converters/lib"❫
❪"code/utilities/types/strings/observers/other/lib"❫
❪"code/utilities/types/strings/transformers/removing/lib"❫
❪"code/utilities/types/vectors/operators/lib"❫
⚞⚟

◀public: static▶ Method_Item ☀Get(std::string const& self_type, std::vector<Data_Member_Item> const& items,  Data_Member_Options const& options, Data_Member_Utility_Function_Options const& sub_settings, C_Language_Version const& version)❰
    Method_Item m;

    m.subgroup.value = L"serialize";
    
    //property related
    m.class_access  = sub_settings.to_json.access;
    m.storage = Storage_Specifier::NONE;
    
    //doesnt matter
    m.overload_specifiers.is_const = false;
    m.overload_specifiers.value = Value_Overload::NONE;
    
    //documentation related
    auto generated_function_name = sub_settings.to_json.function_name;
    m.names.function_name.value = as_wstring(generated_function_name);
	m.names.original_function_name.value = as_wstring(generated_function_name);
    m.brief_description.value = L"get the type as a json string";
    m.detailed_description.value = L"called recursively on nested objects to create the type as a json string";
    
    //return value
	m.return_results.push_back(Add_Return());
    
    Add_Body(m,items,options,sub_settings,version);
    
    return m;
❱

◀private: static▶ Function_Result ☀Add_Return()❰
	Function_Result result;
	result.type.value = L"AsciiStringT";
	result.identifier.value = L"json string";
	result.is_mutable = true;
	result.is_reference = false;
	result.infinitely_more = false;
	result.comment.value = L"a JSON string representation of the object";

	return result;
❱

◀private: static▶ void ☀Add_Body(Method_Item & m, std::vector<Data_Member_Item> const& items,  Data_Member_Options const& options, Data_Member_Utility_Function_Options const& sub_settings, C_Language_Version const& version)❰

    //the body of the function
    std::vector<Body_Token_Value> body;
    Body_Token_Value t;

    t.name = Body_Token_Name::COMMENT;
    t.value = as_wstring("create root value"); 
    body.push_back(t);
    
    t.name = Body_Token_Name::REGULAR;
    t.value =  L"\nJSON_Value *ptRootValue = json_value_init_object();\n\n";
    body.push_back(t);

    t.name = Body_Token_Name::COMMENT;
    t.value = as_wstring("use root value to create root json object"); 
    body.push_back(t);
    
    t.name = Body_Token_Name::REGULAR;
    t.value =  L"\nJSON_Object *ptRootObject = json_value_get_object(ptRootValue);\n\n";
    body.push_back(t);

    t.name = Body_Token_Name::COMMENT;
    t.value = as_wstring("declare string literal for storing json representation"); 
    body.push_back(t);
    
    t.name = Body_Token_Name::REGULAR;
    t.value =  L"\nchar *szSerializedString = NULL;\n\n";
    body.push_back(t);

    t.name = Body_Token_Name::COMMENT;
    t.value = as_wstring("the string type to return to the user"); 
    body.push_back(t);
    
    t.name = Body_Token_Name::REGULAR;
    t.value =  L"\nAsciiStringT tResult = ConstructAsciiString(\"\");\n\n";
    body.push_back(t);

    t.name = Body_Token_Name::COMMENT;
    t.value = as_wstring("call local function to serialize into the json object"); 
    body.push_back(t);

    t.name = Body_Token_Name::REGULAR;
    t.value =  L"\n";
    body.push_back(t);
    
    t.name = Body_Token_Name::SELF_FUNCTION_CALL;
    t.value =  L"serialize json";
    body.push_back(t);

    t.name = Body_Token_Name::REGULAR;
    t.value =  L"\"\"";
    body.push_back(t);

    t.name = Body_Token_Name::REGULAR;
    t.value =  L",";
    body.push_back(t);

    t.name = Body_Token_Name::REGULAR;
    t.value =  L"ptRootObject";
    body.push_back(t);

    t.name = Body_Token_Name::REGULAR;
    t.value =  L");\n\n";
    body.push_back(t);

    t.name = Body_Token_Name::COMMENT;
    t.value = as_wstring("get the string representation in a pretty format"); 
    body.push_back(t);
    
    t.name = Body_Token_Name::REGULAR;
    t.value =  L"\nszSerializedString = json_serialize_to_string_pretty(ptRootValue);\n\n";
    body.push_back(t);

    t.name = Body_Token_Name::COMMENT;
    t.value = as_wstring("store serialized string in standard string"); 
    body.push_back(t);
    
    t.name = Body_Token_Name::REGULAR;
    t.value =  L"\nAsciiStringAppendCString(&tResult,szSerializedString);\n\n";
    body.push_back(t);

    t.name = Body_Token_Name::COMMENT;
    t.value = as_wstring("free locally allocated data"); 
    body.push_back(t);

    t.name = Body_Token_Name::REGULAR;
    t.value =  L"\njson_free_serialized_string(szSerializedString);\n";
    body.push_back(t);

    t.name = Body_Token_Name::REGULAR;
    t.value =  L"json_value_free(ptRootValue);\n\n";
    body.push_back(t);

    t.name = Body_Token_Name::COMMENT;
    t.value = as_wstring("return string back to user"); 
    body.push_back(t);

    t.name = Body_Token_Name::REGULAR;
    t.value =  L"\nreturn tResult;\n";
    body.push_back(t);
    
    //assign
    m.body = body;
❱