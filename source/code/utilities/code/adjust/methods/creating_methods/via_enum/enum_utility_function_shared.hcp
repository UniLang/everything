class


❪"code/utilities/linguistics/computer/frontends/parts/enum/enum_options"❫
⚯
❪"code/utilities/types/strings/transformers/casing/lib"❫
❪"code/utilities/types/converters/lib"❫
⚞⚟


◀public: static▶ std::string ☀Decide_Function_Name_Based_On_Visibility(Enum_Item const& item, Class_Access const& access, std::string const& function_name, int amount)❰
    
    auto type_name = as_string(item.name.value);
    
    if (access == Class_Access::PUBLIC){
        return Derive_Name_For_Public_Function(type_name,function_name,amount);
    }
    return Derive_Name_For_Private_Function(type_name,function_name,amount);
❱

◀private: static▶ std::string ☀Derive_Name_For_Public_Function(std::string const& type_name,std::string const& function_name, int amount)❰
    return Type_Prefixed_Name(type_name,function_name);
❱

◀private: static▶ std::string ☀Derive_Name_For_Private_Function(std::string const& type_name,std::string const& function_name, int amount)❰
    
    if (amount > 1){
        return Type_Prefixed_Name(type_name,function_name);
    }
    
    return Non_Type_Prefixed_Name(function_name);
❱

◀private: static▶ std::string ☀Type_Prefixed_Name(std::string const& type_name, std::string const& function_name)❰
    return As_All_Lowercase_Letters_With_Underscores_As_Spaces(type_name) + " " + function_name;
❱

◀private: static▶ std::string ☀Non_Type_Prefixed_Name(std::string const& function_name)❰
    return function_name;
❱
