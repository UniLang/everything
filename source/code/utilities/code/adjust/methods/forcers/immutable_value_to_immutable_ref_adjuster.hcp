class


❪"code/utilities/linguistics/computer/types/generic/unilang_type_to_language_type_converter"❫
⚯
❪"code/utilities/types/converters/lib"❫
⚞⚟

◀public: static▶ void ☀Adjust(std::vector<Method_Item> & methods, Struct_Manipulation_Settings const& settings)❰
    //we only want to enforce return statements
    //on any function that:
    //is void and currently doesn't have a return statement

    for (auto & method: methods){
        for (auto & arg: method.function_arguments){
            if (!arg.is_mutable){
                if (!arg.is_reference){
                    Maybe_Pass_Ref_Based_On_Type(arg);
                }
            }
        }
    }
❱

◀private: static▶ void ☀Maybe_Pass_Ref_Based_On_Type(Function_Argument & arg)❰

    
    auto uni_type = as_string(arg.type.value);
    auto category = Deduce_Type_Category(uni_type);
    if (category == Language_Type_Category::ABSTRACT){
        arg.is_reference = true;
    }
❱

◀private: static▶ Language_Type_Category ☀Deduce_Type_Category(std::string const& uni_type)❰

    //I don't have enough context about the type to know whether its
    //fundamental or abstract.  Assume its abstract
    if (!Unilang_Type_To_Language_Type_Converter::Is_A_Unilang_Type(uni_type)){
        return Language_Type_Category::ABSTRACT;
    }
    
    auto lang_type = Unilang_Type_To_Language_Type_Converter::Convert_To_Language_Type(uni_type,Source_Language::CPP);
    return lang_type.category;
❱