class


⚯
❪"code/utilities/types/converters/lib"❫
⚞⚟

◀public: static▶ void ☀Force_Return_On_Void_Functions(std::vector<Method_Item> & methods, Struct_Manipulation_Settings const& settings)❰
	//we only want to enforce return statements
    //on any function that:
	//is void and currently doesn't have a return statement

	for (auto & method: methods){
		if (method.return_results.empty()){
		    Add_Return_Statement_If_One_Does_Not_Already_Exist(method,settings);
		}
	}
❱

◀private: static▶ void ☀Add_Return_Statement_If_One_Does_Not_Already_Exist(Method_Item & method, Struct_Manipulation_Settings const& settings)❰

	if(!Return_Statement_Currently_Exists(method,settings)){
		Add_Frivolous_Return_Statement(method,settings);
	}
❱

◀private: static▶ bool ☀Return_Statement_Currently_Exists(Method_Item const& method, Struct_Manipulation_Settings const& settings)❰
	//for now, I'm just going to assume that I don't do this in UniLang	
	return false;
❱
◀private: static▶ void ☀Add_Frivolous_Return_Statement(Method_Item & method, Struct_Manipulation_Settings const& settings)❰
    method.entire_body.elements.emplace_back(Create_Body_Token(Body_Token_Name::UNCAUGHT_STATEMENT,"\nreturn;\n"));
❱


◀private: static▶ Root_Body_Element ☀Create_Body_Token(Body_Token_Name const& name, std::string const& value)❰
    
    Uncaught_Statement statement;
    statement.value.name = name;
    statement.value.value = as_wstring(value);
    
    Root_Body_Element t;
    t.types = statement;
    return t;
❱