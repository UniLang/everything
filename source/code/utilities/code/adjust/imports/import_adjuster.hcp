class

❪iostream❫
❪"code/utilities/linguistics/computer/types/generic/unilang_type_to_language_type_converter"❫
⚯
❪"code/utilities/types/sets/lib"❫
❪"code/utilities/types/converters/lib"❫
⚞⚟

◀public: static▶ void ☀Adjust(Structure & structure,Import_Manipulation_Settings const& settings, Source_Language const& language)❰

    //leave out an import?  No problem.  The compiler will look at the type and find the appropriate import for you.
    //in fact, it is sometimes required to leave out an import if its a non unilang file that needs included.
    //say you are using a string datatype but leave out the import.  The compiler will know to give you say: <string> for C++
    //MyString.h for C, etc etc for other languages
    //THIS SORT OF DOES WHAT MODULE_DEPENDENCY_RESOLVER IS DOING
    Include_Imports_Based_On_Types(structure,settings,language);

	//make other adjustments to the imports assuming all of them are now there
    Existing_Import_Adjuster::Adjust(structure,settings);
❱

◀private: static▶ void ☀Include_Imports_Based_On_Types(Structure & structure,Import_Manipulation_Settings const& settings, Source_Language const& language)❰
    //should get:
	//-function arguments
    //-function returns
    //-method body instantiations
    //-foreign function calls
    //-template stuff

	//at least the C style way
	//because private methods would actually still be in the interface for c++...
	auto interface_types = Find_All_Interface_Types(structure);
	auto implementation_types = Find_All_Implementation_Types(structure);
    
    for (auto it: interface_types){
        Add_Imports_For_Known_Type(structure.imports.interface_dependencies,it,language);
    }
    for (auto it: implementation_types){
        Add_Imports_For_Known_Type(structure.imports.implementation_dependencies,it,language);
    }
❱

◀private: static▶ void ☀Add_Imports_For_Known_Type(std::vector<Import_Item> & imports, std::string const& type, Source_Language const& language)❰

    auto resolved_type = Unilang_Type_To_Language_Type_Converter::Convert_To_Language_Type(type,language);
    for (auto it: resolved_type.needed_imports){
        Import_Item item;
        item.name.value = as_wstring(it.name);
        item.type = it.type;
        imports.emplace_back(item);
    }
❱

◀private: static▶ std::set<std::string> ☀Find_All_Interface_Types(Structure const& structure)❰
	std::set<std::string> found_types;
	
	//gather all the argument types of public methods
	for (auto method: structure.methods.methods){
		if (method.class_access == Class_Access::PUBLIC){
			for (auto it: method.return_results){Add_To_Set(found_types,as_string(it.type.value));}
			for (auto it: method.function_arguments){Add_To_Set(found_types,as_string(it.type.value));}
		}
	}

	//gather all the data member types
	for (auto it: structure.data_members.data_members){
		Add_To_Set(found_types,as_string(it.type.value));
	}

	return found_types;
❱

◀private: static▶ std::set<std::string> ☀Find_All_Implementation_Types(Structure const& structure)❰
	std::set<std::string> found_types;

	//gather all the argument types of public methods
	for (auto method: structure.methods.methods){
		if (method.class_access == Class_Access::PRIVATE){
			for (auto it: method.return_results){Add_To_Set(found_types,as_string(it.type.value));}
			for (auto it: method.function_arguments){Add_To_Set(found_types,as_string(it.type.value));}
		}
	}

	return found_types;
❱