class
❪"code/utilities/code/concept_static_tree_structs"❫
⚯
❪"code/utilities/types/vectors/observers/lib"❫
❪"code/utilities/types/strings/observers/other/lib"❫
⚞⚟

◀public: static▶ bool ☀Check(model::Function const& method, std::vector<model::Function> const& methods)❰

  int times_found = 0;
  for (auto const& it: methods){
    
    auto name1 = First_Element_Or_Default(method.name).value;
    auto name2 = First_Element_Or_Default(it.name).value;
    
    //update count on methods found with the same name
    if (name1 == name2){
      ++times_found;
    }
    
    //if we found more than 1 it must be an overload
    if (times_found > 1){
      return true;
    }
  }
  
  //didn't exist early so not an overload
  return false;
  
❱