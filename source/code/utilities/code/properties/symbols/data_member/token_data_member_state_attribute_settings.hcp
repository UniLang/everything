class
⚯

⚞⚟


◀
public:

    //this is more like how a user can access the internal state (i.e. a data member)
    //think of them as like automatic getters and setters (similar to C#)
    //In C, they might do things like put the data member a level deeper in a nested struct, etc.
    //Other times, these access describers will generate the releavant functions
    //these do not replace the access specifiers, although they are certainly relatable.  
    //for example, if you tagged the data member as "observable" AND "injectable", why would you want it public?
    //You have a way to get and set the data member. So we may want to have confirgurations that warn about this if desired.  
    //Also, we have to think a little bit more about C#'s approach.  You can have a getter and setter do extra work that the user doesn't see
    //because they still just use the dot operator, and from their perspective it looks like direct access.  
    //I think that's dangerous, but maybe convenient... definitely consistent.  I'll to think about this.  
    //If we do follow C#'s approach we will need to add tokens in Unilang to account for the "extra" work being done when getting/setting.
    char obserable='g';  //X Get_X();
    char injectable='j'; //Set_X(X const& x);
    char obtainable='x'; //X& Obtain_X();
▶
