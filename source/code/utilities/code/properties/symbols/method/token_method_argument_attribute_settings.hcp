class
⚯

⚞⚟


◀
public:

    char reference='r';
    char _mutable='m';
    char infinitely_more='>';

    //ownership? sharing? borrowing? we'll develop that out of rust...
    //I'm thinking an enum.
    //from method perspective: OWNING/BORROWING.
    //from the caller's perspective: GIVING/LENDING
    //is the third property.. sharing.. hmmm.
    //maybe SHARED_OWNER.. like delete this if you are the last one? nah, that's dumb.
    //that would just be its own type (a shared pointer that ref counts)
    //look at c++ core guidelines, and lifetimes in rust.
    
    //argument
    char uses_all_data_members = 'x';
    //use all data methods? (and then functions can have an attribute that says: use all self methods).. hmm a lot of customization branches there... keep thinking about
    
    //for template arguments, regular arguments, and return arguments
    char allowed_to_discard = 'u';  //maybe
    char required_to_discard = 'U'; //definitely
    
    
    //vocabulary types
    char optional = '?';
▶
