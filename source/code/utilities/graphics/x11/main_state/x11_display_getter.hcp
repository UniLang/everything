class
❪string❫
❪cstdlib❫
❪iostream❫
❪X11/extensions/shape.h❫
❪"code/utilities/graphics/x11/main_state/setup_display_settings"❫
❪"code/utilities/graphics/x11/data/main_x11_state"❫
❪"code/utilities/graphics/x11/data/x11_window_geometry"❫
❪"code/utilities/graphics/x11/data/x11_bg_fg_colors"❫
⚯
⚞⚟

◀public: static▶ Display * ☀Get(Setup_Display_Settings const& settings)❰
  
    if (settings.set_error_handler){
        set_typical_x11_error_handler();
    }

    //create the main display
    auto d = open_display();

    //turn on debug sync mode
    if (settings.syncronize_debug_mode) {
        XSynchronize(d,true);
    }
    
    //feature check
    if (settings.check_for_shape_extension){
        check_shape_extension(d);
    }
    
    return d;
❱

◀private: static▶ void ☀set_typical_x11_error_handler()❰
    
    //error handler
    XSetErrorHandler([](Display *dpy, XErrorEvent *err){
            char msg[80];
            XGetErrorText(dpy, err->error_code, msg, 80);
            std::cout << "X Error: " << msg  << std::endl;
            exit(1);
            return 0;
    });
❱

◀private: static▶ Display * ☀open_display()❰
    
    //create the main display
    //This opens up a connection to the X server.
    Display *theDisplay = nullptr;
    if ((theDisplay = XOpenDisplay(nullptr)) == nullptr) {
        std::cerr << "can't create X11 display.  This basically means we weren't able to establish a connection with the XServer" << std::endl;
        exit(1);
    }
    return theDisplay;
❱

◀private: static▶ void ☀check_shape_extension(Display * theDisplay)❰

    //check that we can do shape stuff
    int event_base = 0;
    int error_base = 0;
    auto supported = XShapeQueryExtension(theDisplay,&event_base, &error_base);
    if (!supported){
        std::cout << "doesn't support shapes" << std::endl;
    }
❱