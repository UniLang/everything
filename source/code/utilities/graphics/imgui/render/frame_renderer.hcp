class
❪"code/programs/ide/settings/data/ide_settings"❫
❪"code/utilities/graphics/imgui/loop/mechanics"❫
❪"code/utilities/data_structures/graphics/objects/frame_elements"❫
❪"SDL.h"❫
⚯
❪"code/utilities/graphics/imgui/ui_renders"❫
❪"code/utilities/graphics/imgui/window/window_renderer"❫
❪"code/utilities/graphics/imgui/window/window_position_finder"❫
❪"code/utilities/data_structures/graphics/objects/label/label_drawer"❫
❪"code/utilities/graphics/imgui/render/elements/rectangle_drawer"❫
❪"code/utilities/graphics/imgui/imgui_type_utility"❫
❪"code/utilities/peripheral/keyboard/key_detector"❫
❪"code/utilities/data_structures/graphics/objects/mouse/draw/mouse_selection_drawer"❫
❪"code/utilities/data_structures/graphics/objects/cursor/label_cursor_action_doer"❫
❪"code/utilities/graphics/imgui/render/elements/line_drawer"❫
❪"code/utilities/peripheral/mouse/state/mouse_position_getter"❫
❪"code/utilities/graphics/imgui/render/elements/multi_color_bitmap_drawer"❫
❪"code/utilities/data_structures/graphics/bitmap/multi_color_bitmap/positioned_multi_color_bitmap"❫
❪"code/utilities/data_structures/graphics/bitmap/full_color_bitmap/positioned_full_color_bitmap"❫
❪"code/utilities/types/variant/lib"❫
❪"code/utilities/peripheral/pc/pc_input_state_getter"❫
❪"code/utilities/image/stb_image_setter"❫
❪"code/utilities/data_structures/graphics/image/positioned_texture"❫
⚞⚟

◀public: static▶ void ☀Render(Background_Settings & settings, Frame_Elements const& elements)❰

    ImGui_Property_Per_Frame();
    
    //Draw the main window and render everything inside of it
    Prepare_Window_Drawing_Surface(settings);
    Window_Renderer::render(settings.main_window,[&](){
        Render_Frame_Elements(elements);
    });
    
    //test some other imgui stuff
    //bool flag = true;
    //ImGui::ShowDemoWindow(&flag);
❱

◀private: static▶ void ☀Render_Frame_Elements(Frame_Elements const& elements)❰
    ImDrawList *draw_list = ImGui::GetWindowDrawList();
    for (auto const& it: elements.types){
        std::visit(overloaded {
            [&](Positioned_Rectangle_Settings const& x) {
                Rectangle_Drawer::draw_rectangle(draw_list,x);
            },
            [&](Positioned_Multi_Color_Bitmap const& x) {
                Multi_Color_Bitmap_Drawer::Draw(draw_list,x);
            },
            [&](Positioned_Full_Color_Bitmap const& x) {
                Full_Color_Bitmap_Drawer::Draw(draw_list,x);
            },
            [&](Positioned_Image_Data const& x) {
                //std::cout << "drawing" << std::endl;
                
                //Positioned_Image_Data x;
                //Stb_Image_Setter::Set(x,"/home/luxe/Desktop/MyImage01.jpg");
                
                //better data structure

                  // std::string input(testdata);
                  // std::vector<unsigned char> output(input.length());
                  // std::transform(input.begin(), input.end(), output.begin(),
                  //   [](char c)
                  //   {
                  //     return static_cast<unsigned char>(c);
                  //   });
                
                //std::cout << x.texture << std::endl;
                //exit(0);
                
                
                draw_list->AddImage((void *) (intptr_t) x.texture, ImVec2(x.pos.x, x.pos.y), ImVec2(x.pos.x + x.width, x.pos.y + x.height));
            },
            [&](Positioned_Animated_Image_Data const& x) {
                draw_list->AddImage((void *) (intptr_t) x.texture[x.frame], ImVec2(x.pos.x, x.pos.y), ImVec2(x.pos.x + x.width, x.pos.y + x.height));
            },
            [&](Positioned_Texture const& x) {
                draw_list->AddImage((void *) (intptr_t) x.id, ImVec2(x.pos.x, x.pos.y), ImVec2(x.pos.x + x.width, x.pos.y + x.height));
            }
            
        }, it);
    }
❱

◀private: static▶ void ☀ImGui_Property_Per_Frame()❰
    
    ImGuiIO& io = ImGui::GetIO();
    io.ConfigFlags |= ImGuiConfigFlags_NavEnableKeyboard;
    io.WantCaptureKeyboard = true;
    io.WantTextInput = true;
    io.KeyRepeatDelay = 0.250f;
    //io.KeyRepeatDelay = 1.0f;
    io.KeyRepeatRate = 0.050f;
    //io.KeyRepeatRate = 1.0f;
    ImGui::SetMouseCursor(ImGuiMouseCursor_None);
❱

◀private: static▶ void ☀Prepare_Window_Drawing_Surface(Background_Settings & settings)❰

    //create a giant window that spans the entire application
    //since we are using imgui, we have found it better to draw bitmaps on what imgui considers a window.  
    //it does not seem possible to draw directly on the background.  Additionally, an imgui window has some extra frills
    //that also prevent it from being colored everywhere.  We grow the window larger than the application window,
    //so that we have an entire drawable surface. You might be asking, "why even use imgui, if you are just going to be drawing pixels on a blank surface?"
    //that's a good question, imgui may not be strictly necessary.  For the time being, I like the "immediate-modeness" of it,
    //and seems to have a nice drawing abstraction over direct libraries like sdl and opengl, etc.
    Position window_end_position = Imgui_Type_Utility::Display_Size_Position();
    window_end_position.x += 8;
    Update_Background_For_Window_Size(settings,window_end_position);
    ImGui::SetNextWindowPos(Imgui_Type_Utility::To_ImVec2(settings.main_window_backdrop.pos));
    ImGui::SetNextWindowSize(Imgui_Type_Utility::To_ImVec2(window_end_position));
❱

◀private: static▶ void ☀Update_Background_For_Window_Size(Background_Settings & settings, Position const& window_end_position)❰
    settings.main_window_backdrop.shape.dimensions.width = window_end_position.x;
    settings.main_window_backdrop.shape.dimensions.height = window_end_position.y;
❱
