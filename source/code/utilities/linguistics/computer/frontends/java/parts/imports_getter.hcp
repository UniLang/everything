class

❪fstream❫
❪iostream❫
❪"code/utilities/contributor/contributor"❫
❪"code/utilities/code/concept_static_tree_structs"❫
⚯
❪"code/utilities/types/strings/transformers/appending/lib"❫
❪"code/utilities/types/converters/lib"❫
❪"code/utilities/types/strings/transformers/casing/case_modifier"❫
❪"code/utilities/program/call/lib"❫
❪"code/utilities/filesystem/paths/lib"❫
❪"code/utilities/types/vectors/observers/lib"❫
❪"code/utilities/types/vectors/operators/lib"❫
❪"code/utilities/types/vectors/converters/lib"❫
❪"code/utilities/types/strings/observers/converting/lib"❫
❪"code/utilities/types/strings/observers/other/lib"❫
⚞⚟


◀public: static▶ std::string ☀Get(model::Module const& structure, std::vector<Contributor> const& contributors)❰
    
    std::string imports;
    for (auto const& it: structure.import_interface){
        imports += Get_Import_Line(it);
    }
    for (auto const& it: structure.import_implementation){
        imports += Get_Import_Line(it);
    }
    return imports;
❱

◀private: static▶ std::string ☀Get_Imports_For_Tests(model::Module const& structure, std::vector<Contributor> const& contributors)❰
    
    std::string imports;
    for (auto const& it: structure.import_test){
        imports += Get_Import_Line(it);
    }
    return imports;
❱

◀private: static▶ std::string ☀Get_Import_Line(model::ImportInterface const& it)❰

    auto specifiers = First_Element_Or_Default(it.specifiers).value;
    auto name = First_Element_Or_Default(it.name).value;
    return Get_Import_Line(name,Contains_Substring(specifiers,"i"));
❱

◀private: static▶ std::string ☀Get_Import_Line(model::ImportImplementation const& it)❰

    auto specifiers = First_Element_Or_Default(it.specifiers).value;
    auto name = First_Element_Or_Default(it.name).value;
    return Get_Import_Line(name,Contains_Substring(specifiers,"i"));
❱

◀private: static▶ std::string ☀Get_Import_Line(model::ImportTest const& it)❰

    auto specifiers = First_Element_Or_Default(it.specifiers).value;
    auto name = First_Element_Or_Default(it.name).value;
    return Get_Import_Line(name,Contains_Substring(specifiers,"i"));
❱

◀private: static▶ std::string ☀Get_Import_Line(std::string const& name, bool const& is_static)❰

    std::string x;
    x += "import ";
    
    //we'll abuse "inline" to mean static here in java
    if (is_static){
        x += "static ";
    }
    x += name;
    x += ";\n";
    return x;
❱

