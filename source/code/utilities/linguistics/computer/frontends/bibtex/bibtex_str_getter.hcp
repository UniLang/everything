class

❪fstream❫
❪iostream❫
❪"code/utilities/contributor/contributor"❫
❪"code/utilities/linguistics/computer/frontends/markdown/settings/markdown_settings"❫
❪"code/utilities/linguistics/computer/frontends/bibtex/settings/bibtex_settings"❫
❪"code/utilities/code/concept_static_tree_structs"❫
⚯
❪"code/utilities/types/strings/transformers/appending/lib"❫
❪"code/utilities/types/converters/lib"❫
❪"code/utilities/types/strings/observers/other/lib"❫
❪"code/utilities/types/strings/transformers/casing/case_modifier"❫
❪"code/utilities/program/call/lib"❫
❪"code/utilities/filesystem/paths/lib"❫
❪"code/utilities/types/vectors/observers/lib"❫
❪"code/utilities/types/vectors/operators/lib"❫
❪"code/utilities/types/char/lib"❫
❪"code/utilities/linguistics/grammar/grammar_adjuster"❫
❪"code/utilities/time/date/lib"❫
❪"code/utilities/types/strings/observers/converting/lib"❫
⚞⚟

◀public: static▶ std::string ☀Get(model::Module const& structure, std::vector<Contributor> const& contributors, Bibtex_Settings const& settings)❰
    std::string text;
    
    for (auto const& citation: structure.citation){
        Append_With_Newline(text,Make_BibTex_Citation_Entry(citation));
    }
    
    return text;
❱

◀private: static▶ std::string ☀Make_BibTex_Citation_Entry(model::Citation const& citation)❰
    std::string str;
    
    Append(str,"@");
    
    for (auto const& it: citation.type){Append(str,it.value);}
    Append(str,"{");
    for (auto const& it: citation.id){Append(str,it.value);}
    
    for (auto const& kv: citation.citation_attribute){
        Append_With_Newline(str,",");
        Append(str,"\t");
        Append(str,Get_Key(kv));
        Append(str," = ");
        Append_In_DQuotes(str,Get_Value(kv));
    }
    
    Append_With_Newline(str,"}");
    
    return str;
❱

◀private: static▶ std::string ☀Get_Key(model::CitationAttribute attribute)❰
    std::string x;
    for (auto const& it: attribute.key){Append(x,it.value);}
    return x;
❱
◀private: static▶ std::string ☀Get_Value(model::CitationAttribute attribute)❰
    std::string x;
    for (auto const& it: attribute.value){Append(x,it.value);}
    return x;
❱