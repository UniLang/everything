class

❪fstream❫
❪iostream❫
❪"code/utilities/contributor/contributor"❫
❪"code/utilities/linguistics/computer/frontends/markdown/settings/markdown_settings"❫
❪"code/utilities/code/concept_static_tree_structs"❫
⚯
❪"code/utilities/linguistics/computer/frontends/markdown/markdown_str_getter"❫
⚞⚟

◀public: static▶ std::vector<std::string> ☀Export(model::Module const& structure, std::vector<Contributor> const& contributors, Markdown_Settings const& settings)❰
   
   //Structure_Adjuster::Adjust(structure,settings.manipulations,Source_Language::Markdown);
   
  //created files
  std::vector<std::string> created;
  
  std::string source_code_filename = Module_Name(structure) + settings.file_extension;
  std::ofstream outfile(source_code_filename);
  std::string str = Markdown_Str_Getter::Get(structure,contributors,settings);
  outfile << str <<'\n';
  outfile.close();
  
  created.emplace_back(source_code_filename);
  return created;
❱

◀private: static▶ std::string ☀Module_Name(model::Module const& structure)❰
  if (structure.name.empty()){
    return "output";
  }
  return structure.name[0].value;
❱