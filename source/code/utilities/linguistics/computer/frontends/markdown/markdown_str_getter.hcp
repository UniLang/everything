class

❪fstream❫
❪iostream❫
❪"code/utilities/contributor/contributor"❫
❪"code/utilities/linguistics/computer/frontends/markdown/settings/markdown_settings"❫
❪"code/utilities/code/concept_static_tree_structs"❫
⚯
❪"code/utilities/linguistics/computer/frontends/markdown/markdown_header_getter"❫
❪"code/utilities/linguistics/computer/frontends/markdown/markdown_image_getter"❫
❪"code/utilities/linguistics/computer/frontends/markdown/markdown_title_getter"❫
❪"code/utilities/linguistics/computer/frontends/markdown/markdown_sentence_extra_getter"❫
❪"code/utilities/types/strings/transformers/appending/lib"❫
❪"code/utilities/types/converters/lib"❫
❪"code/utilities/types/strings/observers/other/lib"❫
❪"code/utilities/program/call/lib"❫
❪"code/utilities/filesystem/paths/lib"❫
❪"code/utilities/types/vectors/observers/lib"❫
❪"code/utilities/types/vectors/operators/lib"❫
❪"code/utilities/types/char/lib"❫
❪"code/utilities/linguistics/grammar/grammar_adjuster"❫
❪"code/utilities/time/date/lib"❫
❪"code/utilities/types/strings/observers/converting/lib"❫
⚞⚟

◀public: static▶ std::string ☀Get(model::Module const& structure, std::vector<Contributor> const& contributors, Markdown_Settings const& settings)❰
    std::string text;
    
    // core content (each of the enriched paragraphs)
    Append_With_Newline(text,Get_All_Paragraphs(structure,contributors,settings));
    
    // needed data for citations page
    if (Should_Add_Citation_Finale(structure,settings)){
        Append_With_Newline(text,Get_Citation_Finale(structure,settings));
    }
    
    return text;
❱

◀private: static▶ bool ☀Should_Add_Citation_Finale(model::Module const& structure, Markdown_Settings const& settings)❰
    
    
    //there's no citation sources
    if (structure.citation.empty()){
        return false;
    }
    
    //there are citation sources, and at least 1 sentence has a citation
    for (auto const& l: structure.literature){
        for (auto const& p: l.paragraph){
            for (auto const& s: p.paragraph_sentence){
                if (!s.citations.empty()){
                    return true;
                }
            }
        }
    }
    
    return false;
❱
◀private: static▶ std::string ☀Get_Citation_Finale(model::Module const& structure, Markdown_Settings const& settings)❰
    std::string text;
    Append_With_Newline(text,"\\newpage {References\\par}");
    return text;
❱


◀private: static▶ std::string ☀Get_All_Paragraphs(model::Module const& structure, std::vector<Contributor> const& contributors, Markdown_Settings const& settings)❰

    std::string text;
    for (auto const& l: structure.literature){
        for (auto const& it: l.paragraph){
            
            
            const auto depth = Get_Depth(it);
            if (!Markdown_Title_Getter::More_Of_A_Labeled_Image_Title_Display(it,contributors,settings)){
                if (depth == 0 && settings.headers.h1_as_details_tags){
                    Append_With_Newline(text,settings.headers.details_end_tag);
                    Append_With_Newline(text,settings.headers.details_start_tag);
                }
            }
            
            Append(text,Markdown_Title_Getter::Get_Possible_Image_Title(it,contributors,settings));
            Append(text,Possibly_Get_Outline(it,contributors,settings));
            
            //if the title was a special image title, then
            //we don't want to print any of the sentences and supplementary info that's there
            //we technically already printed some of this sentence information as part of the title, and are skipping the rest
            //and avoiding doing it twice.
            if (!Markdown_Title_Getter::More_Of_A_Labeled_Image_Title_Display(it,contributors,settings)){
                Append(text,Possibly_Get_Sentences(it,contributors,settings));
                // if (depth == 0 && settings.headers.h1_as_details_tags){
                //     Append_With_Newline(text,settings.headers.details_end_tag);
                // }
            }
            Append_A_Newline(text);
        }
    }
    
    return text;
❱


◀private: static▶ int ☀Get_Depth(model::Paragraph const& p)❰
    if (p.paragraph_depth.empty()){
        return 0;
    }
    return as_signed(p.paragraph_depth[0].value);
❱

◀private: static▶ std::string ☀Possibly_Get_Outline(model::Paragraph const& it, std::vector<Contributor> const& contributors, Markdown_Settings const& settings)❰
    std::string text;
    if (settings.outlines.print){
        Append_A_Newline(text);
        for (auto const& it: it.outline_point){
            Append(text,settings.outlines.prefix_marker);
            for (auto const& point: it.point){
                Append_With_Newline(text,point.value);
            }
        }
    }
    
    return text;
❱
◀private: static▶ std::string ☀Possibly_Get_Sentences(model::Paragraph const& p, std::vector<Contributor> const& contributors, Markdown_Settings const& settings)❰
    std::string text;
    
    //if there are no sentences don't print them or any of the supplementary data
    if (p.paragraph_sentence.empty()){
        return text;
    }
    if(!settings.sentences.print){
        return text;
    }
    
    
        
    //print each sentence
    for (auto const& it: p.paragraph_sentence){
        Append(text,Possibly_Get_Sentence(it,contributors,settings));
    }
    
    //add extra line since we printed sentences under the title
    Append_A_Newline(text);
    return text;
❱
◀private: static▶ std::string ☀Possibly_Get_Sentence(model::ParagraphSentence const& s, std::vector<Contributor> const& contributors, Markdown_Settings const& settings)❰
    std::string text;
    if (!s.sentence_text.empty()){
        Append(text,Grammar_Adjuster::Get_Adjusted(as_string(s.sentence_text[0].value),settings.grammar));
        Append_N_Spaces(text,2);
    }
    if (!s.image.empty() || !s.table.empty() || !s.code_line.empty()){
        Append_A_Newline(text);
        Append(text,Markdown_Sentence_Extra_Getter::Get(s,contributors,settings));
    }
    return text;
❱
