class
❪fstream❫
❪iostream❫
❪"code/utilities/contributor/contributor"❫
❪"code/utilities/linguistics/computer/frontends/markdown/settings/markdown_settings"❫
❪"code/utilities/code/concept_static_tree_structs"❫
⚯
❪"code/utilities/types/strings/transformers/appending/lib"❫
❪"code/utilities/types/converters/lib"❫
❪"code/utilities/types/strings/observers/other/lib"❫
❪"code/utilities/types/vectors/observers/lib"❫
❪"code/utilities/types/vectors/operators/lib"❫
❪"code/utilities/types/char/lib"❫
❪"code/utilities/types/strings/observers/converting/lib"❫
⚞⚟

◀public: static▶ std::string ☀Get(model::Image const& i, Markdown_Settings const& settings)❰
    std::string text;
    
    
    if (settings.image.wrap_in_p_tags){
        Append_With_Newline(text,"<p align=\"center\">");
        Append_A_Tab(text);
    }
        Append(text,"<img ");
        Append(text,"width=\"");
        for (auto const& width: i.width){
            Append(text,width.value);
        }
        Append(text,"\" ");
        Append(text,"height=\"");
        for (auto const& height: i.height){
            Append(text,height.value);
        }
        Append(text,"\" ");
        Append(text,"src=\"");
        for (auto const& it: i.path){Append(text,it.value);}
        Append(text,"\">");
        
    if (settings.image.wrap_in_p_tags){
        Append_With_Newline(text,"</p>");
    }
    //Append_A_Newline(text);
    return text;
❱