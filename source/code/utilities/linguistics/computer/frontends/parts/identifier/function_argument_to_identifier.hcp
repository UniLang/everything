class
❪"code/utilities/linguistics/computer/frontends/parts/portion_options"❫
❪"code/utilities/code/concept_static_tree_structs"❫
❪"code/utilities/types/strings/transformers/casing/case_modifier"❫
❪"code/utilities/types/vectors/observers/lib"❫
⚯
⚞⚟

//hungarian notation, casing, unit suffix resolvers [for function related]
◀public: static▶ std::string ☀Derive_Name(model::FunctionArgument const& arg, Portion_Options const& settings)❰
        
        //get prefixes and suffixes
        // auto prefix = Data_Member_To_Hungarian_Notation_Converter::Get_Hungarian_Notation_Prefix(arg,settings,false,false);
        // auto suffix = Get_Raw_Unit_Suffix(arg);
        // suffix = Get_Properly_Cased_Suffix_For_Non_Constant(suffix);
        
        //create the identifier
        auto raw_identifier = First_Element_Or_Default(arg.identifier).value;
        std::string new_identifier = Case_Modifier::As_Modified_Casing(settings.method_options.argument_casing,raw_identifier);
        // Possibly_Add_Identifier_Prefixes_And_Suffixes(new_identifier,settings.method_options.parameters.notation,prefix,suffix);
        
        //return it
        return new_identifier;
❱

◀private: static▶ std::string ☀Get_Raw_Unit_Suffix(model::FunctionArgument const& construct)❰
    std::string suffix;
    // if (!construct.units.value.empty()){
    //     suffix = Unit_Suffix_Lookuper::Get_Unit_Suffix_From_Data_Unit(as_string(construct.units.value));
    //     if (suffix.empty()){
    //         suffix = as_string(construct.units.value);
    //     }
    // }
    return suffix;
❱