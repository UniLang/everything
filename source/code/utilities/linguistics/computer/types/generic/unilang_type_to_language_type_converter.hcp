class


❪"code/utilities/linguistics/computer/types/generic/lookup_table/type_conversion_lookup_table"❫
❪"code/utilities/linguistics/computer/source_language"❫
❪"code/utilities/linguistics/computer/types/generic/lookup_table/unilang_type_to_language_type_table_getter"❫
⚯
❪"code/utilities/types/map/lib"❫
❪"code/utilities/types/strings/transformers/casing/lib"❫
⚞⚟

◀public: static▶ Language_Type ☀Convert_To_Language_Type(std::string unilang_type,Source_Language source_language)❰
    
    //get lookup table (eventually from YAML)
    auto table = Unilang_Type_To_Language_Type_Table_Getter::Get_Lookup_Table();
    auto adjusted_unilang_type = Adjusted_Unilang_Type(unilang_type);
    
    //get the value out of the table if it exists
    if (Exists_In_Unordered_Map(table.values,adjusted_unilang_type)){
        auto value = table.values.at(adjusted_unilang_type);
        return Convert_Equivalent_Language_Type_To_Specific_Language(value,source_language);
    }
    
    //if we couldn't convert the unilang type, just use the unilang type as a fallback
    //for the time being we expect this to happen as we'll be referencing types outside of UniLang's view
    //although, we'll try to have sufficient analysis to know about currently scoped types and outside types
    Language_Type not_found;
    not_found.name = unilang_type;
    
    return not_found;
❱

◀public: static▶ Inferred_Type_Properties ☀Get_Infered_Type_Properties(std::string unilang_type)❰

    //get lookup table (eventually from YAML)
    auto table = Unilang_Type_To_Language_Type_Table_Getter::Get_Lookup_Table();
    auto adjusted_unilang_type = Adjusted_Unilang_Type(unilang_type);

	Cross_Language_Type results;
    if (Exists_In_Unordered_Map(table.values,adjusted_unilang_type)){
        results = table.values.at(adjusted_unilang_type);
	}
	return results.inferred_properties;
❱

◀public: static▶ bool ☀Is_A_Unilang_Type(std::string const& unilang_type)❰

    //get lookup table (eventually from YAML)
    auto table = Unilang_Type_To_Language_Type_Table_Getter::Get_Lookup_Table();
    auto adjusted_unilang_type = Adjusted_Unilang_Type(unilang_type);
    
    //get the value out of the table if it exists
    if (Exists_In_Unordered_Map(table.values,adjusted_unilang_type)){
        return true;
    }
    return false;
❱

◀private: static▶ Language_Type ☀Convert_Equivalent_Language_Type_To_Specific_Language(Cross_Language_Type type_collection, Source_Language source_language)❰

    //get correct language type based on enumeration
    switch (source_language){
        case Source_Language::C: return type_collection.c;
        case Source_Language::CPP: return type_collection.cpp;
        case Source_Language::D:return type_collection.d;
        case Source_Language::RUST: return type_collection.rust;
        case Source_Language::HOLYC: return type_collection.holyC;
        case Source_Language::JAVA: return type_collection.java;
        case Source_Language::CSHARP: return type_collection.csharp;
        case Source_Language::PASCAL: return type_collection.pascal;
        case Source_Language::ML: return type_collection.ml;
        case Source_Language::GO: return type_collection.go;
        case Source_Language::ELM: return type_collection.elm;
        case Source_Language::COBOL: return type_collection.cobol;
        case Source_Language::ADA: return type_collection.ada;
        case Source_Language::FSHARP: return type_collection.fsharp;
        case Source_Language::FORTRAN: return type_collection.fortran;
        case Source_Language::HASKELL: return type_collection.haskell;
        case Source_Language::KOTLIN: return type_collection.kotlin;
        case Source_Language::NIM: return type_collection.nim;
        case Source_Language::SCHEME: return type_collection.scheme;
        case Source_Language::RACKET: return type_collection.racket;
        case Source_Language::SCALA: return type_collection.scala;
        case Source_Language::SWIFT: return type_collection.swift;
        case Source_Language::PYTHON: return type_collection.python;
        case Source_Language::BRAINFUCK: return type_collection.brain_fuck;
        case Source_Language::HIDL: return type_collection.hidl;
        case Source_Language::PROCESSING: return type_collection.processing;
        default:;
    }
    
    return type_collection.c;
❱



◀private: static▶ std::string ☀Adjusted_Unilang_Type(std::string const& unilang_type)❰
    auto name = As_Lowercase(unilang_type);
    if (name == ""){
        name = "void";
    }
    return name;
❱
