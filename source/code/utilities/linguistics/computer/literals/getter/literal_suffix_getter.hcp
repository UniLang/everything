class


❪"code/utilities/linguistics/computer/literals/getter/data/literal_suffix_settings"❫
⚯
❪"code/utilities/linguistics/computer/types/generic/unilang_type_to_language_type_converter"❫
❪"code/utilities/types/converters/lib"❫
⚞⚟

◀public: static▶ std::string ☀Get_Literal_Suffix(Literal_Suffix_Settings const& settings, std::string base_type)❰
    
    //auto stripped_type_detail = Type_Qualifier_Stripper::Strip_To_Base_Unilang_Type(as_string(base_type),false);
    //auto language_type = Unilang_Type_To_Language_Type_Converter::Convert_To_Language_Type(stripped_type_detail.base_type, Source_Language::C);
    std::string language_type_name = "FIX";
    
    std::string suffix;
    if (settings.use_literal_suffixes){
        suffix = Pull_Out_Literal_Based_On_Table(settings.literal_lookup_table,language_type_name);
    }
    
    return suffix;
❱



◀private: static▶ std::string ☀Pull_Out_Literal_Based_On_Table(std::unordered_multimap<std::string,std::string> const& lookup_table, std::string const& base_type)❰

    std::string suffix;
    auto found = lookup_table.find(base_type);
    if (found != lookup_table.end()){
        suffix = found->second;
    }
    return suffix;
❱