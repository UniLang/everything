class
❪string❫
❪iostream❫
❪cstdlib❫
❪iostream❫
❪"code/utilities/linguistics/law/software_laws"❫
⚯

⚞⚟

//Eponyms
//https://en.wikipedia.org/wiki/List_of_eponymous_laws

◀public: static▶ Software_Laws ☀Get() ❰
	Software_Laws x;
    x.laws.emplace_back(Amdahl_Law());
    x.laws.emplace_back(Betteridge_Law());
    x.laws.emplace_back(Dilbert_Principe());
    x.laws.emplace_back(Hanlon_Razor());
    x.laws.emplace_back(Putt_Law());
    x.laws.emplace_back(Putt_Corollary());
    x.laws.emplace_back(Murphy_Law());
    x.laws.emplace_back(Brook_Law());
    x.laws.emplace_back(Hofstadter_Law());
    x.laws.emplace_back(Hutber_Law());
    x.laws.emplace_back(Conway_Law());
    x.laws.emplace_back(Robustness_Principle());
    x.laws.emplace_back(Eighty_Twenty_Rule());
    x.laws.emplace_back(Peter_Principle());
    x.laws.emplace_back(Kerchkhoff_Principle());
    x.laws.emplace_back(Linus_Law());
    x.laws.emplace_back(Moore_Law());
    x.laws.emplace_back(Wright_Law());
    x.laws.emplace_back(Goddard_Law());
    x.laws.emplace_back(Wirth_Law());
    x.laws.emplace_back(Ninety_Ninety_Rule());
    x.laws.emplace_back(Knuth_Optimization_Priciple());
    x.laws.emplace_back(Norvig_Law());
    x.laws.emplace_back(Cunningham_Law());
    x.laws.emplace_back(Goodhart_Law());
    x.laws.emplace_back(Osborn_Law());
    x.laws.emplace_back(Parkinson_Law());
    x.laws.emplace_back(Gall_Law());
    x.laws.emplace_back(Greenspun_Tenth_Rule());
    x.laws.emplace_back(Zawinski_Law());
    x.laws.emplace_back(Spolsky_Law());
    x.laws.emplace_back(Eagleson_Law());
    x.laws.emplace_back(Gates_Law());
    x.laws.emplace_back(Parkinson_Law_Of_Data());
    x.laws.emplace_back(Sturgeon_Law());
    x.laws.emplace_back(Price_Law());
    x.laws.emplace_back(Parkinson_Corollary());
    x.laws.emplace_back(Mosher_Law());
    x.laws.emplace_back(Maslow_Law());
    x.laws.emplace_back(Zero_One_Infinity_Rule());
    x.laws.emplace_back(Amara_Law());
    x.laws.emplace_back(Clarke_Third_Law());
    x.laws.emplace_back(Vogels_Law());
    x.laws.emplace_back(Hyrum_Law());
    x.laws.emplace_back(Atwood_Law());
    x.laws.emplace_back(Rule_Of_Least_Power());
    x.laws.emplace_back(Law_Of_Demeter());
    x.laws.emplace_back(Dont_Repeat_Yourself_Rule());
    x.laws.emplace_back(Tesler_Law());
    x.laws.emplace_back(Schneiers_Law());
    x.laws.emplace_back(Wadlers_Law());
    x.laws.emplace_back(Brown_Window_Theory());
    x.laws.emplace_back(Stroustrups_Rule());
    
return x;
❱

◀private: static▶ Software_Law ☀Amdahl_Law() ❰
    Software_Law law;
    law.name = "Amdahl's Law";
    law.description = "Theoretical speedup in latency of the execution of a task at fixed workload that can be expected of a system whose resources are improved.";
    return law;
❱
◀private: static▶ Software_Law ☀Betteridge_Law() ❰
    Software_Law law;
    law.name = "Betteridge's law of headlines";
    law.description = "Any headline that ends in a question mark can be answered by the word no.";
    return law;
❱

◀private: static▶ Software_Law ☀Dilbert_Principe() ❰
    Software_Law law;
    law.name = "The Dilbert Principle";
    law.description = "Companies tend to systematically promote incompetent employees to management to get them out of the workflow.";
    return law;
❱

◀private: static▶ Software_Law ☀Hanlon_Razor() ❰
    Software_Law law;
    law.name = "Hanlon's Law";
    law.description = "Never attribute to malice that which is adequately explained by stupidity.";
    return law;
❱
◀private: static▶ Software_Law ☀Putt_Law() ❰
    Software_Law law;
    law.name = "Putt's Law";
    law.description = "Technology is dominated by two types of people, those who understand what they do not manage and those who manage what they do not understand.";
    return law;
❱
◀private: static▶ Software_Law ☀Putt_Corollary() ❰
    Software_Law law;
    law.name = "Putt's Corollary";
    law.description = "Every technical hierarchy, in time, develops a competence inversion with incompetence being \"flushed out of the lower levels\" of a technocratic hierarchy, ensuring that technically competent people remain directly in charge of the actual technology while those without technical competence move into management.";
    return law;
❱

◀private: static▶ Software_Law ☀Murphy_Law() ❰
    Software_Law law;
    law.name = "Murphy's Law";
    law.description = "If something can go wrong, it will.";
    // I will argue that Murphy's Law, as listed, is actually Finagle's Law of Dynamic Negatives "Anything that can go wrong, will. "
    return law;
❱
◀private: static▶ Software_Law ☀Brook_Law() ❰
    Software_Law law;
    law.name = "Brook's Law";
    law.description = "Adding manpower to a late software project makes it later.";
    return law;
❱
◀private: static▶ Software_Law ☀Hofstadter_Law() ❰
    Software_Law law;
    law.name = "Hofstadter's Law";
    law.description = "It always takes longer than you expect, even when you take into account Hofstadter's Law.";
    return law;
❱
◀private: static▶ Software_Law ☀Hutber_Law() ❰
    Software_Law law;
    law.name = "Hutber's Law";
    law.description = "Improvement means deterioration.";
    return law;
❱
◀private: static▶ Software_Law ☀Conway_Law() ❰
    Software_Law law;
    law.name = "Conway's Law";
    law.description = "Any piece of software reflects the organizational structure that produced it.";
    law.alternative_descriptions.emplace_back("Organizations which design systems are constrained to produce designs which are copies of the communication structures of these organizations.");
    return law;
❱
◀private: static▶ Software_Law ☀Robustness_Principle() ❰
    Software_Law law;
    law.name = "Robustness Principle";
    law.alternative_names.emplace_back("Postel's Law");
    law.description = "Be conservative in what you send, be liberal in what you accept.";
    return law;
❱
◀private: static▶ Software_Law ☀Eighty_Twenty_Rule() ❰
    Software_Law law;
    law.name = "80-20 Rule";
    law.alternative_names.emplace_back("Pareto Principle");
    law.description = "For many phenomena, 80% of consequences stem from 20% of the causes.";
    return law;
❱
◀private: static▶ Software_Law ☀Peter_Principle() ❰
    Software_Law law;
    law.name = "Peter Principle";
    law.description = "In a hierarchy, every employee tends to rise to his level of incompetence.";
    return law;
❱
◀private: static▶ Software_Law ☀Kerchkhoff_Principle() ❰
    Software_Law law;
    law.name = "Kerchkhoff's Principle";
    law.description = "In cryptography, a system should be secure even if everything about the system, except for a small piece of information - the key - is public knowledge.";
    return law;
❱
◀private: static▶ Software_Law ☀Linus_Law() ❰
    Software_Law law;
    law.name = "Linus's Law";
    law.description = "Given enough eyeballs, all bugs are shallow.";
    return law;
❱
◀private: static▶ Software_Law ☀Moore_Law() ❰
    Software_Law law;
    law.name = "Moore's Law";
    law.description = "The number of transistors on an integrated circuit will double in about 18 months.";
    law.alternative_descriptions.emplace_back("The power of computers per unit cost doubles every 24 month.");
    law.alternative_descriptions.emplace_back("The processing speed of computers will double every two years.");
    return law;
❱
◀private: static▶ Software_Law ☀Wright_Law() ❰
    Software_Law law;
    law.name = "Wright's Law";
    law.description = "The cost of a unit decreases as a function of the cumulative production.";
    law.alternative_descriptions.emplace_back("We learn by doing.");
    return law;
❱
◀private: static▶ Software_Law ☀Goddard_Law() ❰
    Software_Law law;
    law.name = "Goddard's Law";
    law.description = "Unit cost decreases as the scale of production increases.";
    law.alternative_descriptions.emplace_back("Economies of scale.");
    return law;
❱
◀private: static▶ Software_Law ☀Wirth_Law() ❰
    Software_Law law;
    law.name = "Wirth's law";
    law.description = "Software gets slower faster than hardware gets faster.";
    return law;
❱
◀private: static▶ Software_Law ☀Ninety_Ninety_Rule() ❰
    Software_Law law;
    law.name = "Ninety-ninety rule";
    law.description = "The first 90% of the code takes 10% of the time. The remaining 10% takes the other 90% of the time.";
    return law;
❱
◀private: static▶ Software_Law ☀Knuth_Optimization_Priciple() ❰
    Software_Law law;
    law.name = "Knuth's optimization principle";
    law.description = "Premature optimization is the root of all evil.";
    return law;
❱
◀private: static▶ Software_Law ☀Norvig_Law() ❰
    Software_Law law;
    law.name = "Norvig's Law";
    law.description = "Any technology that surpasses 50% penetration will never double again (in any number of months).";
    return law;
❱
◀private: static▶ Software_Law ☀Cunningham_Law() ❰
    Software_Law law;
    law.name = "Cunningham's Law";
    law.description = "The fastest way to get help over the internet is not to ask the question but to instead answer it wrong.";
    return law;
❱
◀private: static▶ Software_Law ☀Goodhart_Law() ❰
    Software_Law law;
    law.name = "Goodhart's Law";
    law.description = "When a measure becomes a target, it ceases to be a good measure.";
    return law;
❱
◀private: static▶ Software_Law ☀Osborn_Law() ❰
    Software_Law law;
    law.name = "Osborn's Law";
    law.description = "Variables won't. Constants aren't.";
    //I think he's saying that we often guess wrong regarding what will change and what won't.
    return law;
❱
◀private: static▶ Software_Law ☀Parkinson_Law() ❰
    Software_Law law;
    law.name = "Parkinson's Law";
    law.description = "Work expands to fill all time allocated to its completion.";
    return law;
❱
◀private: static▶ Software_Law ☀Gall_Law() ❰
    Software_Law law;
    law.name = "Gall's Law";
    law.description = "A complex system that works is invariably found to have evolved from a simple system that worked.";
    //A complex system designed from scratch never works and cannot be patched up to make it work. You have to start over with a working simple system.
    return law;
❱
◀private: static▶ Software_Law ☀Greenspun_Tenth_Rule() ❰
    Software_Law law;
    law.name = "Greenspun’s Tenth Rule";
    law.description = "Any sufficiently complicated C or Fortran program contains an ad-hoc, informally-specified, bug-ridden, slow implementation of half of Common Lisp.";
    return law;
❱
◀private: static▶ Software_Law ☀Zawinski_Law() ❰
    Software_Law law;
    law.name = "Zawinski's law";
    law.description = "Every program attempts to expand until it can read mail. Those programs which cannot so expand are replaced by ones which can.";
    return law;
❱
◀private: static▶ Software_Law ☀Spolsky_Law() ❰
    Software_Law law;
    law.name = "Spolsky's law";
    law.description = "All non-trivial abstractions, to some degree, are leaky.";
    return law;
❱
◀private: static▶ Software_Law ☀Eagleson_Law() ❰
    Software_Law law;
    law.name = "Eagleson’s law";
    law.description = "Any code of your own that you haven’t looked at for six or more months might as well have been written by someone else.";
    return law;
❱
◀private: static▶ Software_Law ☀Gates_Law() ❰
    Software_Law law;
    law.name = "Gate's law";
    law.description = "The speed of software halves every 18 months.";
    return law;
❱
◀private: static▶ Software_Law ☀Parkinson_Law_Of_Data() ❰
    Software_Law law;
    law.name = "Parkinson's Law of Data";
    law.description = "Data expands to fill the space available for storage.";
    return law;
❱
◀private: static▶ Software_Law ☀Sturgeon_Law() ❰
    Software_Law law;
    law.name = "Sturgeon's Law";
    law.description = "Ninety percent of everything is crud.";
    return law;
❱
◀private: static▶ Software_Law ☀Price_Law() ❰
    Software_Law law;
    law.name = "Angulation of Price's Law";
    law.description = "The square root of the number of people on a project write 50% of the code.";
    return law;
❱
◀private: static▶ Software_Law ☀Parkinson_Corollary() ❰
    Software_Law law;
    law.name = "Parkinson's Corollary";
    law.description = "Expenditure rises to meet income.";
    return law;
❱
◀private: static▶ Software_Law ☀Mosher_Law() ❰
    Software_Law law;
    law.name = "Mosher's Law";
    law.description = "Don't worry if it doesn't work right.  If everything did, you'd be out of a job.";
    return law;
❱
◀private: static▶ Software_Law ☀Maslow_Law() ❰
    Software_Law law;
    law.name = "Maslow's Law";
    law.description = "If the only tool you have is a hammer, to treat everything as if it were a nail.";
    return law;
❱
◀private: static▶ Software_Law ☀Zero_One_Infinity_Rule() ❰
    Software_Law law;
    law.name = "Zero one infinity rule";
    law.alternative_names.emplace_back("Poel's rule");
    law.description = "Allow none of foo, one of foo, or any number of foo.";
    return law;
❱
◀private: static▶ Software_Law ☀Amara_Law() ❰
    Software_Law law;
    law.name = "Amara's Law";
    law.description = "We tend to overestimate the impact of a new technology in the short run, but we underestimate it in the long run.";
    return law;
❱
◀private: static▶ Software_Law ☀Clarke_Third_Law() ❰
    Software_Law law;
    law.name = "Clarke's Third Law";
    law.description = "Any sufficiently advanced technology is indistinguishable from magic.";
    return law;
❱
◀private: static▶ Software_Law ☀Vogels_Law() ❰
    Software_Law law;
    law.name = "Vogel's Law";
    law.description = "Everything breaks, all the time.";
    return law;
❱
◀private: static▶ Software_Law ☀Hyrum_Law() ❰
    Software_Law law;
    law.name = "Hyrum's Law";
    law.description = "With a sufficient number of users of an API, it does not matter what you promise in the contract: all observable behaviors of your system will be depended on by somebody.";
    return law;
❱
◀private: static▶ Software_Law ☀Atwood_Law() ❰
    Software_Law law;
    law.name = "Atwood's Law";
    law.description = "Any application that can be written in JavaScript, will eventually be written in JavaScript.";
    return law;
❱
◀private: static▶ Software_Law ☀Rule_Of_Least_Power() ❰
    Software_Law law;
    law.name = "Rule Of Least Power";
    law.description = "Suggests choosing the least powerful [computer] language suitable for a given purpose.";
    return law;
❱
◀private: static▶ Software_Law ☀Law_Of_Demeter() ❰
    Software_Law law;
    law.name = "Law of Demeter";
    law.alternative_names.emplace_back("Principle of Least Knowledge");
    law.description = "Each unit should have only limited knowledge about other units: only units \"closely\" related to the current unit.";
    return law;
❱
◀private: static▶ Software_Law ☀Dont_Repeat_Yourself_Rule() ❰
    Software_Law law;
    law.name = "DRY";
    law.description = "Don't Repeat Yourself";
    return law;
❱
◀private: static▶ Software_Law ☀Tesler_Law() ❰
    Software_Law law;
    law.name = "Tesler's Law";
    law.alternative_names.emplace_back("Law of conservation of complexity");
    law.description = "Every application has an inherent amount of complexity that cannot be removed or hidden. Instead, it must be dealt with, either in product development or in user interaction.";
    return law;
❱
◀private: static▶ Software_Law ☀Schneiers_Law()❰
    Software_Law law;
    law.name = "Schneier's Law";
    law.description = "Anyone can invent a security system that he himself cannot break.";
    return law;
❱
◀private: static▶ Software_Law ☀Wadlers_Law()❰
    Software_Law law;
    law.name = "Wadler's Law";
    law.description = "In any language design, the total time spent discussing a feature in this list is proportional to two raised to the power of its position.\n";
    law.description += "0 Semantics, 1 Syntax, 2 Lexical syntax, 3 Lexical syntax of comments";
    return law;
❱
◀private: static▶ Software_Law ☀Brown_Window_Theory()❰
    Software_Law law;
    law.name = "Broken Window Theory";
    law.description = "Visible signs of crime, anti-social behavior, and civil disorder create an urban environment that encourages further crime and disorder, including serious crimes.";
    return law;
❱
◀private: static▶ Software_Law ☀Stroustrups_Rule()❰
    Software_Law law;
    law.name = "Stroustrup's Rule";
    law.description = "For new features, people insist on LOUD explicit syntax.  For established features, people want terse notation.";
    return law;
❱