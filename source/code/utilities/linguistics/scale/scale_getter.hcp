class
❪string❫
❪iostream❫
❪cstdlib❫
❪iostream❫
❪"code/utilities/linguistics/scale/scale"❫
⚯

⚞⚟

//What's the best name for theses?
//implicature scales? horn scales? levinston scales? scalar implicatures?
◀public: static▶ Scale ☀Frequencies() ❰
    Scale scale;
    Scale_Point point;
    scale.name = "frequency";
    
    point.word_phrases.emplace_back("never");
    scale.units.emplace_back(point);
    point.word_phrases.clear();
    
    point.word_phrases.emplace_back("occasionally");
    scale.units.emplace_back(point);
    point.word_phrases.clear();
    
    point.word_phrases.emplace_back("sometimes");
    scale.units.emplace_back(point);
    point.word_phrases.clear();
    
    point.word_phrases.emplace_back("regularly");
    scale.units.emplace_back(point);
    point.word_phrases.clear();
    
    point.word_phrases.emplace_back("often");
    scale.units.emplace_back(point);
    point.word_phrases.clear();
    
    point.word_phrases.emplace_back("usually");
    scale.units.emplace_back(point);
    point.word_phrases.clear();
    
    point.word_phrases.emplace_back("constantly");
    scale.units.emplace_back(point);
    point.word_phrases.clear();
    
    point.word_phrases.emplace_back("always");
    scale.units.emplace_back(point);
    point.word_phrases.clear();

    return scale;
❱

◀public: static▶ Scale ☀Likelihood() ❰
    Scale scale;
    Scale_Point point;
    scale.name = "likelihood";
    
    point.word_phrases.emplace_back("impossible");
    scale.units.emplace_back(point);
    point.word_phrases.clear();
    
    point.word_phrases.emplace_back("possible");
    scale.units.emplace_back(point);
    point.word_phrases.clear();
    
    point.word_phrases.emplace_back("likely");
    scale.units.emplace_back(point);
    point.word_phrases.clear();
    
    point.word_phrases.emplace_back("certain");
    scale.units.emplace_back(point);
    point.word_phrases.clear();
    
    point.word_phrases.emplace_back("definite");
    scale.units.emplace_back(point);
    point.word_phrases.clear();

    return scale;
❱

◀public: static▶ Scale ☀Goodness() ❰
    Scale scale;
    Scale_Point point;
    scale.name = "goodness";
    
    point.word_phrases.emplace_back("worst");
    scale.units.emplace_back(point);
    point.word_phrases.clear();
    
    point.word_phrases.emplace_back("abysmal");
    scale.units.emplace_back(point);
    point.word_phrases.clear();
    
    point.word_phrases.emplace_back("awful");
    scale.units.emplace_back(point);
    point.word_phrases.clear();
    
    point.word_phrases.emplace_back("terrible");
    scale.units.emplace_back(point);
    point.word_phrases.clear();
    
    point.word_phrases.emplace_back("very bad");
    scale.units.emplace_back(point);
    point.word_phrases.clear();
    
    point.word_phrases.emplace_back("really bad");
    scale.units.emplace_back(point);
    point.word_phrases.clear();
    
    point.word_phrases.emplace_back("rubbish");
    scale.units.emplace_back(point);
    point.word_phrases.clear();
    
    point.word_phrases.emplace_back("bad");
    scale.units.emplace_back(point);
    point.word_phrases.clear();
    
    point.word_phrases.emplace_back("poor");
    scale.units.emplace_back(point);
    point.word_phrases.clear();
    
    point.word_phrases.emplace_back("pretty bad");
    scale.units.emplace_back(point);
    point.word_phrases.clear();
    
    point.word_phrases.emplace_back("below average");
    scale.units.emplace_back(point);
    point.word_phrases.clear();
    
    point.word_phrases.emplace_back("mediocre");
    scale.units.emplace_back(point);
    point.word_phrases.clear();
    
    point.word_phrases.emplace_back("average");
    scale.units.emplace_back(point);
    point.word_phrases.clear();
    
    point.word_phrases.emplace_back("not bad");
    scale.units.emplace_back(point);
    point.word_phrases.clear();
    
    point.word_phrases.emplace_back("ok");
    scale.units.emplace_back(point);
    point.word_phrases.clear();
    
    point.word_phrases.emplace_back("above average");
    scale.units.emplace_back(point);
    point.word_phrases.clear();
    
    point.word_phrases.emplace_back("pretty good");
    scale.units.emplace_back(point);
    point.word_phrases.clear();
    
    point.word_phrases.emplace_back("good");
    scale.units.emplace_back(point);
    point.word_phrases.clear();
    
    point.word_phrases.emplace_back("great");
    scale.units.emplace_back(point);
    point.word_phrases.clear();
    
    point.word_phrases.emplace_back("really good");
    scale.units.emplace_back(point);
    point.word_phrases.clear();
    
    point.word_phrases.emplace_back("very good");
    scale.units.emplace_back(point);
    point.word_phrases.clear();
    
    point.word_phrases.emplace_back("fantastic");
    scale.units.emplace_back(point);
    point.word_phrases.clear();
    
    point.word_phrases.emplace_back("superb");
    scale.units.emplace_back(point);
    point.word_phrases.clear();
    
    point.word_phrases.emplace_back("excellent");
    scale.units.emplace_back(point);
    point.word_phrases.clear();
    
    point.word_phrases.emplace_back("brilliant");
    scale.units.emplace_back(point);
    point.word_phrases.clear();
    
    point.word_phrases.emplace_back("incredible");
    scale.units.emplace_back(point);
    point.word_phrases.clear();
    
    point.word_phrases.emplace_back("best");
    scale.units.emplace_back(point);
    point.word_phrases.clear();

    return scale;
❱

◀public: static▶ Scale ☀Quantifiers() ❰
    Scale scale;
    Scale_Point point;
    scale.name = "quantity";
    
    point.word_phrases.emplace_back("none");
    scale.units.emplace_back(point);
    point.word_phrases.clear();
    
    point.word_phrases.emplace_back("few");
    scale.units.emplace_back(point);
    point.word_phrases.clear();
    
    point.word_phrases.emplace_back("some");
    scale.units.emplace_back(point);
    point.word_phrases.clear();
    
    point.word_phrases.emplace_back("many");
    scale.units.emplace_back(point);
    point.word_phrases.clear();
    
    point.word_phrases.emplace_back("most");
    scale.units.emplace_back(point);
    point.word_phrases.clear();
    
    point.word_phrases.emplace_back("all");
    scale.units.emplace_back(point);
    point.word_phrases.clear();

    return scale;
❱

◀public: static▶ Scale ☀Obligatoriness() ❰
    Scale scale;
    Scale_Point point;
    scale.name = "obligation";
    
    point.word_phrases.emplace_back("allowed");
    scale.units.emplace_back(point);
    point.word_phrases.clear();
    
    point.word_phrases.emplace_back("permitted");
    scale.units.emplace_back(point);
    point.word_phrases.clear();
    
    point.word_phrases.emplace_back("expected");
    scale.units.emplace_back(point);
    point.word_phrases.clear();
    
    point.word_phrases.emplace_back("required");
    scale.units.emplace_back(point);
    point.word_phrases.clear();

    return scale;
❱

◀public: static▶ Scale ☀Logical_Operators() ❰
    Scale scale;
    Scale_Point point;
    scale.name = "logical operators";
    
    point.word_phrases.emplace_back("or");
    scale.units.emplace_back(point);
    point.word_phrases.clear();
    
    point.word_phrases.emplace_back("and");
    scale.units.emplace_back(point);
    point.word_phrases.clear();

    return scale;
❱

◀public: static▶ Scale ☀Temperature() ❰
    Scale scale;
    Scale_Point point;
    scale.name = "temperature";
    
    point.word_phrases.emplace_back("frigid");
    scale.units.emplace_back(point);
    point.word_phrases.clear();
    
    point.word_phrases.emplace_back("freezing");
    scale.units.emplace_back(point);
    point.word_phrases.clear();
    
    point.word_phrases.emplace_back("cold");
    scale.units.emplace_back(point);
    point.word_phrases.clear();
    
    point.word_phrases.emplace_back("cool");
    scale.units.emplace_back(point);
    point.word_phrases.clear();
    
    point.word_phrases.emplace_back("moderate");
    scale.units.emplace_back(point);
    point.word_phrases.clear();
    
    point.word_phrases.emplace_back("lukewarm");
    scale.units.emplace_back(point);
    point.word_phrases.clear();
    
    point.word_phrases.emplace_back("warm");
    scale.units.emplace_back(point);
    point.word_phrases.clear();
    
    point.word_phrases.emplace_back("hot");
    scale.units.emplace_back(point);
    point.word_phrases.clear();
    
    point.word_phrases.emplace_back("scorching");
    scale.units.emplace_back(point);
    point.word_phrases.clear();

    return scale;
❱

◀public: static▶ Scale ☀Relationship() ❰
    Scale scale;
    Scale_Point point;
    scale.name = "relationship";
    
    point.word_phrases.emplace_back("stranger");
    scale.units.emplace_back(point);
    point.word_phrases.clear();
    
    point.word_phrases.emplace_back("acquaintance");
    scale.units.emplace_back(point);
    point.word_phrases.clear();
    
    point.word_phrases.emplace_back("colleague");
    scale.units.emplace_back(point);
    point.word_phrases.clear();
    
    point.word_phrases.emplace_back("friend");
    scale.units.emplace_back(point);
    point.word_phrases.clear();
    
    point.word_phrases.emplace_back("lover");
    scale.units.emplace_back(point);
    point.word_phrases.clear();
    
    point.word_phrases.emplace_back("soul-mate");
    scale.units.emplace_back(point);
    point.word_phrases.clear();

    return scale;
❱

◀public: static▶ Scale ☀Age() ❰
    Scale scale;
    Scale_Point point;
    scale.name = "age";
    
    point.word_phrases.emplace_back("young");
    scale.units.emplace_back(point);
    point.word_phrases.clear();
    
    point.word_phrases.emplace_back("middle-aged");
    scale.units.emplace_back(point);
    point.word_phrases.clear();
    
    point.word_phrases.emplace_back("old");
    scale.units.emplace_back(point);
    point.word_phrases.clear();

    return scale;
❱

◀public: static▶ Scale ☀Rank() ❰
    Scale scale;
    Scale_Point point;
    scale.name = "rank";
    
    point.word_phrases.emplace_back("captain");
    scale.units.emplace_back(point);
    point.word_phrases.clear();
    
    point.word_phrases.emplace_back("major");
    scale.units.emplace_back(point);
    point.word_phrases.clear();
    
    point.word_phrases.emplace_back("colonel");
    scale.units.emplace_back(point);
    point.word_phrases.clear();
    
    point.word_phrases.emplace_back("general");
    scale.units.emplace_back(point);
    point.word_phrases.clear();

    return scale;
❱

◀public: static▶ Scale ☀Desire() ❰
    Scale scale;
    Scale_Point point;
    scale.name = "desire";
    
    point.word_phrases.emplace_back("like");
    scale.units.emplace_back(point);
    point.word_phrases.clear();
    
    point.word_phrases.emplace_back("want");
    scale.units.emplace_back(point);
    point.word_phrases.clear();
    
    point.word_phrases.emplace_back("need");
    scale.units.emplace_back(point);
    point.word_phrases.clear();

    return scale;
❱

◀public: static▶ Scale ☀Togetherness() ❰
    Scale scale;
    Scale_Point point;
    scale.name = "togetherness";
    
    point.word_phrases.emplace_back("dating");
    scale.units.emplace_back(point);
    point.word_phrases.clear();
    
    point.word_phrases.emplace_back("going steady");
    scale.units.emplace_back(point);
    point.word_phrases.clear();
    
    point.word_phrases.emplace_back("engagement");
    scale.units.emplace_back(point);
    point.word_phrases.clear();
    
    point.word_phrases.emplace_back("marriage");
    scale.units.emplace_back(point);
    point.word_phrases.clear();

    return scale;
❱

◀public: static▶ Scale ☀Aspiration() ❰
    Scale scale;
    Scale_Point point;
    scale.name = "aspiration";
    
    point.word_phrases.emplace_back("want to");
    scale.units.emplace_back(point);
    point.word_phrases.clear();
    
    point.word_phrases.emplace_back("try to");
    scale.units.emplace_back(point);
    point.word_phrases.clear();
    
    point.word_phrases.emplace_back("succeed");
    scale.units.emplace_back(point);
    point.word_phrases.clear();

    return scale;
❱

◀public: static▶ Scale ☀Bristol_Stool() ❰
    Scale scale;
    Scale_Point point;
    scale.name = "stool";
    
    point.word_phrases.emplace_back("severe constipation");
    scale.units.emplace_back(point);
    point.word_phrases.clear();
    
    point.word_phrases.emplace_back("mild constipation");
    scale.units.emplace_back(point);
    point.word_phrases.clear();
    
    point.word_phrases.emplace_back("normal");
    scale.units.emplace_back(point);
    point.word_phrases.clear();
    
    point.word_phrases.emplace_back("lacking fibre");
    scale.units.emplace_back(point);
    point.word_phrases.clear();
    
    point.word_phrases.emplace_back("mild diarrhea");
    scale.units.emplace_back(point);
    point.word_phrases.clear();
    
    point.word_phrases.emplace_back("severe diarrhea");
    scale.units.emplace_back(point);
    point.word_phrases.clear();
    return scale;
❱
◀public: static▶ Scale ☀Requirement() ❰
    Scale scale;
    Scale_Point point;
    scale.name = "requirement";
    
    point.word_phrases.emplace_back("must");
    scale.units.emplace_back(point);
    point.word_phrases.clear();
    
    point.word_phrases.emplace_back("should");
    scale.units.emplace_back(point);
    point.word_phrases.clear();
    
    point.word_phrases.emplace_back("may");
    scale.units.emplace_back(point);
    point.word_phrases.clear();
    
    return scale;
❱





//Numbers: 1 < 2 < 3...

