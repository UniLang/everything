class

❪vector❫
❪string❫
❪"code/utilities/linguistics/grammar/grammar_adjuster"❫
❪"code/utilities/linguistics/grammar/settings/comment_grammar_settings"❫
⚯
❪"code/utilities/types/strings/observers/splitting/words_deriver"❫
❪"code/utilities/types/strings/observers/splitting/lib"❫
❪"code/utilities/types/strings/observers/other/lib"❫
❪"code/utilities/types/strings/transformers/trimming/lib"❫
⚞⚟


//typical greedy immediate line breaking algorithm that most people would intuitively write first
◀public: static▶ std::string ☀Apply(const std::vector<std::string> & sentences, Comment_Grammar_Settings const& grammar, Greedy_Reflow_Settings const& reflow)❰
	std::string result;

	int current_width = 0;
	for (auto const& it: sentences){
		auto words = Words_Deriver::Derive(it);
		for (auto const& word: words){
			if (Word_Will_Fit_On_The_Line(current_width,word,reflow)){
				Append_Current_Result_For_Same_Line(result,word,reflow);
				Increase_Current_Width_For_Same_Line(current_width,word,reflow);
			}
			else{
				current_width = 0;
				Append_Current_Result_For_New_Line(result,word,reflow);
				Increase_Current_Width_For_New_Line(current_width,word,reflow);
			}
		}

		//now that the sentence is over, we add the sentence divider
		rtrim(result);
		result += reflow.sentence_divider;
        current_width += reflow.sentence_divider.size();
	}
	return result;
❱

◀private: static▶ bool ☀Word_Ends_The_Sentence(Comment_Grammar_Settings const& grammar, std::string const& word)❰
	for (auto it: grammar.puncuation.puncuations){
		if (Ends_With(word,it)){
			return true;
		}
	}
	return false;
❱

◀private: static▶ bool ☀Word_Will_Fit_On_The_Line(int const& current_width, std::string const& word, Greedy_Reflow_Settings const& reflow)❰
	return current_width + reflow.re_spacing.size() + word.size() <= reflow.max_width;
❱

//appending back to the token
◀private: static▶ void ☀Append_Current_Result_For_Same_Line(std::string & result, std::string const& word, Greedy_Reflow_Settings const& reflow)❰
	result += reflow.re_spacing;
	result += word;
❱
◀private: static▶ void ☀Append_Current_Result_For_New_Line(std::string & result, std::string const& word, Greedy_Reflow_Settings const& reflow)❰
	result += reflow.reflow_divider;
	result += word;
❱

//adjusting the current_width count
◀private: static▶ void ☀Increase_Current_Width_For_Same_Line(int & current_width, std::string const& word, Greedy_Reflow_Settings const& reflow)❰
    current_width += word.size();
    current_width += reflow.re_spacing.size();
❱
◀private: static▶ void ☀Increase_Current_Width_For_New_Line(int & current_width, std::string const& word, Greedy_Reflow_Settings const& reflow)❰
    current_width += word.size();
❱