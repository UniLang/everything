class

❪vector❫
❪string❫
❪"code/utilities/linguistics/grammar/grammar_adjuster"❫
❪"code/utilities/linguistics/grammar/settings/comment_grammar_settings"❫
❪"code/utilities/types/strings/observers/reflow/settings/comment_reflow_settings"❫
⚯
❪"code/utilities/types/strings/observers/splitting/words_deriver"❫
❪"code/utilities/types/strings/observers/splitting/lib"❫
❪"code/utilities/types/strings/observers/other/lib"❫
❪"code/utilities/types/strings/transformers/trimming/lib"❫
❪"code/utilities/types/vectors/transformers/lib"❫
❪"code/utilities/types/strings/observers/reflow/algorithms/knuth_plass_reflower"❫
❪"code/utilities/types/strings/observers/reflow/algorithms/greedy_reflower"❫
⚞⚟


◀public: static▶ std::string ☀Possibly_Apply_Reflow(const std::vector<std::string> & sentences, Comment_Grammar_Settings const& grammar, Comment_Reflow_Settings const& reflow)❰
    std::string result;
    
    //replace the sentences if we aren't reflowing
    if (!reflow.enable){
        for (auto const& it: sentences){
            result += it + '\n';
        }
    }

    
    else{
        
       result = Choose_And_Perform_Reflow_Algorithm(sentences,grammar,reflow);
    }

    return result;
❱

◀private: static▶ std::string ☀Choose_And_Perform_Reflow_Algorithm(const std::vector<std::string> & sentences, Comment_Grammar_Settings const& grammar, Comment_Reflow_Settings const& reflow)❰
    
    if (reflow.algorithm == Reflow_Algorithm::KNUTH_PLASS){
        return Knuth_Plass_Reflower::Apply(sentences,grammar,reflow.knuth_plass);
    }
    else if (reflow.algorithm == Reflow_Algorithm::GREEDY){
        return Greedy_Reflower::Apply(sentences,grammar,reflow.greedy);
    }
    //add more here!
    
    
    
    //default if none detected
    return Greedy_Reflower::Apply(sentences,grammar,reflow.greedy);
❱