􏶞p􏶟
􏷲A generic graph edge to be used with the graph data structure􏷱
􏷰Stores the client decided edge data along with a vertex id
The vertex id can be used with the interface of the graph to get back the corresponding vertex􏷯
􏷮Data Structure􏷭􏷮Graph􏷭
􏷬Trevor Hickey􏷫

􏷤􏷣􏷦Any􏷥􏴓1􏴔􏴑AnyT􏴒
􏷤s􏷣􏷦stddef􏷥􏴓1􏴔􏴑size_t􏴒
􏷤s􏷣􏷦stdioLib􏷥􏴓d􏴔􏴑BOOL􏴒


MEMORY MANAGEMENT:
􏷘+􏷗􏷒􏶐􏷑
􏷐Initialize the 􏶐􏷏
􏶠􏶐 will be in an invalid state until initialized􏶡
􏶜r􏶝􏷆void􏷅􏷄value􏷃􏷀the custom value to be stored in the edge􏶿
􏶜􏶝􏷆TypeInformationT􏷅􏷄type info􏷃􏷀type information to specialize 􏶐􏶿
􏶜􏶝􏷆size_t􏷅􏷄vertex id􏷃􏷀the vertex that the edge is pointing to􏶿
􏶴
  􏶲store the custom edge data􏶱
  InitializeAny(&􏵴data􏵵,􏵶value􏵷,􏵶type info􏵷);
  
  􏶲initialize the vertex id􏶱
  􏵴vertex id􏵵 = 􏵶vertex id􏵷;
􏶳

􏷘+􏷗􏷒^􏶐􏷑
􏷐copy the 􏶐 type􏷏
􏶠This function must be called to perform a deep copy on construction􏶡
􏶜r􏶝􏷆void􏷅􏷄self􏷃􏷀the 􏶐 to copy construct from􏶿
􏶴
    􏶲implicit forwarding cast􏶱
    􏵲copy􏵳􏵶self􏵷);
􏶳

􏷘-􏷗􏷒copy􏷑
􏷐copy the 􏶐 type􏷏
􏶠This function must be called to perform a deep copy on construction􏶡
􏶜r􏶝􏷆GraphEdgeT􏷅􏷄self􏷃􏷀the 􏶐 to copy construct from􏶿
􏶴
    􏶲perform deep copy􏶱
    CopyInitializeAnyT(&􏵴data􏵵,&􏵶self􏵷->m_tLocals.m_tData);
    
    􏶲copy over vertex id􏶱
    􏵴vertex id􏵵 = 􏵶self􏵷->m_tLocals.m_uVertexId;
􏶳

􏷘+􏷗􏷒~􏶐􏷑
􏷐Destruct the 􏶐 type􏷏
􏶠This function must be called to free the internal allocated memory before 􏶐 goes out of scope.􏶡
􏶴
    􏶲implicit forwarding cast􏶱
    􏵲destruct􏵳);
􏶳

􏷘-􏷗􏷒destruct􏷑
􏷐Destruct the 􏶐 type􏷏
􏶠This function must be called to free the internal allocated memory before 􏶐 goes out of scope.􏶡
􏶴
    􏶲destruct the custom user data􏶱
    DestructAnyT(&􏵴data􏵵);
    
    􏶲we consider a vertex id of 0 to be invalid􏶱
    􏶲we don't necessarily need to do this,􏶱
    􏶲since the edge should not be used after its destructed􏶱
    􏵴vertex id􏵵 = 0;
􏶳


GETTERS:
􏷘+c􏷗􏷒points to􏷑
􏷐get the vertex id that the edge points to􏷏
􏶠the id can be used against the graph, to get back the connected vertex􏶡
􏶚m􏶛􏶾size_t􏶽􏶼vertex id􏶻􏶺the id of another vertex􏶹
􏶴
    􏶲returns the connected vertex id􏶱
    return 􏵴vertex id􏵵;
􏶳

􏷘+􏷗􏷒data􏷑
􏷐get the custom data of the edge􏷏
􏶠returned to the client so they can observe/modify the custom edge data􏶡
􏶚m􏶛􏶾AnyT*􏶽􏶼custom data􏶻􏶺the custom data of the edge􏶹
􏶴
    􏶲returns the custom data of the edge􏶱
    return &􏵴data􏵵;
􏶳

􏷘+c􏷗􏷒raw data􏷑
􏷐get the custom data of the edge􏷏
􏶠returned to the client so they can observe/modify the custom edge data􏶡
􏶚m􏶛􏶾void*􏶽􏶼custom data􏶻􏶺the custom data of the edge􏶹
􏶴
    􏶲returns the custom data of the edge􏶱
    return AnyGet(&􏵴data􏵵);
􏶳

􏶨the client specified data of the edge􏶧
􏶦The user chooses what a edge means, and the graph stores it alongside the id to the actual vertex􏶥
􏶘-􏶙􏶮AnyT􏶭􏶬data􏶫􏶪􏶩

􏶨The vertex that the edge is connected to􏶧
􏶦The id can be queried against the graph, to get back the connected vertex􏶥
􏶘-􏶙􏶮size_t􏶭􏶬vertex id􏶫􏶪􏶩