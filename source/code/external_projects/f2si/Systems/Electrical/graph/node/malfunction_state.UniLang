􏶞p􏶟
􏷲The malfunction state of the node􏷱
􏷰If the node has malfunctioned, the state will indicate this, and provide detail about the malfunction􏷯
􏷮Electrical􏷭 􏷮Node􏷭
􏷬Trevor Hickey􏷫

􏷤􏷣􏷦ascii_string􏷥􏴓d􏴔􏴑AsciiStringT􏴒
􏷤􏷣􏷦json􏷥􏴓d􏴔􏴑JSON_Object􏴒


CONSTRUCTOR:
􏷘+􏷗􏷒􏶐􏷑
􏴅memory management􏴆
􏷐Initialize the 􏶐􏷏
􏶠􏶐 will be in an invalid state until initialized􏶡
􏶴
  􏶲the node initializes without any malfunctions􏶱
  􏵴has malfunctioned􏵵 = FALSE;
  InitializeAsciiString(&􏵴malfunction reason􏵵,"");
  
􏶳

􏷘+􏷗􏷒^􏶐􏷑
􏴅memory management􏴆
􏷐Copy constructor for 􏶐􏷏
􏶠Performs the necessary deep copy􏶡
􏶜r􏶝􏷆void􏷅􏷄self􏷃􏷀the 􏶐 to copy construct from􏶿
􏶴
    􏶲implicit forwarding casts􏶱
    􏵲perform necessary deep copies􏵳􏵶self􏵷);
    􏵲perform necessary shallow copies􏵳􏵶self􏵷);
􏶳

􏷘+􏷗􏷒~􏶐􏷑
􏴅memory management􏴆
􏷐Destruct the 􏶐􏷏
􏶠􏶐 will leak memory unless destructed􏶡
􏶴
  􏶲implicit forwarding cast􏶱
  􏵲destruct􏵳);
􏶳

􏷘-􏷗􏷒destruct􏷑
􏴅memory management􏴆
􏷐Destruct the 􏶐􏷏
􏶠􏶐 will leak memory unless destructed􏶡
􏶴
  􏶲C does not have destructors.􏶱
  DestructAsciiStringT(&􏵴malfunction reason􏵵);
􏶳


􏷘-􏷗􏷒perform necessary deep copies􏷑
􏴅memory management􏴆
􏷐perform the necessary deep copies􏷏
􏶠performs deep copies on only the dynamically allocating data members􏶡
􏶜r􏶝􏷆MalfunctionStateT􏷅􏷄self􏷃􏷀the 􏶐 to copy construct from􏶿
􏶴
    􏶲perform deep copy􏶱
    CopyInitializeAsciiStringT(&􏵴malfunction reason􏵵,&􏵶self􏵷->m_tMalfunctionReason);
􏶳

􏷘-􏷗􏷒perform necessary shallow copies􏷑
􏴅memory management􏴆
􏷐perform the necessary deep copies􏷏
􏶠performs deep copies on only the dynamically allocating data members􏶡
􏶜r􏶝􏷆MalfunctionStateT􏷅􏷄self􏷃􏷀the 􏶐 to copy construct from􏶿
􏶴
    􏶲perform shallow copies􏶱
    􏵴has malfunctioned􏵵 = 􏵶self􏵷->m_bHasMalfunctioned;
􏶳

􏷘+􏷗􏷒activate􏷑
􏴅transformers􏴆
􏷐activate the malfunction on the node􏷏
􏶠This indicates to the user that the node has been "flagged" as being malfunctioned.
The previous malfunction reason will be overwritten.􏶡
􏶜􏶝􏷆char[]􏷅􏷄reason􏷃􏷀the explanation for the node's malfunction􏶿
􏶴
  􏶲flag the node as malfunctioned and assign the reason􏶱
  􏵴has malfunctioned􏵵 = TRUE;
  AsciiStringAssignCString(&􏵴malfunction reason􏵵,􏵶reason􏵷);
􏶳

􏷘+􏷗􏷒deactivate􏷑
􏴅transformers􏴆
􏷐deactivate the malfunction on the node􏷏
􏶠This indicates to the user that the node device is working as expected
Any previous malfunction reason will be cleared􏶡
􏶴
  􏶲flag the node as working correctly and clear any previous the malfunction reason􏶱
  􏵴has malfunctioned􏵵 = FALSE;
  AsciiStringClear(&􏵴malfunction reason􏵵);
􏶳


DATA:
􏶨􏶧􏶦whether or not the node has malfunctioned􏶥
􏶘-gip~=􏶙􏶮bool􏶭􏶬has malfunctioned􏶫􏵚􏵛􏶪0􏶩
􏳷==􏳸􏳵􏵰􏳶􏳳==􏳴􏳱􏵱􏳲􏳯has malfunctioned􏳰
􏳷==􏳸􏳵􏵱􏳶􏳳==􏳴􏳱􏵰􏳲􏳯is no longer malfunctioned􏳰

􏶨􏶧􏶦the reason the node has malfunctioned􏶥
􏶘-gip~=􏶙􏶮AsciiStringT􏶭􏶬malfunction reason􏶫􏵚􏵛􏶪0􏶩
