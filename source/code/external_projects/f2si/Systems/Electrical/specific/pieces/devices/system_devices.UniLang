􏶞p􏶟
􏷲The 􏶏 specific to the UH72A DC power system.􏷱
􏷰Stores a collection of 􏶏 and builds them into the generic electrical graph.􏷯
􏷮Electrical_System􏷭 􏷮System_Devices􏷭
􏷬Trevor Hickey􏷫

􏷤􏷣􏷦stddef􏷥􏴓1􏴔􏴑size_t􏴒
􏷤􏷣􏷦ElectricalGraph􏷥􏴓d􏴔􏴑ElectricalGraphT􏴒
􏷤􏷣􏷦AvionicsDevices􏷥􏴓1􏴔􏴑AvionicsDevicesT􏴒
􏷤􏷣􏷦EngineDevices􏷥􏴓1􏴔􏴑EngineDevicesT􏴒
􏷤􏷣􏷦FireDevices􏷥􏴓1􏴔􏴑FireDevicesT􏴒
􏷤􏷣􏷦FlightControlDevices􏷥􏴓1􏴔􏴑FlightControlDevicesT􏴒
􏷤􏷣􏷦FlightGuidanceDevices􏷥􏴓1􏴔􏴑FlightGuidancesDevicesT􏴒
􏷤􏷣􏷦FuelDevices􏷥􏴓1􏴔􏴑FuelDevicesT􏴒
􏷤􏷣􏷦HydraulicDevices􏷥􏴓1􏴔􏴑HydraulicDevicesT􏴒
􏷤􏷣􏷦LightingDevices􏷥􏴓1􏴔􏴑LightingDevicesT􏴒
􏷤􏷣􏷦MepDevices􏷥􏴓1􏴔􏴑MepDevicesT􏴒
􏷤􏷣􏷦PneumaticDevices􏷥􏴓1􏴔􏴑PneumaticDevicesT􏴒
􏷤􏷣􏷦RadioDevices􏷥􏴓1􏴔􏴑RadioDevicesT􏴒




􏷘+􏷗􏷒􏶐􏷑
􏷐Initialize the 􏶐􏷏
􏶠􏶐 will be in an invalid state until initialized.
Initializing a 􏶐 will construct all of its nodes into the generic electrical graph.
It will store the IDs given back by the graph so that they may be queried later by the user.􏶡
􏶜mr􏶝􏷆ElectricalGraphT􏷅􏷄graph􏷃􏷀A generic electrical graph that the 􏶏 will construct its nodes into.􏶿
􏶜􏶝􏷆char[]􏷅􏷄tag name􏷃􏷀a unique tag name for the following stored nodes􏶿
􏶴
  􏶲create all the internal nodes inside the graph data structure􏶱
  􏵲create nodes􏵳􏵶graph􏵷,􏵶tag name􏵷);
􏶳


􏷘-􏷗􏷒create nodes􏷑
􏷐Constructs all of the electrical components into the generic electrical graph data structure.􏷏
􏶠This will give all of the node a valid id for querying the graph later.􏶡
􏶜mr􏶝􏷆ElectricalGraphT􏷅􏷄graph􏷃􏷀A generic electrical graph that the 􏶏 will construct its nodes into.􏶿
􏶜􏶝􏷆char[]􏷅􏷄tag name􏷃􏷀a unique tag name for the following stored nodes􏶿
􏶴
  􏶲create all of the vertices that are part of the 􏶐􏶱
  
  􏶲add nodes to graph􏶱
  
  􏶲create avionics tag􏶱
  AsciiStringT tNewTag = ConstructAsciiString(􏵶tag name􏵷);
  AsciiStringAppendCString(&tNewTag,",Avionics");
  
  􏶲create avionics􏶱
  InitializeAvionicsDevices(&􏵴avionics􏵵,􏵶graph􏵷,AsciiStringCStr(&tNewTag));
  
  􏶲create engine tag􏶱
  AsciiStringAssignCString(&tNewTag,􏵶tag name􏵷);
  AsciiStringAppendCString(&tNewTag,",Engine");
  
  􏶲create engine􏶱
  InitializeEngineDevices(&􏵴engine􏵵,􏵶graph􏵷,AsciiStringCStr(&tNewTag));
  
  􏶲create fire tag􏶱
  AsciiStringAssignCString(&tNewTag,􏵶tag name􏵷);
  AsciiStringAppendCString(&tNewTag,",Fire");
  
  􏶲create fire􏶱
  InitializeFireDevices(&􏵴fire􏵵,􏵶graph􏵷,AsciiStringCStr(&tNewTag));
  
  􏶲create flight control tag􏶱
  AsciiStringAssignCString(&tNewTag,􏵶tag name􏵷);
  AsciiStringAppendCString(&tNewTag,",Flight Control");
  
  􏶲create flight control􏶱
  InitializeFlightControlDevices(&􏵴flight control􏵵,􏵶graph􏵷,AsciiStringCStr(&tNewTag));
  
  􏶲create flight guidance tag􏶱
  AsciiStringAssignCString(&tNewTag,􏵶tag name􏵷);
  AsciiStringAppendCString(&tNewTag,",Flight Guidance");
  
  􏶲create flight guidance􏶱
  InitializeFlightGuidanceDevices(&􏵴flight guidance􏵵,􏵶graph􏵷,AsciiStringCStr(&tNewTag));
  
  􏶲create fuel tag􏶱
  AsciiStringAssignCString(&tNewTag,􏵶tag name􏵷);
  AsciiStringAppendCString(&tNewTag,",Fuel");
  
  􏶲create fuel􏶱
  InitializeFuelDevices(&􏵴fuel􏵵,􏵶graph􏵷,AsciiStringCStr(&tNewTag));
  
  􏶲create hydraulic tag􏶱
  AsciiStringAssignCString(&tNewTag,􏵶tag name􏵷);
  AsciiStringAppendCString(&tNewTag,",Hydraulic");
  
  􏶲create hydraulic􏶱
  InitializeHydraulicDevices(&􏵴hydraulic􏵵,􏵶graph􏵷,AsciiStringCStr(&tNewTag));
  
  􏶲create lighting tag􏶱
  AsciiStringAssignCString(&tNewTag,􏵶tag name􏵷);
  AsciiStringAppendCString(&tNewTag,",Lighting");
  
  􏶲create lighting􏶱
  InitializeLightingDevices(&􏵴lighting􏵵,􏵶graph􏵷,AsciiStringCStr(&tNewTag));
  
  􏶲create mep tag􏶱
  AsciiStringAssignCString(&tNewTag,􏵶tag name􏵷);
  AsciiStringAppendCString(&tNewTag,",MEP");
  
  􏶲create mep􏶱
  InitializeMepDevices(&􏵴mep􏵵,􏵶graph􏵷,AsciiStringCStr(&tNewTag));
  
  􏶲create pneumatic tag􏶱
  AsciiStringAssignCString(&tNewTag,􏵶tag name􏵷);
  AsciiStringAppendCString(&tNewTag,",Pneumatic");
  
  􏶲create pneumatic􏶱
  InitializePneumaticDevices(&􏵴pneumatic􏵵,􏵶graph􏵷,AsciiStringCStr(&tNewTag));
  
  􏶲create radio tag􏶱
  AsciiStringAssignCString(&tNewTag,􏵶tag name􏵷);
  AsciiStringAppendCString(&tNewTag,",Radio");
  
  􏶲create radio􏶱
  InitializeRadioDevices(&􏵴radio􏵵,􏵶graph􏵷,AsciiStringCStr(&tNewTag));
  
  􏶲destruct local tag􏶱
  DestructAsciiStringT(&tNewTag);
􏶳

􏷘+􏷗􏷒^􏶐􏷑
􏷐Copy constructor for 􏶐􏷏
􏶠Performs the necessary deep copy􏶡
􏶜r􏶝􏷆void􏷅􏷄self􏷃􏷀the 􏶐 to copy construct􏶿
􏶴
  􏶲implicit forwarding cast􏶱
  􏵲copy􏵳􏵶self􏵷);
􏶳
􏷘-􏷗􏷒copy􏷑
􏷐Copy constructor for 􏶐􏷏
􏶠Performs the necessary deep copy􏶡
􏶜r􏶝􏷆SystemDevicesT􏷅􏷄self􏷃􏷀the 􏶐 to copy construct􏶿
􏶴
  􏶲perform deep copy􏶱
  CopyInitializeFlightGuidanceDevicesT(&􏵴flight guidance􏵵,&􏵶self􏵷->m_tFlightGuidance);
    
  􏶲perform shallow copy􏶱
  􏵴avionics􏵵 = 􏵶self􏵷->m_tAvionics;
  􏵴engine􏵵 = 􏵶self􏵷->m_tEngine;
  􏵴fire􏵵 = 􏵶self􏵷->m_tFire;
  􏵴flight control􏵵 = 􏵶self􏵷->m_tFlightControl;
  􏵴fuel􏵵 = 􏵶self􏵷->m_tFuel;
  􏵴hydraulic􏵵 = 􏵶self􏵷->m_tHydraulic;
  􏵴lighting􏵵 = 􏵶self􏵷->m_tLighting;
  􏵴mep􏵵 = 􏵶self􏵷->m_tMep;
  􏵴pneumatic􏵵 = 􏵶self􏵷->m_tPneumatic;
  􏵴radio􏵵 = 􏵶self􏵷->m_tRadio;
􏶳
􏷘+􏷗􏷒~􏶐􏷑
􏷐Destruct the 􏶐􏷏
􏶠􏶐 will leak memory unless destructed􏶡
􏶴
  􏶲destruct􏶱
  􏵲destruct􏵳);
􏶳
􏷘-􏷗􏷒destruct􏷑
􏷐Destruct the 􏶐􏷏
􏶠􏶐 will leak memory unless destructed􏶡
􏶴
  􏶲C does not have destructors.􏶱
  DestructFlightGuidanceDevicesT(&􏵴flight guidance􏵵);
􏶳

􏶨all of the avionic devices􏶧
􏶦a node representation of the devices are stored in the graph􏶥
􏶘-g􏶙􏶰􏶯􏶮AvionicsDevicesT􏶭􏶬avionics􏶫􏶪0􏶩

􏶨all of the engine devices􏶧
􏶦a node representation of the devices are stored in the graph􏶥
􏶘-g􏶙􏶰􏶯􏶮EngineDevicesT􏶭􏶬engine􏶫􏶪0􏶩

􏶨all of the fire devices􏶧
􏶦a node representation of the devices are stored in the graph􏶥
􏶘-g􏶙􏶰􏶯􏶮FireDevicesT􏶭􏶬fire􏶫􏶪0􏶩

􏶨all of the flight control devices􏶧
􏶦a node representation of the devices are stored in the graph􏶥
􏶘-g􏶙􏶰􏶯􏶮FlightControlDevicesT􏶭􏶬flight control􏶫􏶪0􏶩

􏶨all of the flight guidance devices􏶧
􏶦a node representation of the devices are stored in the graph􏶥
􏶘-g􏶙􏶰􏶯􏶮FlightGuidanceDevicesT􏶭􏶬flight guidance􏶫􏶪0􏶩

􏶨all of the fuel devices devices􏶧
􏶦a node representation of the devices are stored in the graph􏶥
􏶘-g􏶙􏶰􏶯􏶮FuelDevicesT􏶭􏶬fuel􏶫􏶪0􏶩

􏶨all of the hydraulic devices devices􏶧
􏶦a node representation of the devices are stored in the graph􏶥
􏶘-g􏶙􏶰􏶯􏶮HydraulicDevicesT􏶭􏶬hydraulic􏶫􏶪0􏶩

􏶨all of the lighting devices devices􏶧
􏶦a node representation of the devices are stored in the graph􏶥
􏶘-g􏶙􏶰􏶯􏶮LightingDevicesT􏶭􏶬lighting􏶫􏶪0􏶩

􏶨all of the MEP devices devices􏶧
􏶦a node representation of the devices are stored in the graph􏶥
􏶘-g􏶙􏶰􏶯􏶮MepDevicesT􏶭􏶬mep􏶫􏶪0􏶩

􏶨all of the pneumatic devices devices􏶧
􏶦a node representation of the devices are stored in the graph􏶥
􏶘-g􏶙􏶰􏶯􏶮PneumaticDevicesT􏶭􏶬pneumatic􏶫􏶪0􏶩

􏶨all of the radio devices devices􏶧
􏶦a node representation of the devices are stored in the graph􏶥
􏶘-g􏶙􏶰􏶯􏶮RadioDevicesT􏶭􏶬radio􏶫􏶪0􏶩