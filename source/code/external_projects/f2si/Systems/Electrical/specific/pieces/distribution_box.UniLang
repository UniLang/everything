􏶞p􏶟
􏷲A 􏶏 specific to the UH72A DC power system.􏷱
􏷰Stores a collection of 􏶏 node IDs and builds them into the generic electrical graph.􏷯
􏷮Electrical_System􏷭 􏷮Circuit_Box􏷭
􏷬Trevor Hickey􏷫

􏷤􏷣􏷦stddef􏷥􏴓1􏴔􏴑size_t􏴒
􏷤􏷣􏷦norm_open_relay􏷥􏴓1􏴔􏴑NormOpenRelayT􏴒
􏷤􏷣􏷦ElectricalGraph􏷥􏴓d􏴔􏴑ElectricalGraphT􏴒
􏶔􏶕􏶒string􏶓􏴏d􏴐􏴍strcpy()􏴎

􏷘+􏷗􏷒􏶐􏷑
􏷐Initialize the 􏶐􏷏
􏶠􏶐 will be in an invalid state until initialized.
Initializing a 􏶐 will construct all of its nodes into the generic electrical graph.
It will store the IDs given back by the graph so that they may be queried later by the user.􏶡
􏶜mr􏶝􏷆ElectricalGraphT􏷅􏷄graph􏷃􏷀A generic electrical graph that the 􏶏 will construct its nodes into.􏶿
􏶜􏶝􏷆char[]􏷅􏷄tag name􏷃􏷀a unique tag name for the following stored nodes􏶿
􏶴
  􏶲create all the internal nodes inside the graph data structure􏶱
  􏵲create nodes􏵳􏵶graph􏵷,􏵶tag name􏵷);
  
  􏶲connect these newly created nodes􏶱
  􏵲create wires􏵳􏵶graph􏵷);
􏶳

􏷘-􏷗􏷒create nodes􏷑
􏷐Constructs all of the electrical components into the generic electrical graph data structure.􏷏
􏶠This will give all of the node a valid id for querying the graph later.􏶡
􏶜mr􏶝􏷆ElectricalGraphT􏷅􏷄graph􏷃􏷀A generic electrical graph that the 􏶏 will construct its nodes into.􏶿
􏶜􏶝􏷆char[]􏷅􏷄tag name􏷃􏷀a unique tag name for the following stored nodes􏶿
􏶴
  􏶲create all of the vertices that are part of the 􏶐􏶱
  
  􏶲add nodes to graph􏶱
  􏵴main bus􏵵 = ElectricalGraphAddBus(􏵶graph􏵷,"main bus",􏵶tag name􏵷,0.0f,28.5f,CAN_BE_POWERED_YES);
  􏵴fuse 1􏵵 = ElectricalGraphAddFuse(􏵶graph􏵷,"fuse 1",􏵶tag name􏵷,0.0f,0.0f,CAN_BE_POWERED_YES);
  􏵴fuse 2􏵵 = ElectricalGraphAddFuse(􏵶graph􏵷,"fuse 2",􏵶tag name􏵷,0.0f,0.0f,CAN_BE_POWERED_YES);
  􏵴fuse 3􏵵 = ElectricalGraphAddFuse(􏵶graph􏵷,"fuse 3",􏵶tag name􏵷,0.0f,0.0f,CAN_BE_POWERED_YES);
  􏵴fuse 4􏵵 = ElectricalGraphAddFuse(􏵶graph􏵷,"fuse 4",􏵶tag name􏵷,0.0f,0.0f,CAN_BE_POWERED_YES);
  􏵴nonessential bus relay􏵵 = ElectricalGraphAddRelay(􏵶graph􏵷,"nonessential bus relay",􏵶tag name􏵷,0.0f,0.0f,CAN_BE_POWERED_NO);
  􏵴shed bus relay􏵵 = ElectricalGraphAddRelay(􏵶graph􏵷,"shed bus relay",􏵶tag name􏵷,0.0f,0.0f,CAN_BE_POWERED_NO);
  􏵴emergency shed indicator􏵵 = ElectricalGraphAddGroundedSensor(􏵶graph􏵷,"emergency shed indicator",􏵶tag name􏵷,0.0f,0.0f,CAN_BE_POWERED_NO);
  􏵴bus tie􏵵 = ElectricalGraphAddNormOpenRelay(􏵶graph􏵷,􏵶tag name􏵷);
􏶳

􏷘-􏷗􏷒create wires􏷑
􏷐Connects all of the necessary 􏶐 nodes together.􏷏
􏶠The nodes being connected will need to be created first.􏶡
􏶜mr􏶝􏷆ElectricalGraphT􏷅􏷄graph􏷃􏷀A generic electrical graph that the 􏶏 will construct its wires into.􏶿
􏶴
  􏶲connect the related components􏶱
  
  􏶲connect two nodes together􏶱
  ElectricalGraphAddNonDirectedWire(􏵶graph􏵷,􏵴main bus􏵵,􏵴fuse 1􏵵);
  ElectricalGraphAddNonDirectedWire(􏵶graph􏵷,􏵴main bus􏵵,􏵴fuse 2􏵵);
  ElectricalGraphAddNonDirectedWire(􏵶graph􏵷,􏵴main bus􏵵,􏵴fuse 3􏵵);
  ElectricalGraphAddNonDirectedWire(􏵶graph􏵷,􏵴main bus􏵵,􏵴fuse 4􏵵);
  ElectricalGraphAddNonDirectedWire(􏵶graph􏵷,􏵴main bus􏵵,􏵴bus tie􏵵.m_uRelay);
  ElectricalGraphAddNonDirectedWire(􏵶graph􏵷,􏵴fuse 1􏵵,􏵴nonessential bus relay􏵵);
  ElectricalGraphAddNonDirectedWire(􏵶graph􏵷,􏵴fuse 2􏵵,􏵴shed bus relay􏵵);
  ElectricalGraphAddNonDirectedWire(􏵶graph􏵷,􏵴emergency shed indicator􏵵,􏵴shed bus relay􏵵);
􏶳

􏶨The ID of a node that is conceptually stored in a 􏶏􏶧
􏶦This ID will be used to query the generic electrical graph
and receive back the actual node object.􏶥
􏶘-g􏶙􏶰􏶯􏶮size_t􏶭􏶬main bus􏶫􏶪0􏶩

􏶨The ID of a node that is conceptually stored in a 􏶏􏶧
􏶦This ID will be used to query the generic electrical graph
and receive back the actual node object.􏶥
􏶘-g􏶙􏶰􏶯􏶮size_t􏶭􏶬fuse 1􏶫􏶪0􏶩

􏶨The ID of a node that is conceptually stored in a 􏶏􏶧
􏶦This ID will be used to query the generic electrical graph
and receive back the actual node object.􏶥
􏶘-g􏶙􏶰􏶯􏶮size_t􏶭􏶬fuse 2􏶫􏶪0􏶩

􏶨The ID of a node that is conceptually stored in a 􏶏􏶧
􏶦This ID will be used to query the generic electrical graph
and receive back the actual node object.􏶥
􏶘-g􏶙􏶰􏶯􏶮size_t􏶭􏶬fuse 3􏶫􏶪0􏶩

􏶨The ID of a node that is conceptually stored in a 􏶏􏶧
􏶦This ID will be used to query the generic electrical graph
and receive back the actual node object.􏶥
􏶘-g􏶙􏶰􏶯􏶮size_t􏶭􏶬fuse 4􏶫􏶪0􏶩

􏶨The ID of a node that is conceptually stored in a 􏶏􏶧
􏶦This ID will be used to query the generic electrical graph
and receive back the actual node object.􏶥
􏶘-g􏶙􏶰􏶯􏶮size_t􏶭􏶬nonessential bus relay􏶫􏶪0􏶩

􏶨The ID of a node that is conceptually stored in a 􏶏􏶧
􏶦This ID will be used to query the generic electrical graph
and receive back the actual node object.􏶥
􏶘-g􏶙􏶰􏶯􏶮size_t􏶭􏶬shed bus relay􏶫􏶪0􏶩

􏶨The ID of a node that is conceptually stored in a 􏶏􏶧
􏶦This ID will be used to query the generic electrical graph
and receive back the actual node object.􏶥
􏶘-g􏶙􏶰􏶯􏶮size_t􏶭􏶬emergency shed indicator􏶫􏶪0􏶩

􏶨The Electrical component stored in a 􏶏􏶧
􏶦contains IDs used to query the generic electrical graph
and receive back the actual node object.􏶥
􏶘-g􏶙􏶰􏶯􏶮NormOpenRelayT􏶭􏶬bus tie􏶫􏶪0􏶩

􏶨The ID of a node that is conceptually stored in a 􏶏􏶧
􏶦This ID will be used to query the generic electrical graph
and receive back the actual node object.􏶥
􏶘-g􏶙􏶰􏶯􏶮size_t􏶭􏶬shed bus􏶫􏶪0􏶩