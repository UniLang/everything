􏶞p􏶟
􏷲The 􏶏 specific to the UH72A DC power system.􏷱
􏷰Stores a collection of 􏶏 and builds them into the generic electrical graph.􏷯
􏷮Electrical_System􏷭 􏷮Flight_Guidance_Devices􏷭
􏷬Trevor Hickey􏷫

􏷤􏷣􏷦stddef􏷥􏴓1􏴔􏴑size_t􏴒
􏷤􏷣􏷦ElectricalGraph􏷥􏴓d􏴔􏴑ElectricalGraphT􏴒
􏶔􏶕􏶒string􏶓􏴏d􏴐􏴍strcpy()􏴎
􏶔􏶕􏶒pole􏶓􏴏d􏴐􏴍PoleT􏴎

􏷘+􏷗􏷒􏶐􏷑
􏷐Initialize the 􏶐􏷏
􏶠􏶐 will be in an invalid state until initialized.
Initializing a 􏶐 will construct all of its nodes into the generic electrical graph.
It will store the IDs given back by the graph so that they may be queried later by the user.􏶡
􏶜mr􏶝􏷆ElectricalGraphT􏷅􏷄graph􏷃􏷀A generic electrical graph that the 􏶏 will construct its nodes into.􏶿
􏶜􏶝􏷆char[]􏷅􏷄tag name􏷃􏷀a unique tag name for the following stored nodes􏶿
􏶴
  􏶲create all the internal nodes inside the graph data structure􏶱
  􏵲create nodes􏵳􏵶graph􏵷,􏵶tag name􏵷);
  
  􏶲connect these newly created nodes􏶱
  􏵲create wires􏵳􏵶graph􏵷);
􏶳

􏷘+􏷗􏷒^􏶐􏷑
􏷐Copy constructor for 􏶐􏷏
􏶠Performs the necessary deep copy􏶡
􏶜r􏶝􏷆void􏷅􏷄self􏷃􏷀the 􏶐 to copy construct􏶿
􏶴
  􏶲implicit forwarding cast􏶱
  􏵲copy􏵳􏵶self􏵷);
􏶳
􏷘-􏷗􏷒copy􏷑
􏷐Copy constructor for 􏶐􏷏
􏶠Performs the necessary deep copy􏶡
􏶜r􏶝􏷆FlightGuidanceDevicesT􏷅􏷄self􏷃􏷀the 􏶐 to copy construct􏶿
􏶴
  􏶲perform deep copy􏶱
  CopyInitializePowerRelayT(&􏵴essential bus 1 ap relay􏵵,&􏵶self􏵷->m_tEssentialBus1ApRelay);
  CopyInitializePowerRelayT(&􏵴essential bus 2 ap relay􏵵,&􏵶self􏵷->m_tEssentialBus2ApRelay);
    
  􏶲perform shallow copy􏶱
  􏵴apms􏵵 = 􏵶self􏵷->m_uApms;
  􏵴autopilot modules􏵵[0] = 􏵶self􏵷->m_puAutopilotModules[0];
  􏵴autopilot modules􏵵[1] = 􏵶self􏵷->m_puAutopilotModules[1];
  􏵴pitch sas􏵵 = 􏵶self􏵷->m_uPitchSas;
  􏵴pitch sema 2􏵵 = 􏵶self􏵷->m_uPitchSema2;
  􏵴roll sas􏵵 = 􏵶self􏵷->m_uRollSas;
  􏵴roll sema 2􏵵 = 􏵶self􏵷->m_uRollSema2;
  􏵴yaw sas􏵵 = 􏵶self􏵷->m_uYawSas;
􏶳
􏷘+􏷗􏷒~􏶐􏷑
􏷐Destruct the 􏶐􏷏
􏶠􏶐 will leak memory unless destructed􏶡
􏶴
  􏶲destruct􏶱
  􏵲destruct􏵳);
􏶳
􏷘-􏷗􏷒destruct􏷑
􏷐Destruct the 􏶐􏷏
􏶠􏶐 will leak memory unless destructed􏶡
􏶴
  􏶲C does not have destructors.􏶱
  DestructPowerRelayT(&􏵴essential bus 1 ap relay􏵵);
  DestructPowerRelayT(&􏵴essential bus 2 ap relay􏵵);
􏶳

􏷘-􏷗􏷒create nodes􏷑
􏷐Constructs all of the electrical components into the generic electrical graph data structure.􏷏
􏶠This will give all of the node a valid id for querying the graph later.􏶡
􏶜mr􏶝􏷆ElectricalGraphT􏷅􏷄graph􏷃􏷀A generic electrical graph that the 􏶏 will construct its nodes into.􏶿
􏶜􏶝􏷆char[]􏷅􏷄tag name􏷃􏷀a unique tag name for the following stored nodes􏶿
􏶴
  􏶲create all of the vertices that are part of the 􏶐􏶱
  
  􏶲add nodes to graph􏶱
  􏵴apms􏵵 = ElectricalGraphAddGroundedDevice(􏵶graph􏵷,"apms",􏵶tag name􏵷,0.0f,11.735f,CAN_BE_POWERED_YES);
  􏵴autopilot modules􏵵[0] = ElectricalGraphAddGroundedDevice(􏵶graph􏵷,"copilot autopilot modules",􏵶tag name􏵷,0.0f,11.735f,CAN_BE_POWERED_YES);
  􏵴autopilot modules􏵵[1] = ElectricalGraphAddGroundedDevice(􏵶graph􏵷,"pilot autopilot modules",􏵶tag name􏵷,0.0f,11.735f,CAN_BE_POWERED_YES);
  􏵴pitch sas􏵵 = ElectricalGraphAddGroundedDevice(􏵶graph􏵷,"pitch sas",􏵶tag name􏵷,0.0f,11.735f,CAN_BE_POWERED_YES);
  􏵴pitch sema 2􏵵 = ElectricalGraphAddGroundedDevice(􏵶graph􏵷,"pitch sema 2",􏵶tag name􏵷,0.0f,11.735f,CAN_BE_POWERED_YES);
  􏵴roll sas􏵵 = ElectricalGraphAddGroundedDevice(􏵶graph􏵷,"roll sas",􏵶tag name􏵷,0.0f,11.735f,CAN_BE_POWERED_YES);
  􏵴roll sema 2􏵵 = ElectricalGraphAddGroundedDevice(􏵶graph􏵷,"roll sema 2",􏵶tag name􏵷,0.0f,11.735f,CAN_BE_POWERED_YES);
  􏵴yaw sas􏵵 = ElectricalGraphAddGroundedDevice(􏵶graph􏵷,"yaw sas",􏵶tag name􏵷,0.0f,11.735f,CAN_BE_POWERED_YES);
  􏵴essential bus 1 ap relay􏵵 = ElectricalGraphAddPowerRelay(􏵶graph􏵷,􏵶tag name􏵷,2);
  􏵴essential bus 2 ap relay􏵵 = ElectricalGraphAddPowerRelay(􏵶graph􏵷,􏵶tag name􏵷,4);
􏶳

􏷘-􏷗􏷒create wires􏷑
􏷐Connects all of the necessary 􏶐 nodes together.􏷏
􏶠The nodes being connected will need to be created first.􏶡
􏶜mr􏶝􏷆ElectricalGraphT􏷅􏷄graph􏷃􏷀A generic electrical graph that the 􏶏 will construct its wires into.􏶿
􏶴
  􏶲connect nodes together􏶱
  􏶲feel free to add any internal system connections here􏶱
  
  􏶲ess bus 1 ap relay connections􏶱
  ElectricalGraphAddDirectedWire(􏵶graph􏵷,((PoleT*)VectorAt(&􏵴essential bus 1 ap relay􏵵.m_tPoles,0))->m_uOpenTerminal,􏵴roll sas􏵵);
  ElectricalGraphAddDirectedWire(􏵶graph􏵷,((PoleT*)VectorAt(&􏵴essential bus 1 ap relay􏵵.m_tPoles,1))->m_uOpenTerminal,􏵴pitch sas􏵵);
  
  􏶲ess bus 2 ap relay connections􏶱
  ElectricalGraphAddDirectedWire(􏵶graph􏵷,((PoleT*)VectorAt(&􏵴essential bus 2 ap relay􏵵.m_tPoles,0))->m_uOpenTerminal,􏵴roll sema 2􏵵);
  ElectricalGraphAddDirectedWire(􏵶graph􏵷,((PoleT*)VectorAt(&􏵴essential bus 2 ap relay􏵵.m_tPoles,1))->m_uOpenTerminal,􏵴pitch sema 2􏵵);
  ElectricalGraphAddDirectedWire(􏵶graph􏵷,((PoleT*)VectorAt(&􏵴essential bus 2 ap relay􏵵.m_tPoles,2))->m_uOpenTerminal,􏵴yaw sas􏵵);
  ElectricalGraphAddDirectedWire(􏵶graph􏵷,((PoleT*)VectorAt(&􏵴essential bus 2 ap relay􏵵.m_tPoles,3))->m_uOpenTerminal,􏵴autopilot modules􏵵[0]); //(master)
􏶳

􏶨the autopilot relay for essential bus 1􏶧
􏶘-g􏶙􏶰􏶯􏶮PowerRelayT􏶭􏶬essential bus 1 ap relay􏶫􏶪0􏶩

􏶨the autopilot relay for essential bus 2􏶧
􏶘-g􏶙􏶰􏶯􏶮PowerRelayT􏶭􏶬essential bus 2 ap relay􏶫􏶪0􏶩

􏶨􏶧􏶦􏶥􏶘-g􏶙􏶰􏶯􏶮size_t􏶭􏶬apms􏶫􏶪0􏶩
􏶨􏶧􏶦􏶥􏶘-g􏶙􏶰􏶯􏶮size_t[2]􏶭􏶬autopilot modules􏶫􏶪0􏶩
􏶨􏶧􏶦􏶥􏶘-g􏶙􏶰􏶯􏶮size_t􏶭􏶬pitch sas􏶫􏶪0􏶩
􏶨􏶧􏶦􏶥􏶘-g􏶙􏶰􏶯􏶮size_t􏶭􏶬pitch sema 2􏶫􏶪0􏶩
􏶨􏶧􏶦􏶥􏶘-g􏶙􏶰􏶯􏶮size_t􏶭􏶬roll sas􏶫􏶪0􏶩
􏶨􏶧􏶦􏶥􏶘-g􏶙􏶰􏶯􏶮size_t􏶭􏶬roll sema 2􏶫􏶪0􏶩
􏶨􏶧􏶦􏶥􏶘-g􏶙􏶰􏶯􏶮size_t􏶭􏶬yaw sas􏶫􏶪0􏶩