􏶞p􏶟
􏷲The 􏶏 specific to the UH72A DC power system.􏷱
􏷰Stores a collection of 􏶏 and builds them into the generic electrical graph.􏷯
􏷮Electrical_System􏷭 􏷮Lighting_Devices􏷭
􏷬Trevor Hickey􏷫

􏷤􏷣􏷦stddef􏷥􏴓1􏴔􏴑size_t􏴒
􏷤􏷣􏷦ElectricalGraph􏷥􏴓d􏴔􏴑ElectricalGraphT􏴒
􏶔􏶕􏶒string􏶓􏴏d􏴐􏴍strcpy()􏴎

􏷘+􏷗􏷒􏶐􏷑
􏷐Initialize the 􏶐􏷏
􏶠􏶐 will be in an invalid state until initialized.
Initializing a 􏶐 will construct all of its nodes into the generic electrical graph.
It will store the IDs given back by the graph so that they may be queried later by the user.􏶡
􏶜mr􏶝􏷆ElectricalGraphT􏷅􏷄graph􏷃􏷀A generic electrical graph that the 􏶏 will construct its nodes into.􏶿
􏶜􏶝􏷆char[]􏷅􏷄tag name􏷃􏷀a unique tag name for the following stored nodes􏶿
􏶴
  􏶲create all the internal nodes inside the graph data structure􏶱
  􏵲create nodes􏵳􏵶graph􏵷,􏵶tag name􏵷);
  
  􏶲connect these newly created nodes􏶱
  􏵲create wires􏵳􏵶graph􏵷);
􏶳

􏷘-􏷗􏷒create nodes􏷑
􏷐Constructs all of the electrical components into the generic electrical graph data structure.􏷏
􏶠This will give all of the node a valid id for querying the graph later.􏶡
􏶜mr􏶝􏷆ElectricalGraphT􏷅􏷄graph􏷃􏷀A generic electrical graph that the 􏶏 will construct its nodes into.􏶿
􏶜􏶝􏷆char[]􏷅􏷄tag name􏷃􏷀a unique tag name for the following stored nodes􏶿
􏶴
  􏶲create all of the vertices that are part of the 􏶐􏶱
  
  􏶲lighting devices􏶱
  􏵴map􏵵 = ElectricalGraphAddGroundedLight(􏵶graph􏵷,"map",􏵶tag name􏵷,0.0f,11.735f,CAN_BE_POWERED_YES);
  􏵴position􏵵 = ElectricalGraphAddGroundedLight(􏵶graph􏵷,"position",􏵶tag name􏵷,0.0f,11.735f,CAN_BE_POWERED_YES);
  􏵴anti collision􏵵 = ElectricalGraphAddGroundedLight(􏵶graph􏵷,"anti collision",􏵶tag name􏵷,0.0f,11.735f,CAN_BE_POWERED_YES);
  􏵴landing􏵵 = ElectricalGraphAddGroundedLight(􏵶graph􏵷,"landing",􏵶tag name􏵷,0.0f,11.735f,CAN_BE_POWERED_YES);
  􏵴landing search􏵵 = ElectricalGraphAddGroundedLight(􏵶graph􏵷,"landing search",􏵶tag name􏵷,0.0f,80.32f,CAN_BE_POWERED_YES);
  􏵴standby horizon􏵵 = ElectricalGraphAddGroundedLight(􏵶graph􏵷,"standby horizon",􏵶tag name􏵷,0.0f,11.735f,CAN_BE_POWERED_YES);
  􏵴pilot ls controls􏵵 = ElectricalGraphAddGroundedLight(􏵶graph􏵷,"pilot ls controls",􏵶tag name􏵷,0.0f,80.32f,CAN_BE_POWERED_YES);
  􏵴copilot ls controls􏵵 = ElectricalGraphAddGroundedLight(􏵶graph􏵷,"copilot ls controls",􏵶tag name􏵷,0.0f,80.32f,CAN_BE_POWERED_YES);
  􏵴instruments on􏵵 = ElectricalGraphAddGroundedLight(􏵶graph􏵷,"instruments on",􏵶tag name􏵷,0.0f,11.735f,CAN_BE_POWERED_YES);
  􏵴instruments nvg􏵵 = ElectricalGraphAddGroundedLight(􏵶graph􏵷,"instruments nvg",􏵶tag name􏵷,0.0f,11.735f,CAN_BE_POWERED_YES);
  􏵴instrument lights􏵵 = ElectricalGraphAddGroundedLight(􏵶graph􏵷,"instrument lights",􏵶tag name􏵷,0.0f,11.735f,CAN_BE_POWERED_YES);
  􏵴emergency exit􏵵 = ElectricalGraphAddGroundedLight(􏵶graph􏵷,"emergency exit",􏵶tag name􏵷,0.0f,1.0f,CAN_BE_POWERED_YES);
  􏵴ls16 search light􏵵 = ElectricalGraphAddGroundedLight(􏵶graph􏵷,"ls16 search light",􏵶tag name􏵷,0.0f,1681.0f,CAN_BE_POWERED_YES);
  􏵴ls16 controller􏵵 = ElectricalGraphAddGroundedDevice(􏵶graph􏵷,"ls16 controller",􏵶tag name􏵷,0.0f,180.5f,CAN_BE_POWERED_YES);
  􏵴mx15 camera􏵵 = ElectricalGraphAddGroundedCamera(􏵶graph􏵷,"mx15 camera",􏵶tag name􏵷,0.0f,370.5f,CAN_BE_POWERED_YES);
  􏵴instrument switch􏵵 = ElectricalGraphAddGroundedSwitch(􏵶graph􏵷,"instrument switch",􏵶tag name􏵷,0.0f,1.0f,CAN_BE_POWERED_YES);
  􏵴laser arm panel􏵵 = ElectricalGraphAddGroundedDevice(􏵶graph􏵷,"laser arm panel",􏵶tag name􏵷,0.0f,1.0f,CAN_BE_POWERED_YES);
  
  􏶲emergency battery related􏶱
  􏵴emergency battery􏵵 = ElectricalGraphAddGroundedBattery(􏵶graph􏵷,"emergency battery",􏵶tag name􏵷,0.0f,1.0f,CAN_BE_POWERED_YES);
  􏵴emergency battery relay􏵵 = ElectricalGraphAddRelay(􏵶graph􏵷,"emergency battery relay",􏵶tag name􏵷,0.0f,1.0f,CAN_BE_POWERED_NO);
  􏵴emergency battery test relay􏵵 = ElectricalGraphAddRelay(􏵶graph􏵷, "emergency battery test relay", 􏵶tag name􏵷, 0.0f, 1.0f, CAN_BE_POWERED_NO);
  􏵴battery test green􏵵 = ElectricalGraphAddGroundedLight(􏵶graph􏵷,"battery test green",􏵶tag name􏵷,0.0f,1.0f,CAN_BE_POWERED_YES);
  􏵴battery test red􏵵 = ElectricalGraphAddGroundedLight(􏵶graph􏵷,"battery test red",􏵶tag name􏵷,0.0f,1.0f,CAN_BE_POWERED_YES);
  􏵴discharge sensor􏵵 = ElectricalGraphAddGroundedSensor(􏵶graph􏵷,"discharge sensor",􏵶tag name􏵷,0.0f,1.0f,CAN_BE_POWERED_YES);
􏶳

􏷘-􏷗􏷒create wires􏷑
􏷐Connects all of the necessary 􏶐 nodes together.􏷏
􏶠The nodes being connected will need to be created first.􏶡
􏶜mr􏶝􏷆ElectricalGraphT􏷅􏷄graph􏷃􏷀A generic electrical graph that the 􏶏 will construct its wires into.􏶿
􏶴
  􏶲connect nodes together􏶱
  􏶲feel free to add any internal system connections here􏶱
􏶳

􏶨􏶧􏶦􏶥􏶘-g􏶙􏶰􏶯􏶮size_t􏶭􏶬map􏶫􏶪0􏶩
􏶨􏶧􏶦􏶥􏶘-g􏶙􏶰􏶯􏶮size_t􏶭􏶬position􏶫􏶪0􏶩
􏶨􏶧􏶦􏶥􏶘-g􏶙􏶰􏶯􏶮size_t􏶭􏶬anti collision􏶫􏶪0􏶩
􏶨􏶧􏶦􏶥􏶘-g􏶙􏶰􏶯􏶮size_t􏶭􏶬landing􏶫􏶪0􏶩
􏶨􏶧􏶦􏶥􏶘-g􏶙􏶰􏶯􏶮size_t􏶭􏶬landing search􏶫􏶪0􏶩
􏶨􏶧􏶦􏶥􏶘-g􏶙􏶰􏶯􏶮size_t􏶭􏶬standby horizon􏶫􏶪0􏶩
􏶨􏶧􏶦􏶥􏶘-g􏶙􏶰􏶯􏶮size_t􏶭􏶬pilot ls controls􏶫􏶪0􏶩
􏶨􏶧􏶦􏶥􏶘-g􏶙􏶰􏶯􏶮size_t􏶭􏶬copilot ls controls􏶫􏶪0􏶩
􏶨􏶧􏶦􏶥􏶘-g􏶙􏶰􏶯􏶮size_t􏶭􏶬instruments on􏶫􏶪0􏶩
􏶨􏶧􏶦􏶥􏶘-g􏶙􏶰􏶯􏶮size_t􏶭􏶬instruments nvg􏶫􏶪0􏶩
􏶨􏶧􏶦􏶥􏶘-g􏶙􏶰􏶯􏶮size_t􏶭􏶬instrument lights􏶫􏶪0􏶩
􏶨􏶧􏶦􏶥􏶘-g􏶙􏶰􏶯􏶮size_t􏶭􏶬emergency exit􏶫􏶪0􏶩
􏶨􏶧􏶦􏶥􏶘-g􏶙􏶰􏶯􏶮size_t􏶭􏶬ls16 search light􏶫􏶪0􏶩
􏶨􏶧􏶦􏶥􏶘-g􏶙􏶰􏶯􏶮size_t􏶭􏶬ls16 controller􏶫􏶪0􏶩
􏶨􏶧􏶦􏶥􏶘-g􏶙􏶰􏶯􏶮size_t􏶭􏶬mx15 camera􏶫􏶪0􏶩
􏶨􏶧􏶦􏶥􏶘-g􏶙􏶰􏶯􏶮size_t􏶭􏶬instrument switch􏶫􏶪0􏶩
􏶨􏶧􏶦􏶥􏶘-g􏶙􏶰􏶯􏶮size_t􏶭􏶬laser arm panel􏶫􏶪0􏶩

􏶨􏶧􏶦􏶥􏶘-g􏶙􏶰􏶯􏶮size_t􏶭􏶬emergency battery􏶫􏶪0􏶩
􏶨􏶧􏶦􏶥􏶘-g􏶙􏶰􏶯􏶮size_t􏶭􏶬emergency battery relay􏶫􏶪0􏶩
􏶨􏶧􏶦􏶥􏶘-g􏶙􏶰􏶯􏶮size_t􏶭􏶬emergency battery test relay􏶫􏶪0􏶩
􏶨􏶧􏶦􏶥􏶘-g􏶙􏶰􏶯􏶮size_t􏶭􏶬battery test green􏶫􏶪0􏶩
􏶨􏶧􏶦􏶥􏶘-g􏶙􏶰􏶯􏶮size_t􏶭􏶬battery test red􏶫􏶪0􏶩
􏶨􏶧􏶦􏶥􏶘-g􏶙􏶰􏶯􏶮size_t􏶭􏶬discharge sensor􏶫􏶪0􏶩



