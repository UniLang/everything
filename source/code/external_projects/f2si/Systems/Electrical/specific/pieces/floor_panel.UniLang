􏶞p􏶟
􏷲A 􏶏 specific to the UH72A DC power system.􏷱
􏷰Stores a collection of 􏶏 node IDs and builds them into the generic electrical graph.􏷯
􏷮Electrical_System􏷭 􏷮Floor_Panel􏷭
􏷬Trevor Hickey􏷫

􏷤􏷣􏷦stddef􏷥􏴓1􏴔􏴑size_t􏴒
􏷤􏷣􏷦ElectricalGraph􏷥􏴓d􏴔􏴑ElectricalGraphT􏴒
􏶔􏶕􏶒string􏶓􏴏d􏴐􏴍strcpy()􏴎

􏷘+􏷗􏷒􏶐􏷑
􏷐Initialize the 􏶐􏷏
􏶠􏶐 will be in an invalid state until initialized.
Initializing a 􏶐 will construct all of its nodes into the generic electrical graph.
It will store the IDs given back by the graph so that they may be queried later by the user.􏶡
􏶜mr􏶝􏷆ElectricalGraphT􏷅􏷄graph􏷃􏷀A generic electrical graph that the 􏶏 will construct its nodes into.􏶿
􏶜􏶝􏷆char[]􏷅􏷄tag name􏷃􏷀a unique tag name for the following stored nodes􏶿
􏶴
  􏶲create all the internal nodes inside the graph data structure􏶱
  􏵲create nodes􏵳􏵶graph􏵷,􏵶tag name􏵷);
  
  􏶲connect these newly created nodes􏶱
  􏵲create wires􏵳􏵶graph􏵷);
􏶳

􏷘-􏷗􏷒create nodes􏷑
􏷐Constructs all of the electrical components into the generic electrical graph data structure.􏷏
􏶠This will give all of the node a valid id for querying the graph later.􏶡
􏶜mr􏶝􏷆ElectricalGraphT􏷅􏷄graph􏷃􏷀A generic electrical graph that the 􏶏 will construct its nodes into.􏶿
􏶜􏶝􏷆char[]􏷅􏷄tag name􏷃􏷀a unique tag name for the following stored nodes􏶿
􏶴
  􏶲create all of the vertices that are part of the 􏶐􏶱
  
  􏶲add nodes to graph􏶱
  //CB001 SHED BUS 1 (spare)
  //CB002 SHED BUS 1 (vacant)
  //CB003 SHED BUS 1 (spare)
  //CB004 SHED BUS 2 (spare)
  //CB005 SHED BUS 2 (vacant)
  //CB006 SHED BUS 2 (spare)
  //CB007 SHED BUS 1 (vacant)
  //CB008 SHED BUS 1 (spare)
  //CB009 SHED BUS 1 (vacant)
  //CB010 SHED BUS 2 (vacant)
  //CB011 SHED BUS 2 (spare)
  //CB012 SHED BUS 2 (vacant)
  //CB013 SHED BUS 1 (spare)
  //CB014 SHED BUS 1 (vacant)
  //CB015 SHED BUS 1 (spare)
  //CB016 SHED BUS 2 (spare)
  //CB017 SHED BUS 2 (vacant)
  //CB018 SHED BUS 2 (spare)
  􏵴cabin monitor􏵵 = ElectricalGraphAddBreaker(􏵶graph􏵷,"Cabin Monitor",􏵶tag name􏵷,0,7.5f,CAN_BE_POWERED_YES); //CB019
  􏵴dvr􏵵 = ElectricalGraphAddBreaker(􏵶graph􏵷,"DVR",􏵶tag name􏵷,0,5.0f,CAN_BE_POWERED_YES); //CB020
  􏵴mx15 imager􏵵 = ElectricalGraphAddBreaker(􏵶graph􏵷,"MX15 IMAGER",􏵶tag name􏵷,0,15.0f,CAN_BE_POWERED_YES); //CB021
  􏵴ls16 cntl􏵵 = ElectricalGraphAddBreaker(􏵶graph􏵷,"LS16 CNTL",􏵶tag name􏵷,0,5.0f,CAN_BE_POWERED_YES); //CB022
  􏵴dwnlnk cntl􏵵 = ElectricalGraphAddBreaker(􏵶graph􏵷,"DWNLNK CNTL",􏵶tag name􏵷,0,2.0f,CAN_BE_POWERED_YES); //CB023
  􏵴dwnlnk adu􏵵 = ElectricalGraphAddBreaker(􏵶graph􏵷,"DWNLNK ADU",􏵶tag name􏵷,0,5.0f,CAN_BE_POWERED_YES); //CB024
  //CB025 NON ESS BUS 1 (spare)
  //CB026 NON ESS BUS 1 (vacant)
  //CB027 NON ESS BUS 1 (spare)
  //CB028 NON ESS BUS 2 (spare)
  //CB029 NON ESS BUS 2 (vacant)
  //CB030 NON ESS BUS 2 (spare)
  
  􏵲create inactives􏵳􏵶graph􏵷,􏵶tag name􏵷);
􏶳

􏷘-􏷗􏷒create wires􏷑
􏷐Connects all of the necessary 􏶐 nodes together.􏷏
􏶠The nodes being connected will need to be created first.􏶡
􏶜mr􏶝􏷆ElectricalGraphT􏷅􏷄graph􏷃􏷀A generic electrical graph that the 􏶏 will construct its wires into.􏶿
􏶴
  􏶲connect nodes together􏶱
􏶳


􏷘-􏷗􏷒create inactives􏷑
􏷐Constructs all of the electrical components that make up the inactives and puts them into the generic electrical graph data structure.􏷏
􏶠This will give all of the created panel devices a valid id for querying the graph later.􏶡
􏶜mr􏶝􏷆ElectricalGraphT􏷅􏷄graph􏷃􏷀A generic electrical graph that the 􏶏 will construct its center panel devices into.􏶿
􏶜􏶝􏷆char[]􏷅􏷄tag name􏷃􏷀a unique tag name for the following stored nodes􏶿
􏶴
  􏶲on the overhead panel􏶱
  􏵴Av Shed Bus1 Inactive􏵵[0] = ElectricalGraphAddBreaker(􏵶graph􏵷,"inactive floor",􏵶tag name􏵷,0,0.0f,CAN_BE_POWERED_YES);
  􏵴Av Shed Bus1 Inactive􏵵[1] = ElectricalGraphAddBreaker(􏵶graph􏵷,"inactive floor",􏵶tag name􏵷,0,0.0f,CAN_BE_POWERED_YES);
  􏵴Av Ess Bus1 Inactive􏵵[0] = ElectricalGraphAddBreaker(􏵶graph􏵷,"inactive floor",􏵶tag name􏵷,0,0.0f,CAN_BE_POWERED_YES);
  􏵴Av Ess Bus1 Inactive􏵵[1] = ElectricalGraphAddBreaker(􏵶graph􏵷,"inactive floor",􏵶tag name􏵷,0,0.0f,CAN_BE_POWERED_YES);
  􏵴Ess Bus1 Inactive􏵵 = ElectricalGraphAddBreaker(􏵶graph􏵷,"inactive floor",􏵶tag name􏵷,0,0.0f,CAN_BE_POWERED_YES);
  􏵴Av Ess Bus2 Inactive􏵵[0] = ElectricalGraphAddBreaker(􏵶graph􏵷,"inactive floor",􏵶tag name􏵷,0,0.0f,CAN_BE_POWERED_YES);
  􏵴Av Ess Bus2 Inactive􏵵[1] = ElectricalGraphAddBreaker(􏵶graph􏵷,"inactive floor",􏵶tag name􏵷,0,0.0f,CAN_BE_POWERED_YES);
  
  􏶲on the floor􏶱
  􏵴Shed Bus1 Spare􏵵[0] = ElectricalGraphAddBreaker(􏵶graph􏵷,"inactive floor",􏵶tag name􏵷,0,0.0f,CAN_BE_POWERED_YES);
  􏵴Shed Bus1 Spare􏵵[1] = ElectricalGraphAddBreaker(􏵶graph􏵷,"inactive floor",􏵶tag name􏵷,0,0.0f,CAN_BE_POWERED_YES);
  􏵴Shed Bus1 Spare􏵵[2] = ElectricalGraphAddBreaker(􏵶graph􏵷,"inactive floor",􏵶tag name􏵷,0,0.0f,CAN_BE_POWERED_YES);
  􏵴Shed Bus1 Spare􏵵[3] = ElectricalGraphAddBreaker(􏵶graph􏵷,"inactive floor",􏵶tag name􏵷,0,0.0f,CAN_BE_POWERED_YES);
  􏵴Shed Bus1 Spare􏵵[4] = ElectricalGraphAddBreaker(􏵶graph􏵷,"inactive floor",􏵶tag name􏵷,0,0.0f,CAN_BE_POWERED_YES);
  
  􏵴Shed Bus2 Spare􏵵[0] = ElectricalGraphAddBreaker(􏵶graph􏵷,"inactive floor",􏵶tag name􏵷,0,0.0f,CAN_BE_POWERED_YES);
  􏵴Shed Bus2 Spare􏵵[1] = ElectricalGraphAddBreaker(􏵶graph􏵷,"inactive floor",􏵶tag name􏵷,0,0.0f,CAN_BE_POWERED_YES);
  􏵴Shed Bus2 Spare􏵵[2] = ElectricalGraphAddBreaker(􏵶graph􏵷,"inactive floor",􏵶tag name􏵷,0,0.0f,CAN_BE_POWERED_YES);
  􏵴Shed Bus2 Spare􏵵[3] = ElectricalGraphAddBreaker(􏵶graph􏵷,"inactive floor",􏵶tag name􏵷,0,0.0f,CAN_BE_POWERED_YES);
  􏵴Shed Bus2 Spare􏵵[4] = ElectricalGraphAddBreaker(􏵶graph􏵷,"inactive floor",􏵶tag name􏵷,0,0.0f,CAN_BE_POWERED_YES);
  
  􏵴Non Ess Bus1 Spare􏵵[0] = ElectricalGraphAddBreaker(􏵶graph􏵷,"inactive floor",􏵶tag name􏵷,0,0.0f,CAN_BE_POWERED_YES);
  􏵴Non Ess Bus1 Spare􏵵[1] = ElectricalGraphAddBreaker(􏵶graph􏵷,"inactive floor",􏵶tag name􏵷,0,0.0f,CAN_BE_POWERED_YES);
  
  􏵴Non Ess Bus2 Spare􏵵[0] = ElectricalGraphAddBreaker(􏵶graph􏵷,"inactive floor",􏵶tag name􏵷,0,0.0f,CAN_BE_POWERED_YES);
  􏵴Non Ess Bus2 Spare􏵵[1] = ElectricalGraphAddBreaker(􏵶graph􏵷,"inactive floor",􏵶tag name􏵷,0,0.0f,CAN_BE_POWERED_YES);
􏶳











􏶨The ID of a node that is conceptually stored on the control console􏶧
􏶦This ID will be used to query the generic electrical graph and receive back the actual device node.􏶥
􏶘-g􏶙􏶰􏶯􏶮size_t􏶭􏶬cabin monitor􏶫􏶪0􏶩
􏶘-g􏶙􏶰􏶯􏶮size_t􏶭􏶬dvr􏶫􏶪0􏶩
􏶘-g􏶙􏶰􏶯􏶮size_t􏶭􏶬mx15 imager􏶫􏶪0􏶩
􏶘-g􏶙􏶰􏶯􏶮size_t􏶭􏶬ls16 cntl􏶫􏶪0􏶩
􏶘-g􏶙􏶰􏶯􏶮size_t􏶭􏶬dwnlnk cntl􏶫􏶪0􏶩
􏶘-g􏶙􏶰􏶯􏶮size_t􏶭􏶬dwnlnk adu􏶫􏶪0􏶩

􏶨spares and inactives􏶧
􏶦we'll put them in the graph for consistency, but they are not important for traversal or load computation􏶥
􏶘-g􏶙􏶰􏶯􏶮size_t[2]􏶭􏶬Av Shed Bus1 Inactive􏶫􏶪0􏶩
􏶘-g􏶙􏶰􏶯􏶮size_t[2]􏶭􏶬Av Ess Bus1 Inactive􏶫􏶪0􏶩
􏶘-g􏶙􏶰􏶯􏶮size_t􏶭􏶬Ess Bus1 Inactive􏶫􏶪0􏶩
􏶘-g􏶙􏶰􏶯􏶮size_t[2]􏶭􏶬Av Ess Bus2 Inactive􏶫􏶪0􏶩
􏶘-g􏶙􏶰􏶯􏶮size_t[5]􏶭􏶬Shed Bus1 Spare􏶫􏶪0􏶩
􏶘-g􏶙􏶰􏶯􏶮size_t[5]􏶭􏶬Shed Bus2 Spare􏶫􏶪0􏶩
􏶘-g􏶙􏶰􏶯􏶮size_t[2]􏶭􏶬Non Ess Bus1 Spare􏶫􏶪0􏶩
􏶘-g􏶙􏶰􏶯􏶮size_t[2]􏶭􏶬Non Ess Bus2 Spare􏶫􏶪0􏶩