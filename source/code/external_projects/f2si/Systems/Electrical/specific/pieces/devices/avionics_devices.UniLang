􏶞p􏶟
􏷲The 􏶏 specific to the UH72A DC power system.􏷱
􏷰Stores a collection of 􏶏 and builds them into the generic electrical graph.􏷯
􏷮Electrical_System􏷭 􏷮Avionics_Devices􏷭
􏷬Trevor Hickey􏷫

􏷤􏷣􏷦stddef􏷥􏴓1􏴔􏴑size_t􏴒
􏷤􏷣􏷦ElectricalGraph􏷥􏴓d􏴔􏴑ElectricalGraphT􏴒
􏶔􏶕􏶒string􏶓􏴏d􏴐􏴍strcpy()􏴎

􏷘+􏷗􏷒􏶐􏷑
􏷐Initialize the 􏶐􏷏
􏶠􏶐 will be in an invalid state until initialized.
Initializing a 􏶐 will construct all of its nodes into the generic electrical graph.
It will store the IDs given back by the graph so that they may be queried later by the user.􏶡
􏶜mr􏶝􏷆ElectricalGraphT􏷅􏷄graph􏷃􏷀A generic electrical graph that the 􏶏 will construct its nodes into.􏶿
􏶜􏶝􏷆char[]􏷅􏷄tag name􏷃􏷀a unique tag name for the following stored nodes􏶿
􏶴
  􏶲create all the internal nodes inside the graph data structure􏶱
  􏵲create nodes􏵳􏵶graph􏵷,􏵶tag name􏵷);
  
  􏶲connect these newly created nodes􏶱
  􏵲create wires􏵳􏵶graph􏵷);
􏶳

􏷘-􏷗􏷒create nodes􏷑
􏷐Constructs all of the electrical components into the generic electrical graph data structure.􏷏
􏶠This will give all of the node a valid id for querying the graph later.􏶡
􏶜mr􏶝􏷆ElectricalGraphT􏷅􏷄graph􏷃􏷀A generic electrical graph that the 􏶏 will construct its nodes into.􏶿
􏶜􏶝􏷆char[]􏷅􏷄tag name􏷃􏷀a unique tag name for the following stored nodes􏶿
􏶴
  􏶲create all of the vertices that are part of the 􏶐􏶱
  
  􏶲add nodes to graph􏶱
  􏵴pfd bezels􏵵[0] = ElectricalGraphAddGroundedDevice(􏵶graph􏵷,"copilot pfd bezel",􏵶tag name􏵷,0.0f,11.735f,CAN_BE_POWERED_YES);
  􏵴pfd bezels􏵵[1] = ElectricalGraphAddGroundedDevice(􏵶graph􏵷,"pilot pfd bezel",􏵶tag name􏵷,0.0f,11.735f,CAN_BE_POWERED_YES);
  􏵴nd bezels􏵵[0] = ElectricalGraphAddGroundedDevice(􏵶graph􏵷,"copilot nd bezel",􏵶tag name􏵷,0.0f,11.735f,CAN_BE_POWERED_YES);
  􏵴nd bezels􏵵[1] = ElectricalGraphAddGroundedDevice(􏵶graph􏵷,"pilot nd bezel",􏵶tag name􏵷,0.0f,11.735f,CAN_BE_POWERED_YES);
  􏵴cad bezel􏵵 = ElectricalGraphAddGroundedDevice(􏵶graph􏵷,"cad bezel",􏵶tag name􏵷,0.0f,11.735f,CAN_BE_POWERED_YES);
  􏵴vemd bezel􏵵 = ElectricalGraphAddGroundedDevice(􏵶graph􏵷,"vemd bezel",􏵶tag name􏵷,0.0f,11.735f,CAN_BE_POWERED_YES);
  􏵴icps􏵵[0] = ElectricalGraphAddGroundedDevice(􏵶graph􏵷,"copilot icp",􏵶tag name􏵷,0.0f,11.735f,CAN_BE_POWERED_YES);
  􏵴icps􏵵[1] = ElectricalGraphAddGroundedDevice(􏵶graph􏵷,"pilot icp",􏵶tag name􏵷,0.0f,11.735f,CAN_BE_POWERED_YES);
  􏵴rcu􏵵 = ElectricalGraphAddGroundedDevice(􏵶graph􏵷,"rcu",􏵶tag name􏵷,0.0f,11.735f,CAN_BE_POWERED_YES);
  􏵴pilot decider􏵵[0] = ElectricalGraphAddGroundedDevice(􏵶graph􏵷,"copilot pilot decider",􏵶tag name􏵷,0.0f,80.32f,CAN_BE_POWERED_YES);
  􏵴pilot decider􏵵[1] = ElectricalGraphAddGroundedDevice(􏵶graph􏵷,"pilot pilot decider",􏵶tag name􏵷,0.0f,80.32f,CAN_BE_POWERED_YES);
  􏵴static decider􏵵[0][0] = ElectricalGraphAddGroundedDevice(􏵶graph􏵷,"copilot static decider 1",􏵶tag name􏵷,0.0f,80.32f,CAN_BE_POWERED_YES);
  􏵴static decider􏵵[0][1] = ElectricalGraphAddGroundedDevice(􏵶graph􏵷,"copilot static decider 2",􏵶tag name􏵷,0.0f,80.32f,CAN_BE_POWERED_YES);
  􏵴static decider􏵵[1][0] = ElectricalGraphAddGroundedDevice(􏵶graph􏵷,"pilot static decider 1",􏵶tag name􏵷,0.0f,80.32f,CAN_BE_POWERED_YES);
  􏵴static decider􏵵[1][1] = ElectricalGraphAddGroundedDevice(􏵶graph􏵷,"pilot static decider 2",􏵶tag name􏵷,0.0f,80.32f,CAN_BE_POWERED_YES);
  􏵴deck fan􏵵 = ElectricalGraphAddGroundedFan(􏵶graph􏵷,"deck fan",􏵶tag name􏵷,0.0f,4.25f,CAN_BE_POWERED_YES);
  􏵴center instrument fan􏵵 = ElectricalGraphAddGroundedFan(􏵶graph􏵷,"center instrument fan",􏵶tag name􏵷,0.0f,4.25f,CAN_BE_POWERED_YES);
  􏵴pelican rack fan􏵵= ElectricalGraphAddGroundedFan(􏵶graph􏵷, "pelican rack fan", 􏵶tag name􏵷, 0.0f, 4.25f, CAN_BE_POWERED_YES);
  􏵴cad fan􏵵 = ElectricalGraphAddGroundedFan(􏵶graph􏵷,"cad fan",􏵶tag name􏵷,0.0f,4.25f,CAN_BE_POWERED_YES);
  􏵴vemd fan􏵵 = ElectricalGraphAddGroundedFan(􏵶graph􏵷,"vemd fan",􏵶tag name􏵷,0.0f,4.25f,CAN_BE_POWERED_YES);
  􏵴ram temperature sensor􏵵[0] = ElectricalGraphAddGroundedSensor(􏵶graph􏵷,"copilot ram temperature sensor",􏵶tag name􏵷,0.0f,11.735f,CAN_BE_POWERED_YES);
  􏵴ram temperature sensor􏵵[1] = ElectricalGraphAddGroundedSensor(􏵶graph􏵷,"pilot ram temperature sensor",􏵶tag name􏵷,0.0f,11.735f,CAN_BE_POWERED_YES);
  􏵴deck temperature sensor􏵵 = ElectricalGraphAddGroundedSensor(􏵶graph􏵷,"deck temperature sensor",􏵶tag name􏵷,0.0f,80.32f,CAN_BE_POWERED_YES);
  􏵴center instrument temperature sensor􏵵 = ElectricalGraphAddGroundedSensor(􏵶graph􏵷,"center instrument temperature sensor",􏵶tag name􏵷,0.0f,80.32f,CAN_BE_POWERED_YES);
  􏵴center instrument cooling fan on microswitch􏵵 = ElectricalGraphAddGroundedSwitch(􏵶graph􏵷,"center instrument cooling fan on microswitch",􏵶tag name􏵷,0.0f,11.735f,CAN_BE_POWERED_YES);
  􏵴center instrument overheat microswitch􏵵 = ElectricalGraphAddGroundedSwitch(􏵶graph􏵷,"center instrument overheat microswitch",􏵶tag name􏵷,0.0f,11.735f,CAN_BE_POWERED_YES);
  􏵴aionics deck cooling fan on microswitch􏵵 = ElectricalGraphAddGroundedSwitch(􏵶graph􏵷,"aionics deck cooling fan on microswitch",􏵶tag name􏵷,0.0f,11.735f,CAN_BE_POWERED_YES);
  􏵴avionics deck overheat microswitch􏵵 = ElectricalGraphAddGroundedSwitch(􏵶graph􏵷,"avionics deck overheat microswitch",􏵶tag name􏵷,0.0f,11.735f,CAN_BE_POWERED_YES);
  􏵴magnetometers􏵵[0] = ElectricalGraphAddGroundedDevice(􏵶graph􏵷,"copilot magnetometer",􏵶tag name􏵷,0.0f,11.735f,CAN_BE_POWERED_YES);
  􏵴magnetometers􏵵[1] = ElectricalGraphAddGroundedDevice(􏵶graph􏵷,"pilot magnetometer",􏵶tag name􏵷,0.0f,11.735f,CAN_BE_POWERED_YES);
  􏵴ahrus􏵵[0] = ElectricalGraphAddGroundedDevice(􏵶graph􏵷,"copilot ahrus",􏵶tag name􏵷,0.0f,11.735f,CAN_BE_POWERED_YES);
  􏵴ahrus􏵵[1] = ElectricalGraphAddGroundedDevice(􏵶graph􏵷,"pilot ahrus",􏵶tag name􏵷,0.0f,11.735f,CAN_BE_POWERED_YES);
  􏵴fcdms􏵵[0] = ElectricalGraphAddGroundedDevice(􏵶graph􏵷,"copilot FCDM",􏵶tag name􏵷,0.0f,11.735f,CAN_BE_POWERED_YES);
  􏵴fcdms􏵵[1] = ElectricalGraphAddGroundedDevice(􏵶graph􏵷,"pilot FCDM",􏵶tag name􏵷,0.0f,11.735f,CAN_BE_POWERED_YES);
  􏵴adcs􏵵[0] = ElectricalGraphAddGroundedDevice(􏵶graph􏵷,"copilot ADC",􏵶tag name􏵷,0.0f,11.735f,CAN_BE_POWERED_YES);
  􏵴adcs􏵵[1] = ElectricalGraphAddGroundedDevice(􏵶graph􏵷,"pilot ADC",􏵶tag name􏵷,0.0f,11.735f,CAN_BE_POWERED_YES);
  􏵴pfds􏵵[0] = ElectricalGraphAddGroundedDevice(􏵶graph􏵷,"copilot PFD",􏵶tag name􏵷,0.0f,11.735f,CAN_BE_POWERED_YES);
  􏵴pfds􏵵[1] = ElectricalGraphAddGroundedDevice(􏵶graph􏵷,"pilot PFD",􏵶tag name􏵷,0.0f,11.735f,CAN_BE_POWERED_YES);
  􏵴nds􏵵[0] = ElectricalGraphAddGroundedDevice(􏵶graph􏵷,"copilot ND",􏵶tag name􏵷,0.0f,11.735f,CAN_BE_POWERED_YES);
  􏵴nds􏵵[1] = ElectricalGraphAddGroundedDevice(􏵶graph􏵷,"pilot ND",􏵶tag name􏵷,0.0f,11.735f,CAN_BE_POWERED_YES);
  􏵴vemd􏵵 = ElectricalGraphAddGroundedDevice(􏵶graph􏵷,"vemd",􏵶tag name􏵷,0.0f,11.735f,CAN_BE_POWERED_YES);
  􏵴vemd lanes􏵵[0] = ElectricalGraphAddGroundedDevice(􏵶graph􏵷,"copilot vemd Lane",􏵶tag name􏵷,0.0f,11.735f,CAN_BE_POWERED_YES);
  􏵴vemd lanes􏵵[1] = ElectricalGraphAddGroundedDevice(􏵶graph􏵷,"pilot vemd Lane",􏵶tag name􏵷,0.0f,11.735f,CAN_BE_POWERED_YES);
  􏵴cad􏵵 = ElectricalGraphAddGroundedDevice(􏵶graph􏵷,"cad",􏵶tag name􏵷,0.0f,11.735f,CAN_BE_POWERED_YES);
  􏵴cad Lane􏵵 = ElectricalGraphAddGroundedDevice(􏵶graph􏵷,"cad Lane",􏵶tag name􏵷,0.0f,11.735f,CAN_BE_POWERED_YES);
  􏵴warning unit􏵵 = ElectricalGraphAddGroundedDevice(􏵶graph􏵷,"warning unit",􏵶tag name􏵷,0.0f,11.735f,CAN_BE_POWERED_YES);
  􏵴wet compass lighting􏵵 = ElectricalGraphAddGroundedDevice(􏵶graph􏵷,"wet compass lighting",􏵶tag name􏵷,0.0f,11.735f,CAN_BE_POWERED_YES);
  􏵴triple tach􏵵 = ElectricalGraphAddGroundedDevice(􏵶graph􏵷,"triple tach",􏵶tag name􏵷,0.0f,11.712f,CAN_BE_POWERED_YES);
  􏵴standby artificial horizon􏵵 = ElectricalGraphAddGroundedDevice(􏵶graph􏵷,"stdby artificial horizon",􏵶tag name􏵷,0.0f,11.735f,CAN_BE_POWERED_YES);
  􏵴voltage sensor􏵵[0] = ElectricalGraphAddGroundedSensor(􏵶graph􏵷,"copilot voltage sensor",􏵶tag name􏵷,0.0f,1.0f,CAN_BE_POWERED_YES);
  􏵴voltage sensor􏵵[1] = ElectricalGraphAddGroundedSensor(􏵶graph􏵷,"pilot voltage sensor",􏵶tag name􏵷,0.0f,1.0f,CAN_BE_POWERED_YES);
  􏵴nms selector􏵵 = ElectricalGraphAddGroundedDevice(􏵶graph􏵷,"NMS selector",􏵶tag name􏵷,0.0f,1.0f,CAN_BE_POWERED_YES);
􏶳

􏷘-􏷗􏷒create wires􏷑
􏷐Connects all of the necessary 􏶐 nodes together.􏷏
􏶠The nodes being connected will need to be created first.􏶡
􏶜mr􏶝􏷆ElectricalGraphT􏷅􏷄graph􏷃􏷀A generic electrical graph that the 􏶏 will construct its wires into.􏶿
􏶴
  􏶲connect nodes together􏶱
  􏶲feel free to add any internal system connections here􏶱
􏶳

􏶨􏶧􏶦􏶥􏶘-g􏶙􏶰􏶯􏶮size_t[2]􏶭􏶬pfd bezels􏶫􏶪0􏶩
􏶨􏶧􏶦􏶥􏶘-g􏶙􏶰􏶯􏶮size_t[2]􏶭􏶬nd bezels􏶫􏶪0􏶩
􏶨􏶧􏶦􏶥􏶘-g􏶙􏶰􏶯􏶮size_t􏶭􏶬cad bezel􏶫􏶪0􏶩
􏶨􏶧􏶦􏶥􏶘-g􏶙􏶰􏶯􏶮size_t􏶭􏶬vemd bezel􏶫􏶪0􏶩
􏶨􏶧􏶦􏶥􏶘-g􏶙􏶰􏶯􏶮size_t[2]􏶭􏶬icps􏶫􏶪0􏶩
􏶨􏶧􏶦􏶥􏶘-g􏶙􏶰􏶯􏶮size_t􏶭􏶬rcu􏶫􏶪0􏶩
􏶨􏶧􏶦􏶥􏶘-g􏶙􏶰􏶯􏶮size_t[2]􏶭􏶬pilot decider􏶫􏶪0􏶩
􏶨􏶧􏶦􏶥􏶘-g􏶙􏶰􏶯􏶮size_t[2][2]􏶭􏶬static decider􏶫􏶪0􏶩
􏶨􏶧􏶦􏶥􏶘-g􏶙􏶰􏶯􏶮size_t􏶭􏶬deck fan􏶫􏶪0􏶩
􏶨􏶧􏶦􏶥􏶘-g􏶙􏶰􏶯􏶮size_t􏶭􏶬center instrument fan􏶫􏶪0􏶩
􏶨􏶧􏶦􏶥􏶘-g􏶙􏶰􏶯􏶮size_t􏶭􏶬pelican rack fan􏶫􏶪0􏶩
􏶨􏶧􏶦􏶥􏶘-g􏶙􏶰􏶯􏶮size_t􏶭􏶬cad fan􏶫􏶪0􏶩
􏶨􏶧􏶦􏶥􏶘-g􏶙􏶰􏶯􏶮size_t􏶭􏶬vemd fan􏶫􏶪0􏶩
􏶨􏶧􏶦􏶥􏶘-g􏶙􏶰􏶯􏶮size_t[2]􏶭􏶬ram temperature sensor􏶫􏶪0􏶩
􏶨􏶧􏶦􏶥􏶘-g􏶙􏶰􏶯􏶮size_t􏶭􏶬deck temperature sensor􏶫􏶪0􏶩
􏶨􏶧􏶦􏶥􏶘-g􏶙􏶰􏶯􏶮size_t􏶭􏶬center instrument temperature sensor􏶫􏶪0􏶩
􏶨􏶧􏶦􏶥􏶘-g􏶙􏶰􏶯􏶮size_t􏶭􏶬center instrument cooling fan on microswitch􏶫􏶪0􏶩
􏶨􏶧􏶦􏶥􏶘-g􏶙􏶰􏶯􏶮size_t􏶭􏶬center instrument overheat microswitch􏶫􏶪0􏶩
􏶨􏶧􏶦􏶥􏶘-g􏶙􏶰􏶯􏶮size_t􏶭􏶬aionics deck cooling fan on microswitch􏶫􏶪0􏶩
􏶨􏶧􏶦􏶥􏶘-g􏶙􏶰􏶯􏶮size_t􏶭􏶬avionics deck overheat microswitch􏶫􏶪0􏶩
􏶨􏶧􏶦􏶥􏶘-g􏶙􏶰􏶯􏶮size_t[2]􏶭􏶬magnetometers􏶫􏶪0􏶩
􏶨􏶧􏶦􏶥􏶘-g􏶙􏶰􏶯􏶮size_t[2]􏶭􏶬ahrus􏶫􏶪0􏶩
􏶨􏶧􏶦􏶥􏶘-g􏶙􏶰􏶯􏶮size_t[2]􏶭􏶬fcdms􏶫􏶪0􏶩
􏶨􏶧􏶦􏶥􏶘-g􏶙􏶰􏶯􏶮size_t[2]􏶭􏶬adcs􏶫􏶪0􏶩
􏶨􏶧􏶦􏶥􏶘-g􏶙􏶰􏶯􏶮size_t[2]􏶭􏶬pfds􏶫􏶪0􏶩
􏶨􏶧􏶦􏶥􏶘-g􏶙􏶰􏶯􏶮size_t[2]􏶭􏶬nds􏶫􏶪0􏶩
􏶨􏶧􏶦􏶥􏶘-g􏶙􏶰􏶯􏶮size_t􏶭􏶬vemd􏶫􏶪0􏶩
􏶨􏶧􏶦􏶥􏶘-g􏶙􏶰􏶯􏶮size_t[2]􏶭􏶬vemd lanes􏶫􏶪0􏶩
􏶨􏶧􏶦􏶥􏶘-g􏶙􏶰􏶯􏶮size_t􏶭􏶬cad􏶫􏶪0􏶩
􏶨􏶧􏶦􏶥􏶘-g􏶙􏶰􏶯􏶮size_t􏶭􏶬cad Lane􏶫􏶪0􏶩
􏶨􏶧􏶦􏶥􏶘-g􏶙􏶰􏶯􏶮size_t􏶭􏶬warning unit􏶫􏶪0􏶩
􏶨􏶧􏶦􏶥􏶘-g􏶙􏶰􏶯􏶮size_t􏶭􏶬wet compass lighting􏶫􏶪0􏶩
􏶨􏶧􏶦􏶥􏶘-g􏶙􏶰􏶯􏶮size_t􏶭􏶬triple tach􏶫􏶪0􏶩
􏶨􏶧􏶦􏶥􏶘-g􏶙􏶰􏶯􏶮size_t􏶭􏶬standby artificial horizon􏶫􏶪0􏶩
􏶨􏶧􏶦􏶥􏶘-g􏶙􏶰􏶯􏶮size_t[2]􏶭􏶬voltage sensor􏶫􏶪0􏶩
􏶨􏶧􏶦􏶥􏶘-g􏶙􏶰􏶯􏶮size_t􏶭􏶬nms selector􏶫􏶪0􏶩






