􏶞p􏶟
􏷲An iterator used to identify and traverse the elements of a container.􏷱
􏷰􏷯
􏷮Data Structure􏷭􏷮Iterator􏷭
􏷬Trevor Hickey􏷫

􏷤s􏷣􏷦stddef􏷥􏴓1􏴔􏴑size_t􏴒
􏷤s􏷣􏷦stdioLib􏷥􏴓d􏴔􏴑BOOL􏴒
􏷤􏷣􏷦Any􏷥􏴓d􏴔􏴑AnyT􏴒


CONSTRUCTOR:
􏷘+􏷗􏷒􏶐􏷑
􏷐Initialize the 􏶐􏷏
􏶠􏶐 will be created storing a pointer to the chosen element􏶡
􏶜r􏶝􏷆void􏷅􏷄starting element􏷃􏷀the starting element that the iterator is pointing at􏶿
􏶜􏶝􏷆size􏷅􏷄element size􏷃􏷀the size of the element that the iterator is pointing to􏶿
􏶴
    􏶲make the starting element the current element pointed to by the iterator􏶱
    􏵴current element􏵵 = (void*)􏵶starting element􏵷;
    
    􏶲store the size of the element􏶱
    􏵴element size􏵵 = 􏵶element size􏵷;
􏶳

OVERLOADED OPERATORS:
􏷘+c􏷗􏷒equal􏷑
􏷐compares two iterators for equality (==)􏷏
􏶠two iterators are equal if they point to the same element in a container􏶡
􏶜r􏶝􏷆􏶐T􏷅􏷄self􏷃􏷀the 􏶐 to compare against􏶿
􏶚m􏶛􏶾BOOL􏶽􏶼equal􏶻􏶺whether the two iterators are equivalent􏶹
􏶴
    􏶲the iterators are equivalent if each current element is the same memory address􏶱
    return 􏵴current element􏵵 == 􏵶self􏵷->m_tLocals.m_ptCurrentElement;
􏶳
􏷘+c􏷗􏷒not equal􏷑
􏷐compares two iterators for inequality (!=)􏷏
􏶠two iterators are not equal if they point to the different elements in a container􏶡
􏶜r􏶝􏷆􏶐T􏷅􏷄self􏷃􏷀the 􏶐 to compare against􏶿
􏶚m􏶛􏶾BOOL􏶽􏶼unequal􏶻􏶺whether the two iterators are inequivalent􏶹
􏶴
    􏶲the iterators are equivalent if each current element is the same memory address􏶱
    return 􏵴current element􏵵 != 􏵶self􏵷->m_tLocals.m_ptCurrentElement;
􏶳
􏷘+c􏷗􏷒less than􏷑
􏷐compares to see if an iterator is earlier in the sequence than another iterator (<)􏷏
􏶠an iterator is less than another iterator if it is earlier in the sequence than the other iterator􏶡
􏶜r􏶝􏷆􏶐T􏷅􏷄self􏷃􏷀the 􏶐 to compare against􏶿
􏶚m􏶛􏶾BOOL􏶽􏶼less than􏶻􏶺whether the iterator is less than the passed in iterator􏶹
􏶴
    􏶲an assumption we can make since the memory is contiguous􏶱
    return 􏵴current element􏵵 < 􏵶self􏵷->m_tLocals.m_ptCurrentElement;
􏶳
􏷘+c􏷗􏷒greater than􏷑
􏷐compares to see if an iterator is further in the sequence than another iterator (>)􏷏
􏶠an iterator is greater than another iterator if it is further in the sequence than the other iterator􏶡
􏶜r􏶝􏷆􏶐T􏷅􏷄self􏷃􏷀the 􏶐 to compare against􏶿
􏶚m􏶛􏶾BOOL􏶽􏶼greater than􏶻􏶺whether the iterator is greater than the passed in iterator􏶹
􏶴
    􏶲an assumption we can make since the memory is contiguous􏶱
    return 􏵴current element􏵵 > 􏵶self􏵷->m_tLocals.m_ptCurrentElement;
􏶳
􏷘+c􏷗􏷒less than equal􏷑
􏷐compares to see if an iterator is earlier or in the same position in the sequence than another iterator (<=)􏷏
􏶠an iterator is less than or equal to another iterator if it is earlier or in the same position in the sequence than the other iterator􏶡
􏶜r􏶝􏷆􏶐T􏷅􏷄self􏷃􏷀the 􏶐 to compare against􏶿
􏶚m􏶛􏶾BOOL􏶽􏶼less than or equal to􏶻􏶺whether the iterator is less than or equal to the passed in iterator􏶹
􏶴
    􏶲an assumption we can make since the memory is contiguous􏶱
    return 􏵴current element􏵵 <= 􏵶self􏵷->m_tLocals.m_ptCurrentElement;
􏶳
􏷘+c􏷗􏷒greater than equal􏷑
􏷐compares to see if an iterator is further or in the same position in the sequence than another iterator (>=)􏷏
􏶠an iterator is greater than or equal to another iterator if it is further or in the same position in the sequence than the other iterator􏶡
􏶜r􏶝􏷆􏶐T􏷅􏷄self􏷃􏷀the 􏶐 to compare against􏶿
􏶚m􏶛􏶾BOOL􏶽􏶼greater than or equal to􏶻􏶺whether the iterator is greater than or equal to the passed in iterator􏶹
􏶴
    􏶲an assumption we can make since the memory is contiguous􏶱
    return 􏵴current element􏵵 >= 􏵶self􏵷->m_tLocals.m_ptCurrentElement;
􏶳

INCREMENTS / DECREMENTS:
􏷘+􏷗􏷒prefix increment􏷑
􏷐apply a prefix increment to the iterator (++iter)􏷏
􏶠the closest thing to an overloaded operator􏶡
􏶚m􏶛􏶾􏶐T*􏶽􏶼self􏶻􏶺the incremented iterator􏶹
􏶴
    􏶲an assumption we can make since the memory is contiguous􏶱
    􏶲we cast to char* because incrementing void pointers is illegal, and we need to increase by n number of bytes􏶱
    􏵴current element􏵵 = (char*)􏵴current element􏵵 + 􏵴element size􏵵;
    
    􏶲return the incremented iterator􏶱
    return ptIterator;
􏶳

􏷘+􏷗􏷒postfix increment􏷑
􏷐apply a postfix increment to the iterator (iter++)􏷏
􏶠the closest thing to an overloaded operator􏶡
􏶚m􏶛􏶾􏶐T􏶽􏶼self􏶻􏶺the iterator before the increment􏶹
􏶴
    􏶲a copy of the iterator to return back to the caller􏶱
    IteratorT tCopy = *ptIterator;
    
    􏶲an assumption we can make since the memory is contiguous􏶱
    􏶲we cast to char* because incrementing void pointers is illegal, and we need to increase by n number of bytes􏶱
    􏵴current element􏵵 = (char*)􏵴current element􏵵 + 􏵴element size􏵵;
    
    􏶲return the iterator before the increment􏶱
    return tCopy;
􏶳

􏷘+􏷗􏷒prefix decrement􏷑
􏷐apply a prefix decrement to the iterator (--iter)􏷏
􏶠the closest thing to an overloaded operator􏶡
􏶚m􏶛􏶾􏶐T*􏶽􏶼self􏶻􏶺the decremented iterator􏶹
􏶴
    􏶲an assumption we can make since the memory is contiguous􏶱
    􏶲we cast to char* because incrementing void pointers is illegal, and we need to increase by n number of bytes􏶱
    􏵴current element􏵵 = (char*)􏵴current element􏵵 - 􏵴element size􏵵;
    
    􏶲return the decremented iterator􏶱
    return ptIterator;
􏶳

􏷘+􏷗􏷒postfix decrement􏷑
􏷐apply a postfix decrement to the iterator (iter--)􏷏
􏶠the closest thing to an overloaded operator􏶡
􏶚m􏶛􏶾􏶐T􏶽􏶼self􏶻􏶺the iterator before the decrement􏶹
􏶴
    􏶲a copy of the iterator to return back to the caller􏶱
    IteratorT tCopy = *ptIterator;
    
    􏶲an assumption we can make since the memory is contiguous􏶱
    􏶲we cast to char* because incrementing void pointers is illegal, and we need to increase by n number of bytes􏶱
    􏵴current element􏵵 = (char*)􏵴current element􏵵 - 􏵴element size􏵵;
    
    􏶲return the iterator before the decrement􏶱
    return tCopy;
􏶳


GETTERS:
􏷘+􏷗􏷒ref􏷑
􏷐get reference to the iterator element􏷏
􏶠returns the element that the iterator is pointing at􏶡
􏶚m􏶛􏶾void*􏶽􏶼element􏶻􏶺the element that the iterator is pointing to􏶹
􏶴
    􏶲return the pointer to the container element􏶱
    return AnyGet(􏵴current element􏵵);
􏶳


DATA:
􏶨the current element pointed to by the iterator􏶧
􏶦This points to a block of memory inside the container that provided the iterator􏶥
􏶘-􏶙􏶮void*􏶭􏶬current element􏶫􏶪􏶩

􏶨the size of each element􏶧
􏶦This is important for incrementing/decrementing the iterator the appropriate number of bytes􏶥
􏶘-􏶙􏶮size􏶭􏶬element size􏶫􏶪􏶩