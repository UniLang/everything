􏶞g􏶟
􏷲Local Map Regeneration Trigger Framework data and configuration􏷱
􏷰Contains data types created by and used within the framework.􏷯
􏷮Regeneration􏷭
􏷬Trevor Hickey􏷫

􏷞local_map􏷝􏷞statik􏷝

􏳃mock􏳄
􏳁mock􏳂
􏲿map_ref_id􏳀

􏳃mock􏳄
􏳁mock􏳂
􏲿lane_neighbor_annotation􏳀

􏳃mock􏳄
􏳁mock􏳂
􏲿route_plan_identifier􏳀


􏶨mock􏶧􏶦mock􏶥􏶘+􏶙􏶰􏶯􏷔map_ref_id􏷓􏶮string􏶭􏶬element_id􏶫
􏶨mock􏶧􏶦mock􏶥􏶘+􏶙􏶰􏶯􏷔map_ref_id􏷓􏶮string􏶭􏶬map_index􏶫
􏶨mock􏶧􏶦mock􏶥􏶘+􏶙􏶰􏶯􏷔map_ref_id􏷓􏶮string􏶭􏶬entry_point_id􏶫
􏶨mock􏶧􏶦mock􏶥􏶘+􏶙􏶰􏶯􏷔lane_neighbor_annotation􏷓􏶮d􏶭􏶬distance􏶫􏵚meters􏵛
􏶨mock􏶧􏶦mock􏶥􏶘+􏶙􏶰􏶯􏷔route_plan_identifier􏷓􏶮string􏶭􏶬route_identifier􏶫
􏶨mock􏶧􏶦mock􏶥􏶘+􏶙􏶰􏶯􏷔route_plan_identifier􏷓􏶮string􏶭􏶬target_identifier􏶫
􏶨mock􏶧􏶦mock􏶥􏶘+􏶙􏶰􏶯􏷔route_plan_identifier􏷓􏶮string􏶭􏶬chunk_identifier􏶫













􏳃Lane information within a particular route􏳄
􏳁Lane information for a single element from a translated route􏳂
􏲿lane_info􏳀

􏶨the identity of the lane􏶧
􏶦derived from the lane sequence of the translated route􏶥
􏶘+􏶙􏶰􏶯􏷔lane_info􏷓􏶮map_ref_id􏶭􏲷mlp􏲸􏲷lane_graph􏲸􏶬map ref􏶫
􏲹mlp/messages/map_ref_id􏲺
􏲱mlp/messages/map_ref_id􏲲

􏶨Lane information within a particular route􏶧
􏶦Lane information for a single element from a translated route􏶥
􏶘+􏶙􏶰􏶯􏷔lane_info􏷓􏶮lane_neighbor_annotation􏶭􏲷route_planning􏲸􏶬annotation􏶫
􏲹route_planner/messages/route_plan􏲺
􏲱route_planner/messages/route_planner_messages􏲲

􏶊The various event states that can occur on lanes􏶉
􏶈The regeneration framework will tag events to particular lane􏶇
􏵮􏵯􏶀event action􏶋
􏶆regenerate􏶅􏶂causes the regenerate trigger to be called on the corresponding lane􏶁
􏶆none􏶅􏶂causes nothing to trigger for the corresponding lane􏶁

􏶊An interpretation on how to process the route based on the state of the event view􏶉
􏶈We keep an interval over the route in order to determine what events need to be processed
however, a new route can't have a starting position in the interval (because no previous lane was visited)
and an expired route has no ending position in the interval (because the progress index may no longer correlate to the route)
we observe the optionality of the event view to determine the contextual state of the route􏶇
􏵮􏵯􏶀route status􏶋
􏶆new􏶅􏶂no previous lane was visited.  we can assume all lanes up to the current􏶁
􏶆existing􏶅􏶂we have a previous and current lane giving us a valid interval over the route􏶁
􏶆expired􏶅􏶂no current lane is given.  we an assume all lanes from the previous to the end of the route􏶁
􏶆invalid􏶅􏶂we do not have a valid interval over the route at all􏶁


􏳃An event along a particular lane􏳄
􏳁contains the location of the event and information about the event􏳂
􏲿event􏳀

􏶨a regeneration event that will trigger when the lane is reached􏶧
􏶦a user callback will be made for the event of the given lane􏶥
􏶘+􏶙􏶰􏶯􏷔event􏷓􏶮event_action􏶭􏶬action􏶫􏶪event_action_none􏶩

􏶨The reason the event exists􏶧
􏶦provides explanation on why an event is present􏶥
􏶘+􏶙􏶰􏶯􏷔event􏷓􏶮ascii_string􏶭􏶬reason􏶫􏶪􏶩

􏶨the distance along the lane that the event is placed􏶧
􏶦0 is beginning of lane. lane distance is the end of the lane
0 <= distance <= lane length􏶥
􏶘+􏶙􏶰􏶯􏷔event􏷓􏶮d􏶭􏶬distance􏶫􏵚meters􏵛􏶪0􏶩




􏳃A lane with annotated event information􏳄
􏳁contains event information about the particular lane􏳂
􏲿lane􏳀

􏶨the lane that the event may occur on􏶧
􏶦derived from the annotation and lane sequence of the translated route􏶥
􏶘+􏶙􏶰􏶯􏷔lane􏷓􏶮lane_info􏶭􏶬info􏶫

􏶨Events that occur along the lane􏶧
􏶦Contains the location of the events and information about the event
events may overlap. they are not ordered by distance.􏶥
􏶘+􏶙􏶰􏶯􏷔lane􏷓􏶮seq􏶭􏳟event􏳠􏶬events􏶫





􏳃the previously determined lane, and the new currently determined lane􏳄
􏳁creates an interval of lanes to evaluate for events.
This is a partially open interval (prev,curr]
Why are they optionals?
A new route has no previous index
If the car drives past the end of the route, there is no current index􏳂
􏲿event_view􏳀

􏶨The previous lane observed􏶧
􏶦interval end is open􏶥
􏶘+?􏶙􏶰􏶯􏷔event_view􏷓􏶮i32􏶭􏶬previous􏶫

􏶨The current lane observed􏶧
􏶦interval end is closed􏶥
􏶘+?􏶙􏶰􏶯􏷔event_view􏷓􏶮i32􏶭􏶬current􏶫




􏳃An event region along a route􏳄
􏳁contains a start and end location along the route
the entire region is a continuous event􏳂
􏲿event_region􏳀

􏶨a regeneration event that will trigger when the lane is reached􏶧
􏶦a user callback will be made for the event of the given lane􏶥
􏶘+􏶙􏶰􏶯􏷔event_region􏷓􏶮event_action􏶭􏶬action􏶫􏶪event_action_none􏶩

􏶨The reason the event exists􏶧
􏶦provides explanation on why an event is present􏶥
􏶘+􏶙􏶰􏶯􏷔event_region􏷓􏶮ascii_string􏶭􏶬reason􏶫􏶪􏶩

􏶨the start distance of the event region along the route􏶧
􏶦0 is beginning of route
0 <= start <= end􏶥
􏶘+􏶙􏶰􏶯􏷔event_region􏷓􏶮d􏶭􏶬start􏶫􏵚meters􏵛􏶪0􏶩

􏶨the end distance of the event region along the route􏶧
􏶦start <= end <= route length􏶥
􏶘+􏶙􏶰􏶯􏷔event_region􏷓􏶮d􏶭􏶬end􏶫􏵚meters􏵛􏶪0􏶩



􏳃The sequence of regeneration events that occur along a route􏳄
􏳁The events will be triggered in the order of the sequence􏳂
􏲿event_annotated_route􏳀

􏶨A name for the route􏶧
􏶦This is mainly for debugging and experimentation
You can leave it blank􏶥
􏶘+􏶙􏶰􏶯􏷔event_annotated_route􏷓􏶮ascii_string􏶭􏶬name􏶫

􏶨The unique id of the route plan.􏶧
􏶦sourced from navigator􏶥
􏶘+􏶙􏶰􏶯􏷔event_annotated_route􏷓􏶮route_plan_identifier􏶭􏲷local_map􏲸􏲷internal􏲸􏲷serializable􏲸􏶬route_plan_id􏶫
􏲹local_map/libs/route/serializable/route_plan_identifier􏲺
􏲱local_map/libs/route/serializable/serializable_route_overlay􏲲

􏶨The events that should occur on the change of particular lanes􏶧
􏶦The change in lanes is expected to be in the same order that they appear in the original route.
The sequence may not contain duplicate lanes.
We are simply taking an existing route, and tagging it with events􏶥
􏶘+􏶙􏶰􏶯􏷔event_annotated_route􏷓􏶮seq􏶭􏳟lane􏳠􏶬event_lanes􏶫

􏶨Region areas representing continuous events over a route􏶧
􏶦Agnostic to lanes
A distance interval over the route containing event information􏶥
􏶘+􏶙􏶰􏶯􏷔event_annotated_route􏷓􏶮seq􏶭􏳟event_region􏳠􏶬event_regions􏶫

􏶨The interval of lanes that need to be evaluated for events􏶧
􏶦Uses the previous and current lanes observed to create an interval for evaluation.
The reason we do this, is because we may not evaluate every lane as we pass over them.
We need to make sure we don't forget to evaluate lanes that we have already passed over.
Although we may store exact distance locations in the evaluation range, the user can still
check and adjust the window at the less discrete lane index.􏶥
􏶘+􏶙􏶰􏶯􏷔event_annotated_route􏷓􏶮event_view􏶭􏶬evaluation range􏶫




􏳃The results of checking invariants on the event annotated route􏳄
􏳁These invariants apply specifically to the SLA event annotated route for SLMT
if any bool is false, we consider it a broken invariant􏳂
􏲿event_annotated_route_invariants􏳀

􏶨checked invariant􏶧
􏶦an invariant to check over the SLA event annotated route for SLMT􏶥
􏶘+􏶙􏶰􏶯􏷔event_annotated_route_invariants􏷓􏶮bool􏶭􏶬evaluation range consistent􏶫􏶪true􏶩

􏶨checked invariant􏶧
􏶦an invariant to check over the SLA event annotated route for SLMT􏶥
􏶘+􏶙􏶰􏶯􏷔event_annotated_route_invariants􏷓􏶮bool􏶭􏶬evaluation range in bounds􏶫􏶪true􏶩

􏶨checked invariant􏶧
􏶦an invariant to check over the SLA event annotated route for SLMT􏶥
􏶘+􏶙􏶰􏶯􏷔event_annotated_route_invariants􏷓􏶮bool􏶭􏶬has not jumped over 1 or more lanes􏶫􏶪true􏶩

􏶨checked invariant􏶧
􏶦an invariant to check over the SLA event annotated route for SLMT􏶥
􏶘+􏶙􏶰􏶯􏷔event_annotated_route_invariants􏷓􏶮bool􏶭􏶬has route hysteresis􏶫􏶪true􏶩

􏶨checked invariant􏶧
􏶦an invariant to check over the SLA event annotated route for SLMT􏶥
􏶘+􏶙􏶰􏶯􏷔event_annotated_route_invariants􏷓􏶮bool􏶭􏶬exists on or after merge point􏶫􏶪true􏶩

􏶨checked invariant􏶧
􏶦an invariant to check over the SLA event annotated route for SLMT􏶥
􏶘+􏶙􏶰􏶯􏷔event_annotated_route_invariants􏷓􏶮bool􏶭􏶬merge point in bounds􏶫􏶪true􏶩

􏶨checked invariant􏶧
􏶦an invariant to check over the SLA event annotated route for SLMT􏶥
􏶘+􏶙􏶰􏶯􏷔event_annotated_route_invariants􏷓􏶮bool􏶭􏶬route has lanes􏶫􏶪true􏶩

􏶨checked invariant􏶧
􏶦an invariant to check over the SLA event annotated route for SLMT􏶥
􏶘+􏶙􏶰􏶯􏷔event_annotated_route_invariants􏷓􏶮bool􏶭􏶬all lanes have size􏶫􏶪true􏶩

􏶨checked invariant􏶧
􏶦an invariant to check over the SLA event annotated route for SLMT􏶥
􏶘+􏶙􏶰􏶯􏷔event_annotated_route_invariants􏷓􏶮bool􏶭􏶬non single lane􏶫􏶪true􏶩


􏳃how and if an invariant should be rendered􏳄
􏳁This culminates conditions around how/if an invariant should be reported, and what the invariant should say􏳂
􏲿event_annotated_route_invariants_rendering􏳀

􏶨whether we should report the invariant to the user􏶧
􏶦if this is false, the invariant may be broken and not reported􏶥
􏶘+􏶙􏶰􏶯􏷔event_annotated_route_invariants_rendering􏷓􏶮bool􏶭􏶬should_print􏶫􏶪true􏶩

􏶨whether the invariant holds􏶧
􏶦an invariant to check over the SLA event annotated route for SLMT􏶥
􏶘+􏶙􏶰􏶯􏷔event_annotated_route_invariants_rendering􏷓􏶮bool􏶭􏶬condition_holds􏶫􏶪true􏶩

􏶨the message to show the user when the invariant is broken􏶧
􏶦this is currently displayed in the OCS􏶥
􏶘+􏶙􏶰􏶯􏷔event_annotated_route_invariants_rendering􏷓􏶮ascii_string􏶭􏶬message􏶫􏶪􏶩




􏳃Testing input used to create lanes during experimentation􏳄
􏳁The lane creation input can be turned into a translated route's actual lane􏳂
􏲿lane_creation_input􏳀

􏶨a unique number to represent the submap a lane is in􏶧
􏶦converted to guid internally􏶥
􏶘+􏶙􏶰􏶯􏷔lane_creation_input􏷓􏶮i32􏶭􏶬submap_id􏶫􏶪0􏶩

􏶨The length of a particular lane􏶧
􏶦becomes the distance annotation of the lane􏶥
􏶘+􏶙􏶰􏶯􏷔lane_creation_input􏷓􏶮d􏶭􏶬distance􏶫􏵚meters􏵛􏶪0􏶩


􏳃Testing input used to generate random lanes for fuzzing an experimentation􏳄
􏳁The random lane creation input can be turned into a translated route's actual lane􏳂
􏲿random_lane_creation_input􏳀

􏶨the lowest value of a random interval to represent the submap a lane is in􏶧
􏶦converted to guid internally􏶥
􏶘+􏶙􏶰􏶯􏷔random_lane_creation_input􏷓􏶮i32􏶭􏶬low_submap_id􏶫􏶪0􏶩

􏶨the highest value of a random interval to represent the submap a lane is in􏶧
􏶦converted to guid internally􏶥
􏶘+􏶙􏶰􏶯􏷔random_lane_creation_input􏷓􏶮i32􏶭􏶬high_submap_id􏶫􏶪10􏶩

􏶨The lowest value length of a particular lane􏶧
􏶦becomes the distance annotation of the lane􏶥
􏶘+􏶙􏶰􏶯􏷔random_lane_creation_input􏷓􏶮d􏶭􏶬low_distance􏶫􏵚meters􏵛􏶪0􏶩

􏶨The highest value length of a particular lane􏶧
􏶦becomes the distance annotation of the lane􏶥
􏶘+􏶙􏶰􏶯􏷔random_lane_creation_input􏷓􏶮d􏶭􏶬high_distance􏶫􏵚meters􏵛􏶪40􏶩


􏶊How we intend to place a marker on a lane􏶉
􏶈Chooses which API to use when placing a marker on a lane􏶇
􏵮􏵯􏶀marker_placement_strategy􏶋
􏶆by percentage􏶅􏶂place the marker based on a determined percentage along the lane􏶁
􏶆by distance􏶅􏶂place the marker based on a determined distance offset along the lane􏶁

􏳃Sometimes we don't want to run a marking algorithm over the entire route.
instead we can provide a view over the route in which to run the algorithm􏳄
􏳁Since some marking algorithms behave by accumulating distance, and detecting loops, choosing which lane the algorithm begins on can change where the marking occur
behaves the same way as iterators􏳂
􏲿algorithm_window􏳀

􏶨The lane index to begin a route algorithm on􏶧
􏶦closed interval􏶥
􏶘+?􏶙􏶰􏶯􏷔algorithm_window􏷓􏶮i32􏶭􏶬start􏶫

􏶨The lane index to end a route algorithm on􏶧
􏶦open interval􏶥
􏶘+?􏶙􏶰􏶯􏷔algorithm_window􏷓􏶮i32􏶭􏶬end􏶫

􏳃Testing input for where to place the marker􏳄
􏳁Markers can be placed on a lane in a variety of ways
this input decides how the user wants to place them􏳂
􏲿marking_placement_input􏳀

􏶨index used when marking a specific lane index􏶧
􏶦can be used during testing to mark based on the "specific lane index" API􏶥
􏶘+􏶙􏶰􏶯􏷔marking_placement_input􏷓􏶮size􏶭􏶬lane index􏶫􏶪0􏶩

􏶨Decides how to place markers on a lane􏶧
􏶦Decides which marker placement inputs to use and which API to call when placing markers􏶥
􏶘+􏶙􏶰􏶯􏷔marking_placement_input􏷓􏶮marker_placement_strategy􏶭􏶬placement_strategy􏶫􏶪marker_placement_strategy_by_percentage􏶩

􏶨A marker can be placed anywhere along the lane􏶧
􏶦For demonstration purposes we'll allow them to be set at a percentage along the lane􏶥
􏶘+􏶙􏶰􏶯􏷔marking_placement_input􏷓􏶮i32􏶭􏶬placement along lane􏶫􏵚percent􏵛􏶪0􏶩

􏶨A marker can be placed anywhere along the lane􏶧
􏶦For demonstration purposes we'll allow them to be set at specific offsets from a chosen lane􏶥
􏶘+􏶙􏶰􏶯􏷔marking_placement_input􏷓􏶮d􏶭􏶬distance offset from lane􏶫􏵚meters􏵛􏶪0􏶩

􏶨A marker can be placed anywhere along the route as the start of a region􏶧
􏶦For demonstration purposes we'll allow them to be set at a percentage along the lane􏶥
􏶘+􏶙􏶰􏶯􏷔marking_placement_input􏷓􏶮i32􏶭􏶬start placement along lane􏶫􏵚percent􏵛􏶪0􏶩

􏶨A marker can be placed anywhere along the route as the start of a region􏶧
􏶦For demonstration purposes we'll allow them to be set at specific offsets from a chosen lane􏶥
􏶘+􏶙􏶰􏶯􏷔marking_placement_input􏷓􏶮d􏶭􏶬start distance offset from lane􏶫􏵚meters􏵛􏶪0􏶩

􏶨A marker can be placed anywhere along the route as the end of a region􏶧
􏶦For demonstration purposes we'll allow them to be set at a percentage along the lane􏶥
􏶘+􏶙􏶰􏶯􏷔marking_placement_input􏷓􏶮i32􏶭􏶬end placement along lane􏶫􏵚percent􏵛􏶪0􏶩

􏶨A marker can be placed anywhere along the route as the end of a region􏶧
􏶦For demonstration purposes we'll allow them to be set at specific offsets from a chosen lane􏶥
􏶘+􏶙􏶰􏶯􏷔marking_placement_input􏷓􏶮d􏶭􏶬end distance offset from lane􏶫􏵚meters􏵛􏶪0􏶩

􏶨The reason for placing the marker􏶧
􏶦Markers can contain a reason for the marking.  This can aid in debugability and choosing how to process the marker later􏶥
􏶘+􏶙􏶰􏶯􏷔marking_placement_input􏷓􏶮string􏶭􏶬reason􏶫

􏳃Triggers for different lane selection algorithms􏳄
􏳁Allows the user to choose and experiment with different lane selection algorithms􏳂
􏲿lane_selection_algorithms􏳀

􏶨use particular marking strategy when annotating a route􏶧
􏶦can be used during testing to mark based on an API􏶥
􏶘+􏶙􏶰􏶯􏷔lane_selection_algorithms􏷓􏶮bool􏶭􏶬exceeding accumulated distance􏶫􏶪false􏶩

􏶨the distance to use when applying the marking strategy􏶧
􏶦essentially the argument to the marking API􏶥
􏶘+􏶙􏶰􏶯􏷔lane_selection_algorithms􏷓􏶮d􏶭􏶬exceeding distance􏶫􏵚meters􏵛􏶪0􏶩

􏶨use particular marking strategy when annotating a route􏶧
􏶦can be used during testing to mark based on an API􏶥
􏶘+􏶙􏶰􏶯􏷔lane_selection_algorithms􏷓􏶮bool􏶭􏶬before exceeding accumulated distance􏶫􏶪false􏶩

􏶨the distance to use when applying the marking strategy􏶧
􏶦essentially the argument to the marking API􏶥
􏶘+􏶙􏶰􏶯􏷔lane_selection_algorithms􏷓􏶮d􏶭􏶬before exceeding distance􏶫􏵚meters􏵛􏶪0􏶩

􏶨use particular marking strategy when annotating a route􏶧
􏶦can be used during testing to mark based on an API􏶥
􏶘+􏶙􏶰􏶯􏷔lane_selection_algorithms􏷓􏶮bool􏶭􏶬prior to loop􏶫􏶪false􏶩

􏶨use particular marking strategy when annotating a route􏶧
􏶦can be used during testing to mark based on an API􏶥
􏶘+􏶙􏶰􏶯􏷔lane_selection_algorithms􏷓􏶮bool􏶭􏶬next unique submap in loop􏶫􏶪false􏶩

􏶨use particular marking strategy when annotating a route􏶧
􏶦can be used during testing to mark based on an API􏶥
􏶘+􏶙􏶰􏶯􏷔lane_selection_algorithms􏷓􏶮bool􏶭􏶬first lane loop􏶫􏶪false􏶩

􏶨use particular marking strategy when annotating a route􏶧
􏶦can be used during testing to mark based on an API􏶥
􏶘+􏶙􏶰􏶯􏷔lane_selection_algorithms􏷓􏶮bool􏶭􏶬all lanes loop􏶫􏶪false􏶩

􏶨use particular marking strategy when annotating a route􏶧
􏶦can be used during testing to mark based on an API􏶥
􏶘+􏶙􏶰􏶯􏷔lane_selection_algorithms􏷓􏶮bool􏶭􏶬after loop􏶫􏶪false􏶩

􏶨use particular marking strategy when annotating a route􏶧
􏶦can be used during testing to mark based on an API􏶥
􏶘+􏶙􏶰􏶯􏷔lane_selection_algorithms􏷓􏶮bool􏶭􏶬after loop second􏶫􏶪false􏶩

􏶨use particular marking strategy when annotating a route􏶧
􏶦can be used during testing to mark based on an API􏶥
􏶘+􏶙􏶰􏶯􏷔lane_selection_algorithms􏷓􏶮bool􏶭􏶬submap transition􏶫􏶪false􏶩

􏶨use particular marking strategy when annotating a route􏶧
􏶦can be used during testing to mark based on an API􏶥
􏶘+􏶙􏶰􏶯􏷔lane_selection_algorithms􏷓􏶮bool􏶭􏶬first􏶫􏶪false􏶩

􏶨use particular marking strategy when annotating a route􏶧
􏶦can be used during testing to mark based on an API􏶥
􏶘+􏶙􏶰􏶯􏷔lane_selection_algorithms􏷓􏶮bool􏶭􏶬last􏶫􏶪false􏶩

􏶨use particular marking strategy when annotating a route􏶧
􏶦can be used during testing to mark based on an API􏶥
􏶘+􏶙􏶰􏶯􏷔lane_selection_algorithms􏷓􏶮bool􏶭􏶬all􏶫􏶪false􏶩

􏶨use particular marking strategy when annotating a route􏶧
􏶦can be used during testing to mark based on an API􏶥
􏶘+􏶙􏶰􏶯􏷔lane_selection_algorithms􏷓􏶮bool􏶭􏶬specific lane index􏶫􏶪false􏶩

􏶨use particular marking strategy when annotating a route􏶧
􏶦can be used during testing to mark based on an API􏶥
􏶘+􏶙􏶰􏶯􏷔lane_selection_algorithms􏷓􏶮bool􏶭􏶬regen sla􏶫􏶪false􏶩

􏶨the distance to use when applying the marking strategy􏶧
􏶦essentially the argument to the marking API􏶥
􏶘+􏶙􏶰􏶯􏷔lane_selection_algorithms􏷓􏶮d􏶭􏶬sla distance􏶫􏵚meters􏵛􏶪0􏶩

􏶨The window along the route to perform the algorithm􏶧
􏶦If the window intervals are not specified, we assume the entire route􏶥
􏶘+􏶙􏶰􏶯􏷔lane_selection_algorithms􏷓􏶮algorithm_window􏶭􏶬apply window􏶫



􏶊The strategy for finding points along a route􏶉
􏶈Decides what interfaces to use when finding places to mark a route􏶇
􏵮􏵯􏶀route_point_discovery􏶋
􏶆by lane􏶅􏶂find lanes in which to place markings􏶁
􏶆by overall route􏶅􏶂place markings anywhere on a route which looking at lanes􏶁


􏳃Testing input used to annotate lanes􏳄
􏳁The marking input can be used to call the appropriate lane marking APIs􏳂
􏲿marking_input􏳀

􏶨The strategy for finding points along a route􏶧
􏶦Decides what interfaces to use when finding places to mark a route􏶥
􏶘+􏶙􏶰􏶯􏷔marking_input􏷓􏶮route_point_discovery􏶭􏶬point discovery􏶫􏵚􏵛􏶪route_point_discovery_by_lane􏶩

􏶨Triggers for different lane selection algorithms􏶧
􏶦Allows the user to choose and experiment with different lane selection algorithms􏶥
􏶘+􏶙􏶰􏶯􏷔marking_input􏷓􏶮lane_selection_algorithms􏶭􏶬lane selection􏶫􏵚􏵛

􏶨How to place a marker on a lane􏶧
􏶦After lanes have been decided, this decides how to place markers on each lane􏶥
􏶘+􏶙􏶰􏶯􏷔marking_input􏷓􏶮marking_placement_input􏶭􏶬placement􏶫􏵚􏵛

􏳃Testing input used to create translated routes during experimentation􏳄
􏳁The route creation input can be turned into a translated route for testing with algorithms􏳂
􏲿route_creation_input􏳀

􏶨A name for the input􏶧
􏶦This is mainly for debugging and having test routes with particular names􏶥
􏶘+􏶙􏶰􏶯􏷔route_creation_input􏷓􏶮string􏶭􏶬name􏶫

􏶨Each of the creation information needed for making lanes􏶧
􏶦Used to create each lane of the translated route􏶥
􏶘+􏶙􏶰􏶯􏷔route_creation_input􏷓􏶮seq􏶭􏳟lane_creation_input􏳠􏶬lane_inputs􏶫

􏶨The marking strategies to use when annotating the route􏶧
􏶦This is mainly for debugging and having test routes with particular marking APIs called􏶥
􏶘+􏶙􏶰􏶯􏷔route_creation_input􏷓􏶮marking_input􏶭􏶬marking_strategy􏶫

􏳃Testing input used to create random translated routes during experimentation􏳄
􏳁The route creation input can be turned into a translated route for testing with algorithms􏳂
􏲿random_route_creation_input􏳀

􏶨decide whether to generate the same randomness during each program invocation􏶧
􏶦deterministic random will produce the same sequence of random numbers using a stationary seed on each program invocation
nondeterministic random on the other hand, will produce a different sequence of random numbers using a random device for program invocation
If you need to test something whose implementation is inherently involved in randomness, it is suggested that you use deterministic random to avoid any test flakiness
deterministic random would be equivalent to hard coding the random sequence you want to use􏶥
􏶘+􏶙􏶰􏶯􏷔random_route_creation_input􏷓􏶮bool􏶭􏶬deterministic random􏶫􏶪true􏶩

􏶨the smallest number of lanes we will create in a generated route􏶧
􏶦Used to decide how many generated lanes will be created􏶥
􏶘+􏶙􏶰􏶯􏷔random_route_creation_input􏷓􏶮i32􏶭􏶬low_lane_count􏶫􏶪0􏶩

􏶨the highest number of lanes we will create in a generated route􏶧
􏶦Used to decide how many generated lanes will be created􏶥
􏶘+􏶙􏶰􏶯􏷔random_route_creation_input􏷓􏶮i32􏶭􏶬high_lane_count􏶫􏶪50􏶩

􏶨configuration used to generate random lane inputs􏶧
􏶦Used to create each lane of the translated route􏶥
􏶘+􏶙􏶰􏶯􏷔random_route_creation_input􏷓􏶮random_lane_creation_input􏶭􏶬lane_inputs􏶫

􏳃information about an individual lane selection􏳄
􏳁these lane selections are collected through various selection algorithms􏳂
􏲿lane_selection􏳀

􏶨the index to the route's lane􏶧
􏶦selection algorithms select lanes by storing their indexes􏶥
􏶘+􏶙􏶰􏶯􏷔lane_selection􏷓􏶮size􏶭􏶬index􏶫􏶪0􏶩

􏶨the reason the lane was selected􏶧
􏶦extra meta information about the lane selection􏶥
􏶘+􏶙􏶰􏶯􏷔lane_selection􏷓􏶮unordered_strings􏶭􏶬reason􏶫􏶪􏶩


􏳃The results of performing a selection algorithm over a route􏳄
􏳁contains lane selection information􏳂
􏲿route_selections􏳀

􏶨lane selections made over a route􏶧
􏶦populated by calling 1 or more lane selection algorithms􏶥
􏶘+􏶙􏶰􏶯􏷔route_selections􏷓􏶮seq􏶭􏳟lane_selection􏳠􏶬lanes􏶫


􏳃All of the data provided by the SLMT in order to create an event route􏳄
􏳁This structure represents an integration point between the SLMT and the event route creation API
Everything in this structure must be provided by the SLMT in order to create an event route for the SLMT􏳂
􏲿slmt_route_information􏳀

􏶨whether or not the route has changed prior to the previous task cycle􏶧
􏶦The SLMT decides whether the route has changed􏶥
􏶘+􏶙􏶰􏶯􏷔slmt_route_information􏷓􏶮bool􏶭􏶬route changed􏶫􏶪false􏶩

􏶨The previous lane index representing the AV's previous location􏶧
􏶦The previous lane index will not be used if the route has changed􏶥
􏶘+􏶙􏶰􏶯􏷔slmt_route_information􏷓􏶮i32􏶭􏶬previous lane index􏶫􏶪0􏶩

􏶨The current lane index representing the AV's current location􏶧
􏶦This should be ahead of the previous lane index􏶥
􏶘+􏶙􏶰􏶯􏷔slmt_route_information􏷓􏶮i32􏶭􏶬current lane index􏶫􏶪0􏶩

􏶨The merge point of the route􏶧
􏶦If the route was merged from another route, this index will be the start of the second route before the merge occurred
We can use this information to ensure a distance SLA􏶥
􏶘+􏶙􏶰􏶯􏷔slmt_route_information􏷓􏶮i32􏶭􏶬merge point index􏶫􏶪0􏶩



􏳃Information that can be derived by analyzing the current state of the event annotated route􏳄
􏳁This is additional meta information that we can learn from looking at the event annotated route􏳂
􏲿event_annotated_route_derived_information􏳀

􏶨checked invariants􏶧
􏶦invariants checked over the SLA event annotated route for SLMT􏶥
􏶘+􏶙􏶰􏶯􏷔event_annotated_route_derived_information􏷓􏶮event_annotated_route_invariants􏶭􏶬invariants􏶫􏶪􏶩

􏶨An interpretation on how to process the route based on the state of the event view􏶧
􏶦We keep an interval over the route in order to determine what events need to be processed
however, a new route can't have a starting position in the interval (because no previous lane was visited)
and an expired route has no ending position in the interval (because the progress index may no longer correlate to the route)
we observe the optionality of the event view to determine the contextual state of the route􏶥
􏶘+􏶙􏶰􏶯􏷔event_annotated_route_derived_information􏷓􏶮route_status􏶭􏶬status􏶫􏶪route_status_invalid􏶩


􏳃All of the ways a route can be created􏳄
􏳁This supports users such as SLMT, testing environments, graphical experimentation tools, and used by fuzzers􏳂
􏲿route_creation􏳀

􏶨Testing input used to create translated routes during experimentation􏶧
􏶦The route creation input can be turned into a translated route for testing with algorithms􏶥
􏶘+􏶙􏶰􏶯􏷔route_creation􏷓􏶮route_creation_input􏶭􏶬regular􏶫􏶪􏶩

􏶨Testing input used to create random translated routes during experimentation􏶧
􏶦The route creation input can be turned into a translated route for testing with algorithms􏶥
􏶘+􏶙􏶰􏶯􏷔route_creation􏷓􏶮random_route_creation_input􏶭􏶬random􏶫􏶪􏶩

􏶨All of the data provided by the SLMT in order to create an event route􏶧
􏶦This structure represents an integration point between the SLMT and the event route creation API
Everything in this structure must be provided by the SLMT in order to create an event route for the SLMT
optional because we may not populate the event annotated route's state based on slmt information􏶥
􏶘+?􏶙􏶰􏶯􏷔route_creation􏷓􏶮slmt_route_information􏶭􏶬slmt􏶫􏶪􏶩

􏳃Types that exist to be used between API alls related to the event annotated route􏳄
􏳁These are types that are not usually useful on their own but are returned by some APIs to be fed to other APIs to update the state of other models􏳂
􏲿api_intermediary􏳀

􏶨selections that have been made on a route, but not yet used to apply events􏶧
􏶦these are usually gathered first before being used to mark events on the route􏶥
􏶘+􏶙􏶰􏶯􏷔api_intermediary􏷓􏶮route_selections􏶭􏶬selections􏶫􏶪􏶩

􏶨decides which invariants are worth checking􏶧
􏶦used internally by APIs when looking for held invariants􏶥
􏶘+􏶙􏶰􏶯􏷔api_intermediary􏷓􏶮event_annotated_route_invariants_rendering􏶭􏶬rendering􏶫􏶪􏶩

􏳃All data related to creating routes, marking events, and controlling/analyzing the event annotated route cycle over cycle􏳄
􏳁The root of the data model􏳂
􏲿route_marking􏳀

􏶨The data model for creating event annotated routes􏶧
􏶦The immutable model for creating the event annotated route model􏶥
􏶘+􏶙􏶰􏶯􏷔route_marking􏷓􏶮route_creation􏶭􏶬creation􏶫􏶪􏶩

􏶨The data model of the event annotated route􏶧
􏶦The stateful model that APIs are built around􏶥
􏶘+􏶙􏶰􏶯􏷔route_marking􏷓􏶮event_annotated_route􏶭􏶬event_route􏶫􏶪􏶩

􏶨The data model for observations made on the event annotated route􏶧
􏶦The immutable model for getting additional information in regards to the event annotated route􏶥
􏶘+􏶙􏶰􏶯􏷔route_marking􏷓􏶮event_annotated_route_derived_information􏶭􏶬derived􏶫􏶪􏶩

􏶨Types that exist to be used between API alls related to the event annotated route􏶧
􏶦These are types that are not usually useful on their own but are returned by some APIs to be fed to other APIs to update the state of other models􏶥
􏶘+􏶙􏶰􏶯􏷔route_marking􏷓􏶮api_intermediary􏶭􏶬intermediary􏶫􏶪􏶩

