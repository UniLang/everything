􏷲algorithm for deciding whether a worker should keep a dequeued operation􏷱
􏷰When a worker takes an entry off of the queue, should it decide to keep that entry or reject and requeue it?
In some sense, it should keep all entries because they have already been vetted for that particular worker.
This is because the scheduler matches operations to particular queues, and workers match themselves to which queues they want to read from.  
But should the worker always blindly take what it pops off? And can they trust the scheduler?

There may be situations where the worker chooses to give operations back based on particular contexts not known to the scheduler.  
For example, you might have a variety of workers with different amounts of cpu cores all sharing the same queue.
The queue may accept N-core operations, because N-core workers exist in the pool, but there are additionally some lower core workers that would need to forfeit running the operation.
All the reasons a worker may decide it can't take on the operation and should give it back are implemented here.
The settings provided allow varying amount of leniency when evaluating the platform properties.􏷯
􏷞build􏷝􏷞buildfarm􏷝􏷞worker􏷝

􏷤􏷣􏷦com.google.common.collect.LinkedHashMultimap􏷥
􏷤􏷣􏷦com.google.common.collect.Lists􏷥
􏷤􏷣􏷦com.google.common.collect.SetMultimap􏷥
􏷤􏷣􏷦java.util.List􏷥
􏷤􏷣􏷦build.buildfarm.common.redis.BalancedRedisQueue􏷥
􏷤􏷣􏷦redis.clients.jedis.JedisCluster􏷥
􏷤􏷣􏷦java.util.HashSet􏷥
􏷤􏷣􏷦java.util.Map􏷥
􏷤􏷣􏷦java.util.Set􏷥
􏷤􏷣􏷦com.google.common.collect.ImmutableSet􏷥
􏷤􏷣􏷦com.google.common.collect.ImmutableSetMultimap􏷥
􏷤􏷣􏷦java.util.stream.Collectors􏷥
􏷤􏷣􏷦build.bazel.remote.execution.v2.Action􏷥
􏷤􏷣􏷦build.bazel.remote.execution.v2.ActionResult􏷥
􏷤􏷣􏷦build.bazel.remote.execution.v2.Command􏷥
􏷤􏷣􏷦com.google.longrunning.Operation􏷥
􏷤􏷣􏷦com.google.protobuf.util.JsonFormat􏷥
􏷤􏷣􏷦org.json.simple.JSONObject􏷥
􏷤􏷣􏷦com.google.protobuf.InvalidProtocolBufferException􏷥
􏷤􏷣􏷦com.google.protobuf.Duration􏷥
􏷤􏷣􏷦com.google.protobuf.util.Durations􏷥
􏷤􏷣􏷦io.grpc.Deadline􏷥
􏷤􏷣􏷦java.util.concurrent.TimeUnit􏷥
􏷤􏷣􏷦build.buildfarm.common.grpc.GrpcEndpoint􏷥
􏷤􏷣􏷦build.bazel.remote.execution.v2.ExecuteRequest􏷥
􏷤􏷣􏷦build.bazel.remote.execution.v2.ExecutionGrpc􏷥
􏷤􏷣􏷦build.bazel.remote.execution.v2.RequestMetadata􏷥
􏷤􏷣􏷦build.bazel.remote.execution.v2.WaitExecutionRequest􏷥
􏷤􏷣􏷦build.buildfarm.common.Time􏷥
􏷤􏷣􏷦build.buildfarm.common.Watcher􏷥
􏷤􏷣􏷦build.buildfarm.common.grpc.GrpcEndpoint􏷥
􏷤􏷣􏷦build.buildfarm.common.grpc.GrpcEndpointHandler􏷥
􏷤􏷣􏷦build.buildfarm.common.grpc.TracingMetadataUtils􏷥
􏷤􏷣􏷦build.buildfarm.instance.Instance􏷥
􏷤􏷣􏷦build.buildfarm.metrics.MetricsPublisher􏷥
􏷤􏷣􏷦com.google.common.util.concurrent.FutureCallback􏷥
􏷤􏷣􏷦com.google.common.util.concurrent.ListenableFuture􏷥
􏷤􏷣􏷦com.google.longrunning.Operation􏷥
􏷤􏷣􏷦com.google.protobuf.util.Durations􏷥
􏷤􏷣􏷦io.grpc.Context􏷥
􏷤􏷣􏷦io.grpc.Status􏷥
􏷤􏷣􏷦io.grpc.stub.ServerCallStreamObserver􏷥
􏷤􏷣􏷦io.grpc.stub.StreamObserver􏷥
􏷤􏷣􏷦java.util.concurrent.CancellationException􏷥
􏷤􏷣􏷦java.util.concurrent.ScheduledExecutorService􏷥
􏷤􏷣􏷦java.util.concurrent.TimeUnit􏷥
􏷤􏷣􏷦java.util.logging.Level􏷥
􏷤􏷣􏷦java.util.logging.Logger􏷥
􏷤􏷣􏷦javax.annotation.Nullable􏷥
􏷤i􏷣􏷦com.google.common.util.concurrent.MoreExecutors.directExecutor􏷥
􏷤􏷣􏷦redis.clients.jedis.Jedis􏷥
􏷤􏷣􏷦redis.clients.jedis.JedisCluster􏷥
􏷤􏷣􏷦redis.clients.jedis.Response􏷥
􏷤􏷣􏷦redis.clients.jedis.ScanParams􏷥
􏷤􏷣􏷦redis.clients.jedis.ScanResult􏷥
􏷤􏷣􏷦java.util.List􏷥
􏷤􏷣􏷦java.util.ArrayList􏷥
􏷤􏷣􏷦com.google.longrunning.Operation􏷥
􏷤􏷣􏷦java.io.IOException􏷥
􏷤􏷣􏷦java.util.Collection􏷥
􏷤􏷣􏷦redis.clients.jedis.Jedis􏷥
􏷤􏷣􏷦redis.clients.jedis.JedisPool􏷥
􏷤􏷣􏷦redis.clients.jedis.JedisCluster􏷥
􏷤􏷣􏷦redis.clients.jedis.ScanParams􏷥
􏷤􏷣􏷦redis.clients.jedis.ScanResult􏷥
􏷤􏷣􏷦com.google.protobuf.util.JsonFormat􏷥
􏷤􏷣􏷦build.buildfarm.v1test.ExecutingOperationMetadata􏷥
􏷤􏷣􏷦build.buildfarm.v1test.QueuedOperationMetadata􏷥
􏷤􏷣􏷦build.buildfarm.v1test.CompletedOperationMetadata􏷥
􏷤􏷣􏷦build.bazel.remote.execution.v2.RequestMetadata􏷥
􏷤􏷣􏷦build.bazel.remote.execution.v2.ExecuteOperationMetadata􏷥
􏷤􏷣􏷦com.google.protobuf.InvalidProtocolBufferException􏷥
􏷤􏷣􏷦com.google.rpc.PreconditionFailure􏷥
􏷤􏷣􏷦build.buildfarm.v1test.CompletedOperationMetadata􏷥
􏷤􏷣􏷦build.buildfarm.v1test.CompletedOperationMetadata􏷥
􏷤􏷣􏷦build.buildfarm.v1test.ExecutingOperationMetadata􏷥
􏷤􏷣􏷦build.buildfarm.v1test.OperationTimesBetweenStages􏷥
􏷤􏷣􏷦build.buildfarm.v1test.QueuedOperation􏷥
􏷤􏷣􏷦build.buildfarm.v1test.QueuedOperationMetadata􏷥
􏷤􏷣􏷦build.buildfarm.v1test.StageInformation􏷥
􏷤􏷣􏷦build.buildfarm.v1test.Tree􏷥
􏷤􏷣􏷦build.buildfarm.v1test.WorkerProfileMessage􏷥
􏷤􏷣􏷦build.bazel.remote.execution.v2.Action􏷥
􏷤􏷣􏷦build.bazel.remote.execution.v2.ActionResult􏷥
􏷤􏷣􏷦build.bazel.remote.execution.v2.Command􏷥
􏷤􏷣􏷦build.bazel.remote.execution.v2.Command.EnvironmentVariable􏷥
􏷤􏷣􏷦build.bazel.remote.execution.v2.Digest􏷥
􏷤􏷣􏷦build.bazel.remote.execution.v2.Directory􏷥
􏷤􏷣􏷦build.bazel.remote.execution.v2.DirectoryNode􏷥
􏷤􏷣􏷦build.bazel.remote.execution.v2.ExecuteOperationMetadata􏷥
􏷤􏷣􏷦build.bazel.remote.execution.v2.ExecuteResponse􏷥
􏷤􏷣􏷦build.bazel.remote.execution.v2.ExecutedActionMetadata􏷥
􏷤􏷣􏷦build.bazel.remote.execution.v2.FileNode􏷥
􏷤􏷣􏷦build.bazel.remote.execution.v2.OutputDirectory􏷥
􏷤􏷣􏷦build.bazel.remote.execution.v2.OutputFile􏷥
􏷤􏷣􏷦build.bazel.remote.execution.v2.RequestMetadata􏷥
􏷤􏷣􏷦build.bazel.remote.execution.v2.ServerCapabilities􏷥
􏷤􏷣􏷦build.buildfarm.instance.Utils􏷥
􏷤􏷣􏷦com.google.protobuf.ByteString􏷥
􏷤􏷣􏷦org.json.simple.JSONObject􏷥
􏷤􏷣􏷦org.json.simple.JSONValue􏷥
􏷤􏷣􏷦org.json.simple.parser.JSONParser􏷥
􏷤􏷣􏷦build.bazel.remote.execution.v2.Platform􏷥
􏷤􏷣􏷦build.buildfarm.v1test.QueueEntry􏷥
􏷤􏷣􏷦com.google.common.collect.Iterables􏷥

􏲏􏲐􏲍com.google.common.collect.LinkedHashMultimap􏲎
􏲏􏲐􏲍com.google.common.collect.Lists􏲎
􏲏􏲐􏲍com.google.common.collect.SetMultimap􏲎
􏲏􏲐􏲍java.util.List􏲎
􏲏􏲐􏲍build.buildfarm.common.redis.BalancedRedisQueue􏲎
􏲏􏲐􏲍redis.clients.jedis.JedisCluster􏲎
􏲏􏲐􏲍java.util.HashSet􏲎
􏲏􏲐􏲍java.util.Map􏲎
􏲏􏲐􏲍java.util.Set􏲎
􏲏􏲐􏲍com.google.common.collect.ImmutableSet􏲎
􏲏􏲐􏲍com.google.common.collect.ImmutableSetMultimap􏲎
􏲏􏲐􏲍java.util.stream.Collectors􏲎
􏲏􏲐􏲍build.bazel.remote.execution.v2.Command􏲎
􏲏􏲐􏲍build.bazel.remote.execution.v2.Platform􏲎
􏲏􏲐􏲍build.bazel.remote.execution.v2.Platform.Property􏲎
􏲏􏲐􏲍com.google.common.collect.Iterables􏲎
􏲏􏲐􏲍java.util.Collections􏲎
􏲏􏲐􏲍org.json.simple.parser.JSONParser􏲎
􏲏􏲐􏲍org.json.simple.parser.ParseException􏲎
􏲏􏲐􏲍redis.clients.jedis.JedisCluster􏲎
􏲏􏲐􏲍org.junit.Test􏲎
􏲏􏲐􏲍java.util.List􏲎
􏲏􏲐􏲍java.util.ArrayList􏲎
􏲏􏲐􏲍org.junit.runner.RunWith􏲎
􏲏􏲐􏲍org.junit.runners.JUnit4􏲎
􏲏􏲐􏲍java.lang.Thread􏲎
􏲏􏲐􏲍java.util.concurrent.TimeUnit􏲎
􏲏􏲐􏲍java.lang.RuntimeException􏲎
􏲏􏲐􏲍java.io.IOException􏲎
􏲏􏲐􏲍java.util.function.Supplier􏲎
􏲏􏲐􏲍org.mockito.Mock􏲎
􏲏􏲐􏲍org.mockito.MockitoAnnotations􏲎
􏲏􏲐􏲍java.util.Arrays􏲎
􏲏i􏲐􏲍com.google.common.truth.Truth.assertThat􏲎
􏲏i􏲐􏲍org.mockito.Mockito.eq􏲎
􏲏i􏲐􏲍org.mockito.Mockito.mock􏲎
􏲏i􏲐􏲍org.mockito.Mockito.times􏲎
􏲏i􏲐􏲍org.mockito.Mockito.verify􏲎
􏲏i􏲐􏲍org.mockito.Mockito.when􏲎
􏲏i􏲐􏲍org.mockito.Mockito.any􏲎
􏲏􏲐􏲍java.util.HashSet􏲎
􏲏􏲐􏲍java.util.Map􏲎
􏲏􏲐􏲍java.util.Set􏲎
􏲏􏲐􏲍com.google.common.collect.ImmutableList􏲎
􏲏􏲐􏲍build.buildfarm.common.redis.ProvisionedRedisQueue􏲎
􏲏􏲐􏲍com.google.common.collect.Maps􏲎
􏲏􏲐􏲍com.google.common.collect.HashMultimap􏲎
􏲏􏲐􏲍java.util.stream.Collectors􏲎
􏲏􏲐􏲍com.google.common.collect.SetMultimap􏲎
􏲏􏲐􏲍com.google.common.collect.Multimap􏲎
􏲏􏲐􏲍build.buildfarm.worker.ResourceLimits􏲎
􏲏􏲐􏲍build.buildfarm.worker.ResourceDecider􏲎
􏲏􏲐􏲍build.buildfarm.v1test.QueueEntry􏲎

􏶨the exec_property and platform property name for setting min cores􏶧
􏶦this is decided between client and server􏶥
􏶘-s􏶙􏶰c􏶯􏶮String􏶭􏶬exec property min cores􏶫􏶪"min-cores"􏶩

􏶨the exec_property and platform property name for setting max cores􏶧
􏶦this is decided between client and server􏶥
􏶘-s􏶙􏶰c􏶯􏶮String􏶭􏶬exec property max cores􏶫􏶪"max-cores"􏶩

􏶨a platform property decided and assigned to a worker􏶧
􏶦this often correlates to execute width of the workers (the max amount of cores it is willing to give an operation)􏶥
􏶘-s􏶙􏶰c􏶯􏶮String􏶭􏶬worker platform cores property􏶫􏶪"cores"􏶩

􏷐Decide whether the worker should keep the operation or put it back on the queue􏷏
􏶠Compares the platform properties of the worker to the operation's platform properties􏶡
􏷘+s􏷗􏴅Observer􏴆􏷒should keep operation􏷑
􏶜􏶝􏷆DequeueMatchSettings􏷅􏷄match settings􏷃􏷀the provisions of the worker􏶿
􏶜􏶝􏷆SetMultimap<String, String>􏷅􏷄worker provisions􏷃􏷀the provisions of the worker􏶿
􏶜􏶝􏷆QueueEntry􏷅􏷄queue entry􏷃􏷀an entry recently removed from the queue􏶿
􏶾bool􏶽􏶼should keep operation􏶻􏶺whether or not the worker should accept or reject the queue entry􏶹
􏶴
  
  //if the queue entry was not actually dequeued, should we still accept it?
  //TODO(luxe): find out why its currently like this, and if that still makes sense.
  if (queueEntry == null){
    return true;
  }
  
  return shouldKeepViaPlatform(matchSettings,workerProvisions,queueEntry.getPlatform());
􏶳
􏴱keep null queue entry􏴲􏴯regular􏴰
􏲝null queue entries should be kept􏲞
􏲛this decision has changed􏲜
􏴭
    //ARRANGE
    DequeueMatchSettings settings = new DequeueMatchSettings();
    SetMultimap<String, String> workerProvisions = HashMultimap.create();
    QueueEntry entry = null;
    
    //ACT
    boolean shouldKeep = DequeueMatchEvaluator.shouldKeepOperation(settings,workerProvisions,entry);
    
    //ASSERT
    assertThat(shouldKeep).isTrue();
􏴮
􏴱keep empty queue entry􏴲􏴯regular􏴰
􏲝empty plaform queue entries should be kept􏲞
􏲛properties are being evaluated differently now􏲜
􏴭
    //ARRANGE
    DequeueMatchSettings settings = new DequeueMatchSettings();
    SetMultimap<String, String> workerProvisions = HashMultimap.create();
    QueueEntry entry = QueueEntry.newBuilder().setPlatform(Platform.newBuilder()).build();
    
    //ACT
    boolean shouldKeep = DequeueMatchEvaluator.shouldKeepOperation(settings,workerProvisions,entry);
    
    //ASSERT
    assertThat(shouldKeep).isTrue();
􏴮
􏴱valid min cores queue entry􏴲􏴯regular􏴰
􏲝the entry should be kept because the min cores are valid for the worker properties􏲞
􏲛either the property names changed or we evaluate these properties differently􏲜
􏴭
    //ARRANGE
    DequeueMatchSettings settings = new DequeueMatchSettings();
    
    SetMultimap<String, String> workerProvisions = HashMultimap.create();
    workerProvisions.put("cores","11");
    
    QueueEntry entry = QueueEntry.newBuilder().setPlatform(Platform.newBuilder()
    .addProperties(Platform.Property.newBuilder()
    .setName("min-cores").setValue("10"))).build();
    
    //ACT
    boolean shouldKeep = DequeueMatchEvaluator.shouldKeepOperation(settings,workerProvisions,entry);
    
    //ASSERT
    //the worker accepts because it has more cores than the min-cores requested
    assertThat(shouldKeep).isTrue();
􏴮

􏴱invalid min cores queue entry􏴲􏴯regular􏴰
􏲝the entry should not be kept because the min cores are invalid for the worker properties􏲞
􏲛either the property names changed or we evaluate these properties differently􏲜
􏴭
    //ARRANGE
    DequeueMatchSettings settings = new DequeueMatchSettings();
    
    SetMultimap<String, String> workerProvisions = HashMultimap.create();
    workerProvisions.put("cores","10");
    
    QueueEntry entry = QueueEntry.newBuilder().setPlatform(Platform.newBuilder()
    .addProperties(Platform.Property.newBuilder()
    .setName("min-cores").setValue("11"))).build();
    
    //ACT
    boolean shouldKeep = DequeueMatchEvaluator.shouldKeepOperation(settings,workerProvisions,entry);
    
    //ASSERT
    //the worker rejects because it has less cores than the min-cores requested
    assertThat(shouldKeep).isFalse();
􏴮

􏴱max cores do not influence acceptance􏴲􏴯regular􏴰
􏲝a higher max-core than what the worker has does not result in rejection􏲞
􏲛either the property names changed or max-cores is evaluated differently􏲜
􏴭
    //ARRANGE
    DequeueMatchSettings settings = new DequeueMatchSettings();
    
    SetMultimap<String, String> workerProvisions = HashMultimap.create();
    workerProvisions.put("cores","10");
    
    QueueEntry entry = QueueEntry.newBuilder().setPlatform(Platform.newBuilder()
    .addProperties(Platform.Property.newBuilder()
    .setName("min-cores").setValue("10"))
    .addProperties(Platform.Property.newBuilder()
    .setName("max-cores").setValue("20"))
    ).build();
    
    //ACT
    boolean shouldKeep = DequeueMatchEvaluator.shouldKeepOperation(settings,workerProvisions,entry);
    
    //ASSERT
    //the worker accepts because it has the same cores as the min-cores requested
    assertThat(shouldKeep).isTrue();
􏴮

􏴱unmatched properties rejection acceptance􏴲􏴯regular􏴰
􏲝the worker should reject a property if it is not provided in the worker platform􏲞
􏲛ensuring exact property matches is not behaving correctly by default􏲜
􏴭
    //ARRANGE
    DequeueMatchSettings settings = new DequeueMatchSettings();
    
    SetMultimap<String, String> workerProvisions = HashMultimap.create();
    
    QueueEntry entry = QueueEntry.newBuilder().setPlatform(Platform.newBuilder()
    .addProperties(Platform.Property.newBuilder()
    .setName("foo-key").setValue("foo-value"))
    ).build();
    
    //ACT
    boolean shouldKeep = DequeueMatchEvaluator.shouldKeepOperation(settings,workerProvisions,entry);
    
    //ASSERT
    assertThat(shouldKeep).isFalse();
    
    //ARRANGE
    settings.acceptEverything = true;
    
    //ACT
    shouldKeep = DequeueMatchEvaluator.shouldKeepOperation(settings,workerProvisions,entry);
    
    //ASSERT
    assertThat(shouldKeep).isTrue();
    
    //ARRANGE
    settings.allowUnmatched = true;
    
    //ACT
    shouldKeep = DequeueMatchEvaluator.shouldKeepOperation(settings,workerProvisions,entry);
    
    //ASSERT
    assertThat(shouldKeep).isTrue();
􏴮

􏷐Decide whether the worker should keep the operation or put it back on the queue􏷏
􏶠Compares the platform properties of the worker to the operation's platform properties􏶡
􏷘+s􏷗􏴅Observer􏴆􏷒should keep operation􏷑
􏶜􏶝􏷆DequeueMatchSettings􏷅􏷄match settings􏷃􏷀the provisions of the worker􏶿
􏶜􏶝􏷆SetMultimap<String, String>􏷅􏷄worker provisions􏷃􏷀the provisions of the worker􏶿
􏶜􏶝􏷆Command􏷅􏷄command􏷃􏷀a command to evaluate􏶿
􏶾bool􏶽􏶼should keep operation􏶻􏶺whether or not the worker should accept or reject the queue entry􏶹
􏶴
  
  return shouldKeepViaPlatform(matchSettings,workerProvisions,command.getPlatform());
􏶳

􏷐Decide whether the worker should keep the operation via platform or put it back on the queue􏷏
􏶠Compares the platform properties of the worker to the platform properties of the operation􏶡
􏷘-s􏷗􏴅Observer􏴆􏷒should keep via platform􏷑
􏶜􏶝􏷆DequeueMatchSettings􏷅􏷄match settings􏷃􏷀the provisions of the worker􏶿
􏶜􏶝􏷆SetMultimap<String, String>􏷅􏷄worker provisions􏷃􏷀the provisions of the worker􏶿
􏶜􏶝􏷆Platform􏷅􏷄platform􏷃􏷀the platforms of operation􏶿
􏶾bool􏶽􏶼should keep operation􏶻􏶺whether or not the worker should accept or reject the operation􏶹
􏶴
  //attempt to execute everything it gets off the queue.
  if (matchSettings.acceptEverything){
    return true;
  }
  
  return satisfiesProperties(matchSettings,workerProvisions,platform);
􏶳

􏷐Decide whether the worker should keep the operation by comparing its platform properties with the queue entry􏷏
􏶠Compares the platform properties of the worker to the platform properties􏶡
􏷘-s􏷗􏴅Observer􏴆􏷒satisfies properties􏷑
􏶜􏶝􏷆DequeueMatchSettings􏷅􏷄match settings􏷃􏷀the provisions of the worker􏶿
􏶜􏶝􏷆SetMultimap<String, String>􏷅􏷄worker provisions􏷃􏷀the provisions of the worker􏶿
􏶜􏶝􏷆Platform􏷅􏷄platform􏷃􏷀the platforms of operation􏶿
􏶾bool􏶽􏶼should keep operation􏶻􏶺whether or not the worker should accept or reject the queue entry􏶹
􏶴
    for (Platform.Property property : platform.getPropertiesList()) {
      if (!satisfiesProperty(matchSettings, workerProvisions, property)) {
        return false;
      }
    }
    return true;
􏶳

􏷐Decide whether the worker should keep the operation by comparing its platform properties with a queue entry property􏷏
􏶠Checks for certain exact matches on key/values􏶡
􏷘-s􏷗􏴅Observer􏴆􏷒satisfies property􏷑
􏶜􏶝􏷆DequeueMatchSettings􏷅􏷄match settings􏷃􏷀the provisions of the worker􏶿
􏶜􏶝􏷆SetMultimap<String, String>􏷅􏷄worker provisions􏷃􏷀the provisions of the worker􏶿
􏶜􏶝􏷆Platform.Property􏷅􏷄property􏷃􏷀a property of the queued entry􏶿
􏶾bool􏶽􏶼should keep operation􏶻􏶺whether or not the worker should accept or reject the queue entry􏶹
􏶴
  
    //validate min cores
    if (property.getName().equals(EXEC_PROPERTY_MIN_CORES)) {
      if (!workerProvisions.containsKey(WORKER_PLATFORM_CORES_PROPERTY)) {
        return false;
      }
      
      int coresRequested = Integer.parseInt(property.getValue());
      int possibleCores = Integer.parseInt(Iterables.getOnlyElement(workerProvisions.get(WORKER_PLATFORM_CORES_PROPERTY)));
      return possibleCores >= coresRequested;
    }
    
    //validate max cores
    if (property.getName().equals(EXEC_PROPERTY_MAX_CORES)) {
      return true;
    }
    
    //accept other properties not specified on the worker
    if (matchSettings.allowUnmatched){
      return true;
    }
    
    //ensure exact matches
    return workerProvisions.containsEntry(property.getName(), property.getValue())
        || workerProvisions.containsEntry(property.getName(), "*");
    
􏶳