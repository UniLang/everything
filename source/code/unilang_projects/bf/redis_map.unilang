􏶞o􏶟
􏷲a redis map􏷱
􏷰a redis map is an implementation of a map data structure which internally uses redis to store and distribute the data.
Its important to know that the lifetime of the map persists before and after the map data structure is created (since it exists in redis)
Therefore, two redis maps with the same name, would in fact be the same underlying redis map􏷯
􏷞build􏷝􏷞buildfarm􏷝􏷞common􏷝􏷞redis􏷝

􏷤􏷣􏷦redis.clients.jedis.JedisCluster􏷥
􏷤􏷣􏷦java.util.List􏷥
􏷤􏷣􏷦java.util.Set􏷥
􏷤􏷣􏷦java.util.HashSet􏷥
􏷤􏷣􏷦java.util.Iterator􏷥
􏷤􏷣􏷦redis.clients.jedis.ScanResult􏷥
􏷤􏷣􏷦redis.clients.jedis.ScanParams􏷥
􏷤􏷣􏷦redis.clients.jedis.Jedis􏷥
􏷤􏷣􏷦redis.clients.jedis.JedisPool􏷥
􏷤􏷣􏷦java.util.ArrayList􏷥
􏷤􏷣􏷦build.buildfarm.common.StringVisitor􏷥
􏷤􏷣􏷦java.util.concurrent.TimeUnit􏷥
􏷤􏷣􏷦java.util.concurrent.TimeUnit.MILLISECONDS􏷥
􏷤􏷣􏷦java.util.concurrent.ExecutorService􏷥
􏷤􏷣􏷦java.util.concurrent.Executors􏷥
􏷤􏷣􏷦java.util.concurrent.TimeoutException􏷥
􏷤􏷣􏷦java.util.concurrent.Future􏷥
􏷤􏷣􏷦com.google.common.collect.Iterables􏷥
􏷤􏷣􏷦redis.clients.jedis.JedisClusterPipeline􏷥
􏷤􏷣􏷦build.buildfarm.common.ScanCount􏷥

􏲏􏲐􏲍build.buildfarm.instance.shard.JedisClusterFactory􏲎
􏲏􏲐􏲍build.buildfarm.instance.shard.queues.RedisQueue􏲎
􏲏􏲐􏲍build.buildfarm.common.StringVisitor􏲎
􏲏􏲐􏲍redis.clients.jedis.JedisCluster􏲎
􏲏􏲐􏲍org.junit.Test􏲎
􏲏􏲐􏲍java.util.List􏲎
􏲏􏲐􏲍java.util.ArrayList􏲎
􏲏􏲐􏲍org.junit.runner.RunWith􏲎
􏲏􏲐􏲍org.junit.runners.JUnit4􏲎
􏲏􏲐􏲍java.lang.Thread􏲎
􏲏􏲐􏲍java.util.concurrent.TimeUnit􏲎
􏲏􏲐􏲍java.lang.RuntimeException􏲎
􏲏􏲐􏲍java.io.IOException􏲎
􏲏􏲐􏲍java.util.function.Supplier􏲎
􏲏􏲐􏲍org.mockito.Mock􏲎
􏲏􏲐􏲍org.mockito.MockitoAnnotations􏲎
􏲏􏲐􏲍java.util.Arrays􏲎
􏲏i􏲐􏲍com.google.common.truth.Truth.assertThat􏲎
􏲏i􏲐􏲍org.mockito.Mockito.eq􏲎
􏲏i􏲐􏲍org.mockito.Mockito.mock􏲎
􏲏i􏲐􏲍org.mockito.Mockito.times􏲎
􏲏i􏲐􏲍org.mockito.Mockito.verify􏲎
􏲏i􏲐􏲍org.mockito.Mockito.when􏲎
􏲏i􏲐􏲍org.mockito.Mockito.any􏲎


􏶨the unique name of the map􏶧
􏶦the name is used by the redis cluster client to access the map data.
If two maps had the same name, they would be instances of the same underlying redis map􏶥
􏶘-􏶙􏶰c􏶯􏶮string􏶭􏶬name􏶫􏶪􏶩

􏷐constructor􏷏
􏶠construct a named redis map with an established redis cluster􏶡
􏷘+􏷗􏴅Constructor􏴆􏷒redis_map􏷑
􏶜􏶝􏷆string􏷅􏷄name􏷃􏷀the global name of the map􏶿
􏶴
    this.name = name;
􏶳
􏴱constructs without error􏴲􏴯mock􏴰
􏲝the map can be constructed with a valid cluster instance and name􏲞
􏲛the map is throwing an exception upon construction􏲜
􏴭
    //ARRANGE
    RedisMap map = new RedisMap("test");
􏴮

􏷐Set key to hold the string value and set key to timeout after a given number of seconds􏷏
􏶠if the key already exists, then the value is replaced􏶡
􏷘+􏷗􏴅Transformer􏴆􏷒insert􏷑
􏶜􏶝􏷆JedisCluster􏷅􏷄jedis􏷃􏷀jedis cluster client􏶿
􏶜􏶝􏷆string􏷅􏷄key􏷃􏷀the name of the key􏶿
􏶜􏶝􏷆string􏷅􏷄value􏷃􏷀the value for the key􏶿
􏶜􏶝􏷆i􏷅􏷄timeout􏷃􏵘seconds􏵙􏷀timeout to expire the entry􏶿
􏶴
    jedis.setex(createKeyName(key), timeout_s, value);
􏶳
􏴱insert􏴲􏴯mock􏴰
􏲝test how an element is added to a map􏲞
􏲛jedis was not called as expected􏲜
􏴭
    //ARRANGE
    JedisCluster redis = mock(JedisCluster.class);
    RedisMap map = new RedisMap("test");
    
    //ACT
    map.insert(redis,"key","value",60);
    
    //ASSERT
    verify(redis, times(1)).setex("test:key",60,"value");
􏴮

􏷐remove a key from the map􏷏
􏶠deletes the key/value pair􏶡
􏷘+􏷗􏴅Transformer􏴆􏷒remove􏷑
􏶜􏶝􏷆JedisCluster􏷅􏷄jedis􏷃􏷀jedis cluster client􏶿
􏶜􏶝􏷆string􏷅􏷄key􏷃􏷀the name of the key􏶿
􏶴
    jedis.del(createKeyName(key));
􏶳
􏴱remove􏴲􏴯mock􏴰
􏲝test how an element is removed to a map􏲞
􏲛jedis was not called as expected􏲜
􏴭
    //ARRANGE
    JedisCluster redis = mock(JedisCluster.class);
    RedisMap map = new RedisMap("test");
    
    //ACT
    map.insert(redis,"key","value",60);
    map.remove(redis,"key");
    
    //ASSERT
    verify(redis, times(1)).del("test:key");
􏴮

􏷐remove multiple keys from the map􏷏
􏶠done via pipeline􏶡
􏷘+􏷗􏴅Transformer􏴆􏷒remove􏷑
􏶜􏶝􏷆JedisCluster􏷅􏷄jedis􏷃􏷀jedis cluster client􏶿
􏶜􏶝􏷆Iterable<String>􏷅􏷄keys􏷃􏷀the name of the keys􏶿
􏶴
  JedisClusterPipeline p = jedis.pipelined();
  for (String key : keys) {
    p.del(createKeyName(key));
  }
  p.sync();
􏶳

􏷐get the value of the key􏷏
􏶠if the key does not exist, null is returned􏶡
􏷘+􏷗􏴅Observer􏴆􏷒get􏷑
􏶜􏶝􏷆JedisCluster􏷅􏷄jedis􏷃􏷀jedis cluster client􏶿
􏶜􏶝􏷆string􏷅􏷄key􏷃􏷀the name of the key􏶿
􏶾string􏶽􏶼value􏶻􏶺the value of the key. null if key does not exist􏶹
􏶴
    return jedis.get(createKeyName(key));
􏶳
􏴱get􏴲􏴯mock􏴰
􏲝test how an element is looked up in a map􏲞
􏲛jedis was not called as expected􏲜
􏴭
    //ARRANGE
    JedisCluster redis = mock(JedisCluster.class);
    when(redis.get("test:key")).thenReturn("value");
    RedisMap map = new RedisMap("test");
    
    //ACT
    map.insert(redis,"key","value",60);
    String value = map.get(redis,"key");
    
    //ASSERT
    verify(redis, times(1)).get("test:key");
    assertThat(value).isEqualTo("value");
􏴮

􏷐get the size of the map􏷏
􏶠may be inefficient to due scanning into memory and deduplicating􏶡
􏷘+􏷗􏴅Observer􏴆􏷒size􏷑
􏶜􏶝􏷆JedisCluster􏷅􏷄jedis􏷃􏷀jedis cluster client􏶿
􏶾int􏶽􏶼size􏶻􏶺the size of the map􏶹
􏶴
    return ScanCount.get(jedis, name + ":*", 1000);
􏶳


􏷐create the key name used in redis􏷏
􏶠the key name is made more unique by leveraging the map's name􏶡
􏷘-􏷗􏴅Implementation􏴆􏷒create key name􏷑
􏶜􏶝􏷆string􏷅􏷄key name􏷃􏷀the name of the key􏶿
􏶾string􏶽􏶼redis key name􏶻􏶺the key name to use in redis􏶹
􏶴
    return name + ":" + keyName;
􏶳