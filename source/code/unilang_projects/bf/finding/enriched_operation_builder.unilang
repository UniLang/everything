􏶞o􏶟
􏷲Builds an operation from an operation key with the operation's important metadata pre-populated􏷱
􏷰This builder does the work of making various calls to get blobs, and resolve digests into the appropriate data structures􏷯
􏷰For performance reasons, only build these enriched operations when you intend to use the extra provided metadata􏷯
􏷞build􏷝􏷞buildfarm􏷝􏷞operations􏷝

􏷤􏷣􏷦com.google.protobuf.Duration􏷥
􏷤􏷣􏷦com.google.protobuf.util.Durations􏷥
􏷤􏷣􏷦io.grpc.Deadline􏷥
􏷤􏷣􏷦java.util.concurrent.TimeUnit􏷥
􏷤􏷣􏷦build.buildfarm.common.grpc.GrpcEndpoint􏷥
􏷤􏷣􏷦build.bazel.remote.execution.v2.ExecuteRequest􏷥
􏷤􏷣􏷦build.bazel.remote.execution.v2.ExecutionGrpc􏷥
􏷤􏷣􏷦build.bazel.remote.execution.v2.RequestMetadata􏷥
􏷤􏷣􏷦build.bazel.remote.execution.v2.WaitExecutionRequest􏷥
􏷤􏷣􏷦build.buildfarm.common.Time􏷥
􏷤􏷣􏷦build.buildfarm.common.Watcher􏷥
􏷤􏷣􏷦build.buildfarm.common.grpc.GrpcEndpoint􏷥
􏷤􏷣􏷦build.buildfarm.common.grpc.GrpcEndpointHandler􏷥
􏷤􏷣􏷦build.buildfarm.common.grpc.TracingMetadataUtils􏷥
􏷤􏷣􏷦build.buildfarm.instance.Instance􏷥
􏷤􏷣􏷦build.buildfarm.metrics.MetricsPublisher􏷥
􏷤􏷣􏷦com.google.common.util.concurrent.FutureCallback􏷥
􏷤􏷣􏷦com.google.common.util.concurrent.ListenableFuture􏷥
􏷤􏷣􏷦com.google.longrunning.Operation􏷥
􏷤􏷣􏷦com.google.protobuf.util.Durations􏷥
􏷤􏷣􏷦io.grpc.Context􏷥
􏷤􏷣􏷦io.grpc.Status􏷥
􏷤􏷣􏷦io.grpc.stub.ServerCallStreamObserver􏷥
􏷤􏷣􏷦io.grpc.stub.StreamObserver􏷥
􏷤􏷣􏷦java.util.concurrent.CancellationException􏷥
􏷤􏷣􏷦java.util.concurrent.ScheduledExecutorService􏷥
􏷤􏷣􏷦java.util.concurrent.TimeUnit􏷥
􏷤􏷣􏷦java.util.logging.Level􏷥
􏷤􏷣􏷦java.util.logging.Logger􏷥
􏷤􏷣􏷦javax.annotation.Nullable􏷥
􏷤i􏷣􏷦com.google.common.util.concurrent.MoreExecutors.directExecutor􏷥
􏷤􏷣􏷦redis.clients.jedis.Jedis􏷥
􏷤􏷣􏷦redis.clients.jedis.JedisCluster􏷥
􏷤􏷣􏷦redis.clients.jedis.Response􏷥
􏷤􏷣􏷦redis.clients.jedis.ScanParams􏷥
􏷤􏷣􏷦redis.clients.jedis.ScanResult􏷥
􏷤􏷣􏷦java.util.List􏷥
􏷤􏷣􏷦java.util.ArrayList􏷥
􏷤􏷣􏷦com.google.longrunning.Operation􏷥
􏷤􏷣􏷦java.io.IOException􏷥
􏷤􏷣􏷦java.util.Collection􏷥
􏷤􏷣􏷦redis.clients.jedis.Jedis􏷥
􏷤􏷣􏷦redis.clients.jedis.JedisPool􏷥
􏷤􏷣􏷦redis.clients.jedis.JedisCluster􏷥
􏷤􏷣􏷦redis.clients.jedis.ScanParams􏷥
􏷤􏷣􏷦redis.clients.jedis.ScanResult􏷥
􏷤􏷣􏷦com.google.protobuf.util.JsonFormat􏷥
􏷤􏷣􏷦build.buildfarm.v1test.ExecutingOperationMetadata􏷥
􏷤􏷣􏷦build.buildfarm.v1test.QueuedOperationMetadata􏷥
􏷤􏷣􏷦build.buildfarm.v1test.CompletedOperationMetadata􏷥
􏷤􏷣􏷦build.bazel.remote.execution.v2.RequestMetadata􏷥
􏷤􏷣􏷦build.bazel.remote.execution.v2.ExecuteOperationMetadata􏷥
􏷤􏷣􏷦com.google.protobuf.InvalidProtocolBufferException􏷥
􏷤􏷣􏷦com.google.rpc.PreconditionFailure􏷥
􏷤􏷣􏷦build.buildfarm.v1test.CompletedOperationMetadata􏷥
􏷤􏷣􏷦build.buildfarm.v1test.CompletedOperationMetadata􏷥
􏷤􏷣􏷦build.buildfarm.v1test.ExecutingOperationMetadata􏷥
􏷤􏷣􏷦build.buildfarm.v1test.OperationTimesBetweenStages􏷥
􏷤􏷣􏷦build.buildfarm.v1test.QueuedOperation􏷥
􏷤􏷣􏷦build.buildfarm.v1test.QueuedOperationMetadata􏷥
􏷤􏷣􏷦build.buildfarm.v1test.StageInformation􏷥
􏷤􏷣􏷦build.buildfarm.v1test.Tree􏷥
􏷤􏷣􏷦build.buildfarm.v1test.WorkerProfileMessage􏷥
􏷤􏷣􏷦build.bazel.remote.execution.v2.Action􏷥
􏷤􏷣􏷦build.bazel.remote.execution.v2.ActionResult􏷥
􏷤􏷣􏷦build.bazel.remote.execution.v2.Command􏷥
􏷤􏷣􏷦build.bazel.remote.execution.v2.Command.EnvironmentVariable􏷥
􏷤􏷣􏷦build.bazel.remote.execution.v2.Digest􏷥
􏷤􏷣􏷦build.bazel.remote.execution.v2.Directory􏷥
􏷤􏷣􏷦build.bazel.remote.execution.v2.DirectoryNode􏷥
􏷤􏷣􏷦build.bazel.remote.execution.v2.ExecuteOperationMetadata􏷥
􏷤􏷣􏷦build.bazel.remote.execution.v2.ExecuteResponse􏷥
􏷤􏷣􏷦build.bazel.remote.execution.v2.ExecutedActionMetadata􏷥
􏷤􏷣􏷦build.bazel.remote.execution.v2.FileNode􏷥
􏷤􏷣􏷦build.bazel.remote.execution.v2.OutputDirectory􏷥
􏷤􏷣􏷦build.bazel.remote.execution.v2.OutputFile􏷥
􏷤􏷣􏷦build.bazel.remote.execution.v2.RequestMetadata􏷥
􏷤􏷣􏷦build.bazel.remote.execution.v2.ServerCapabilities􏷥
􏷤􏷣􏷦build.buildfarm.instance.Utils􏷥
􏷤􏷣􏷦com.google.protobuf.ByteString􏷥


􏷐Create an enriched operation based on an operation key􏷏
􏶠this will make calls to get blobs, and resolve digests into the appropriate data structures􏶡
􏷘+s􏷗􏴅Observers􏴆􏷒build􏷑
􏶜􏶝􏷆JedisCluster􏷅􏷄cluster􏷃􏷀an established redis cluster􏶿
􏶜􏶝􏷆Instance􏷅􏷄instance􏷃􏷀an instance is used to get additional information about the operation􏶿
􏶜􏶝􏷆String􏷅􏷄operation key􏷃􏷀key to get operation from􏶿
􏶾EnrichedOperation􏶽􏶼operation􏶻􏶺operation with populated metadata􏶹
􏶴
    EnrichedOperation operationWithMetadata = new EnrichedOperation();
    operationWithMetadata.operation = operationKeyToOperation(cluster,operationKey);
    operationWithMetadata.action = actionDigestToAction(instance,operationToActionDigest(operationWithMetadata.operation));
    operationWithMetadata.command = commandDigestToCommand(instance,operationWithMetadata.action.getCommandDigest());
    return operationWithMetadata;
􏶳



􏷐convert an operation key into the actual Operation type􏷏
􏶠extracts json from redis and parses it.  Null if json was invalid􏶡
􏷘-s􏷗􏴅Observers􏴆􏷒operation key to operation􏷑
􏶜􏶝􏷆JedisCluster􏷅􏷄cluster􏷃􏷀an established redis cluster􏶿
􏶜􏶝􏷆String􏷅􏷄operation key􏷃􏷀the key to lookup and get back the operation of􏶿
􏶾Operation􏶽􏶼operation􏶻􏶺the looked up operation􏶹
􏶴
      String json = cluster.get(operationKey);
      Operation operation = jsonToOperation(json);
      return operation;
􏶳


􏷐convert string json into operation type􏷏
􏶠parses json and returns null if invalid􏶡
􏷘-s􏷗􏴅Observers􏴆􏷒json to operation􏷑
􏶜􏶝􏷆String􏷅􏷄json􏷃􏷀the json to convert to Operation type􏶿
􏶾Operation􏶽􏶼operation􏶻􏶺the created operation􏶹
􏶴
  //create a json parser
  JsonFormat.Parser operationParser =
      JsonFormat.parser()
          .usingTypeRegistry(
              JsonFormat.TypeRegistry.newBuilder()
                  .add(CompletedOperationMetadata.getDescriptor())
                  .add(ExecutingOperationMetadata.getDescriptor())
                  .add(ExecuteOperationMetadata.getDescriptor())
                  .add(QueuedOperationMetadata.getDescriptor())
                  .add(PreconditionFailure.getDescriptor())
                  .build())
          .ignoringUnknownFields();
          
    if (json == null) {
      return null;
    }
    try {
      Operation.Builder operationBuilder = Operation.newBuilder();
      operationParser.merge(json, operationBuilder);
      return operationBuilder.build();
    } catch (InvalidProtocolBufferException e) {
      return null;
    }
􏶳

􏷐get the action digest of the operation􏷏
􏶠extracted out of the relevant operation metadata􏶡
􏷘-s􏷗􏴅Observers􏴆􏷒operation to action digest􏷑
􏶜􏶝􏷆Operation􏷅􏷄operation􏷃􏷀the operation􏶿
􏶾Digest􏶽􏶼digest􏶻􏶺the extracted digest􏶹
􏶴


ExecuteOperationMetadata metadata;
RequestMetadata requestMetadata;
      
try {
      if (operation.getMetadata().is(QueuedOperationMetadata.class)) {
        QueuedOperationMetadata queuedOperationMetadata =
            operation.getMetadata().unpack(QueuedOperationMetadata.class);
        metadata = queuedOperationMetadata.getExecuteOperationMetadata();
        requestMetadata = queuedOperationMetadata.getRequestMetadata();
      } else if (operation.getMetadata().is(ExecutingOperationMetadata.class)) {
        ExecutingOperationMetadata executingMetadata =
            operation.getMetadata().unpack(ExecutingOperationMetadata.class);
        metadata = executingMetadata.getExecuteOperationMetadata();
        requestMetadata = executingMetadata.getRequestMetadata();
      } else if (operation.getMetadata().is(CompletedOperationMetadata.class)) {
        CompletedOperationMetadata completedMetadata =
            operation.getMetadata().unpack(CompletedOperationMetadata.class);
        metadata = completedMetadata.getExecuteOperationMetadata();
        requestMetadata = completedMetadata.getRequestMetadata();
      } else {
        metadata = operation.getMetadata().unpack(ExecuteOperationMetadata.class);
        requestMetadata = null;
      }
      
    } catch (InvalidProtocolBufferException e) {
        metadata = null;
    }
      
      return metadata.getActionDigest();
􏶳

􏷐get the action based on the action digest􏷏
􏶠instance used to fetch the blob􏶡
􏷘-s􏷗􏴅Observers􏴆􏷒action digest to action􏷑
􏶜􏶝􏷆Instance􏷅􏷄instance􏷃􏷀an instance is used to get additional information about the operation􏶿
􏶜􏶝􏷆Digest􏷅􏷄digest􏷃􏷀the action digest􏶿
􏶾Action􏶽􏶼action􏶻􏶺the action from the provided digest􏶹
􏶴
    try {
        ByteString blob = Utils.getBlob(instance, digest, RequestMetadata.getDefaultInstance());
        Action action;
        try {
          action = Action.parseFrom(blob);
          return action;
        } catch (InvalidProtocolBufferException e) {
          return null;
        }
    } catch (Exception e) {
        return null;
    }
􏶳

􏷐get the command based on the command digest􏷏
􏶠instance used to fetch the blob􏶡
􏷘-s􏷗􏴅Observers􏴆􏷒command digest to command􏷑
􏶜􏶝􏷆Instance􏷅􏷄instance􏷃􏷀an instance is used to get additional information about the operation􏶿
􏶜􏶝􏷆Digest􏷅􏷄digest􏷃􏷀the command digest􏶿
􏶾Command􏶽􏶼command􏶻􏶺the Command from the provided digest􏶹
􏶴
    try {
        ByteString blob = Utils.getBlob(instance, digest, RequestMetadata.getDefaultInstance());
        Command command;
        try {
          command = Command.parseFrom(blob);
          return command;
        } catch (InvalidProtocolBufferException e) {
          return null;
        }
    } catch (Exception e) {
        return null;
    }
􏶳







