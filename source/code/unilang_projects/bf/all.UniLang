􏶞g􏶟
􏷲Remote_Execution Proto Data􏷱
􏷰Remote_Execution Proto Data􏷯
􏷮Remote_Execution􏷭
􏷬Trevor Hickey􏷫

􏳃brief-foo􏳄
􏳁detail-foo􏳂
􏲿Build_Farm􏳀

􏶨brief-foo􏶧
􏶦detail-foo􏶥
􏶘+􏶙􏶰􏶯􏷔Build_Farm􏷓􏶮QueueEntry􏶭􏶬queue_entry􏶫􏶪􏶩

􏶨brief-foo􏶧
􏶦detail-foo􏶥
􏶘+􏶙􏶰􏶯􏷔Build_Farm􏷓􏶮QueuedOperation􏶭􏶬queue_operation􏶫􏶪􏶩

􏶨brief-foo􏶧
􏶦detail-foo􏶥
􏶘+􏶙􏶰􏶯􏷔Build_Farm􏷓􏶮CompletedOperationMetadata􏶭􏶬completed_operation_metadata􏶫􏶪􏶩

􏳃brief-foo􏳄
􏳁detail-foo􏳂
􏲿TakeOperationRequest􏳀

􏶨brief-foo􏶧
􏶦detail-foo􏶥
􏶘+􏶙􏶰􏶯􏷔TakeOperationRequest􏷓􏶮string􏶭􏶬instance_name􏶫􏶪􏶩

􏶨brief-foo􏶧
􏶦detail-foo􏶥
􏶘+􏶙􏶰􏶯􏷔TakeOperationRequest􏷓􏶮Platform􏶭􏶬platform􏶫􏶪􏶩

􏳃brief-foo􏳄
􏳁detail-foo􏳂
􏲿PollOperationRequest􏳀

􏶨brief-foo􏶧
􏶦detail-foo􏶥
􏶘+􏶙􏶰􏶯􏷔PollOperationRequest􏷓􏶮string􏶭􏶬operation_name􏶫􏶪􏶩

􏶨brief-foo􏶧
􏶦detail-foo􏶥
􏶘+􏶙􏶰􏶯􏷔PollOperationRequest􏷓􏶮ExecutionStage􏶭􏶬stage􏶫􏶪􏶩


􏳃brief-foo􏳄
􏳁detail-foo􏳂
􏲿BuildFarmServerConfig􏳀

􏶨brief-foo􏶧
􏶦detail-foo􏶥
􏶘+􏶙􏶰􏶯􏷔BuildFarmServerConfig􏷓􏶮vector􏶭􏳟InstanceConfig􏳠􏶬operation_name􏶫􏶪􏶩

􏶨brief-foo􏶧
􏶦detail-foo􏶥
􏶘+􏶙􏶰􏶯􏷔BuildFarmServerConfig􏷓􏶮string􏶭􏶬default_instance_name􏶫􏶪􏶩

􏶨brief-foo􏶧
􏶦detail-foo􏶥
􏶘+􏶙􏶰􏶯􏷔BuildFarmServerConfig􏷓􏶮int􏶭􏶬port􏶫􏶪􏶩

􏶨brief-foo􏶧
􏶦detail-foo􏶥
􏶘+􏶙􏶰􏶯􏷔BuildFarmServerConfig􏷓􏶮string􏶭􏶬aws_namespace􏶫􏶪􏶩

􏶨brief-foo􏶧
􏶦detail-foo􏶥
􏶘+􏶙􏶰􏶯􏷔BuildFarmServerConfig􏷓􏶮int􏶭􏶬execute_keepalive_after_seconds􏶫􏶪􏶩

􏶨brief-foo􏶧
􏶦detail-foo􏶥
􏶘+􏶙􏶰􏶯􏷔BuildFarmServerConfig􏷓􏶮string􏶭􏶬operations_metrics_topic􏶫􏶪􏶩

􏳃brief-foo􏳄
􏳁detail-foo􏳂
􏲿MemoryCasConfig􏳀

􏶨brief-foo􏶧
􏶦detail-foo􏶥
􏶘+􏶙􏶰􏶯􏷔MemoryCasConfig􏷓􏶮int􏶭􏶬max_size_bytes􏶫􏶪􏶩

􏳃brief-foo􏳄
􏳁detail-foo􏳂
􏲿GrpcCASConfig􏳀

􏶨brief-foo􏶧
􏶦detail-foo􏶥
􏶘+􏶙􏶰􏶯􏷔GrpcCASConfig􏷓􏶮string􏶭􏶬instance_name􏶫􏶪􏶩

􏶨brief-foo􏶧
􏶦detail-foo􏶥
􏶘+􏶙􏶰􏶯􏷔GrpcCASConfig􏷓􏶮string􏶭􏶬target􏶫􏶪􏶩

􏳃brief-foo􏳄
􏳁detail-foo􏳂
􏲿FilesystemCasConfig􏳀

􏶨brief-foo􏶧
􏶦detail-foo􏶥
􏶘+􏶙􏶰􏶯􏷔FilesystemCasConfig􏷓􏶮string􏶭􏶬path􏶫􏶪􏶩

􏶨brief-foo􏶧
􏶦detail-foo􏶥
􏶘+􏶙􏶰􏶯􏷔FilesystemCasConfig􏷓􏶮int􏶭􏶬max_size_bytes􏶫􏶪􏶩

􏶨brief-foo􏶧
􏶦detail-foo􏶥
􏶘+􏶙􏶰􏶯􏷔FilesystemCasConfig􏷓􏶮int􏶭􏶬max_entry_size_bytes􏶫􏶪􏶩

􏳃brief-foo􏳄
􏳁detail-foo􏳂
􏲿FuseCasConfig􏳀

􏶨brief-foo􏶧
􏶦detail-foo􏶥
􏶘+􏶙􏶰􏶯􏷔FuseCasConfig􏷓􏶮string􏶭􏶬name􏶫􏶪􏶩

􏳃brief-foo􏳄
􏳁detail-foo􏳂
􏲿ContentAddressableStorageConfig􏳀

􏶨brief-foo􏶧
􏶦detail-foo􏶥
􏶘+􏶙􏶰􏶯􏷔ContentAddressableStorageConfig􏷓􏶮MemoryCasConfig􏶭􏶬memory􏶫􏶪􏶩

􏶨brief-foo􏶧
􏶦detail-foo􏶥
􏶘+􏶙􏶰􏶯􏷔ContentAddressableStorageConfig􏷓􏶮GrpcCASConfig􏶭􏶬gprc􏶫􏶪􏶩

􏶨brief-foo􏶧
􏶦detail-foo􏶥
􏶘+􏶙􏶰􏶯􏷔ContentAddressableStorageConfig􏷓􏶮FilesystemCasConfig􏶭􏶬filesystem􏶫􏶪􏶩

􏶨brief-foo􏶧
􏶦detail-foo􏶥
􏶘+􏶙􏶰􏶯􏷔ContentAddressableStorageConfig􏷓􏶮FuseCasConfig􏶭􏶬fuse􏶫􏶪􏶩



􏳃brief-foo􏳄
􏳁detail-foo􏳂
􏲿QueueEntry􏳀

􏶨brief-foo􏶧
􏶦detail-foo􏶥
􏶘+􏶙􏶰􏶯􏷔QueueEntry􏷓􏶮ExecuteEntry􏶭􏶬execute_entry􏶫􏶪􏶩

􏶨brief-foo􏶧
􏶦detail-foo􏶥
􏶘+􏶙􏶰􏶯􏷔QueueEntry􏷓􏶮Digest􏶭􏶬queued_operation_digest􏶫􏶪􏶩

􏶨brief-foo􏶧
􏶦detail-foo􏶥
􏶘+􏶙􏶰􏶯􏷔QueueEntry􏷓􏶮Platform􏶭􏶬platform􏶫􏶪􏶩



􏳃brief-foo􏳄
􏳁detail-foo􏳂
􏲿ExecuteEntry􏳀

􏶨brief-foo􏶧
􏶦detail-foo􏶥
􏶘+􏶙􏶰􏶯􏷔ExecuteEntry􏷓􏶮ascii_string􏶭􏶬operation_name􏶫􏶪􏶩

􏶨brief-foo􏶧
􏶦detail-foo􏶥
􏶘+􏶙􏶰􏶯􏷔ExecuteEntry􏷓􏶮Digest􏶭􏶬action_digest􏶫􏶪􏶩

􏶨brief-foo􏶧
􏶦detail-foo􏶥
􏶘+􏶙􏶰􏶯􏷔ExecuteEntry􏷓􏶮bool􏶭􏶬skip_cache_lookup􏶫􏶪􏶩

􏶨brief-foo􏶧
􏶦detail-foo􏶥
􏶘+􏶙􏶰􏶯􏷔ExecuteEntry􏷓􏶮RequestMetadata􏶭􏶬request_metadata􏶫􏶪􏶩

􏶨brief-foo􏶧
􏶦detail-foo􏶥
􏶘+􏶙􏶰􏶯􏷔ExecuteEntry􏷓􏶮ExecutionPolicy􏶭􏶬execution_policy􏶫􏶪􏶩

􏶨brief-foo􏶧
􏶦detail-foo􏶥
􏶘+􏶙􏶰􏶯􏷔ExecuteEntry􏷓􏶮ResultsCachePolicy􏶭􏶬results_cache_policy􏶫􏶪􏶩

􏶨brief-foo􏶧
􏶦detail-foo􏶥
􏶘+􏶙􏶰􏶯􏷔ExecuteEntry􏷓􏶮ascii_string􏶭􏶬stdout_stream_name􏶫􏶪􏶩

􏶨brief-foo􏶧
􏶦detail-foo􏶥
􏶘+􏶙􏶰􏶯􏷔ExecuteEntry􏷓􏶮ascii_string􏶭􏶬stderr_stream_name􏶫􏶪􏶩

􏶨brief-foo􏶧
􏶦detail-foo􏶥
􏶘+􏶙􏶰􏶯􏷔ExecuteEntry􏷓􏶮timestamp􏶭􏶬queued_timestamp􏶫􏶪􏶩

􏳃brief-foo􏳄
􏳁detail-foo􏳂
􏲿Digest􏳀

􏶨brief-foo􏶧
􏶦detail-foo􏶥
􏶘+􏶙􏶰􏶯􏷔Digest􏷓􏶮ascii_string􏶭􏶬hash􏶫􏶪􏶩

􏶨brief-foo􏶧
􏶦detail-foo􏶥
􏶘+􏶙􏶰􏶯􏷔Digest􏷓􏶮i64􏶭􏶬size_bytes􏶫􏶪􏶩

􏳃brief-foo􏳄
􏳁detail-foo􏳂
􏲿RequestMetadata􏳀

􏶨brief-foo􏶧
􏶦detail-foo􏶥
􏶘+􏶙􏶰􏶯􏷔RequestMetadata􏷓􏶮ToolDetails􏶭􏶬tool_details􏶫􏶪􏶩

􏶨brief-foo􏶧
􏶦detail-foo􏶥
􏶘+􏶙􏶰􏶯􏷔RequestMetadata􏷓􏶮ascii_string􏶭􏶬action_id􏶫􏶪􏶩

􏶨brief-foo􏶧
􏶦detail-foo􏶥
􏶘+􏶙􏶰􏶯􏷔RequestMetadata􏷓􏶮ascii_string􏶭􏶬tool_invocation_id􏶫􏶪􏶩

􏶨brief-foo􏶧
􏶦detail-foo􏶥
􏶘+􏶙􏶰􏶯􏷔RequestMetadata􏷓􏶮ascii_string􏶭􏶬correlated_invocations_id􏶫􏶪􏶩

􏳃brief-foo􏳄
􏳁detail-foo􏳂
􏲿ToolDetails􏳀

􏶨brief-foo􏶧
􏶦detail-foo􏶥
􏶘+􏶙􏶰􏶯􏷔ToolDetails􏷓􏶮ascii_string􏶭􏶬tool_name􏶫􏶪􏶩

􏶨brief-foo􏶧
􏶦detail-foo􏶥
􏶘+􏶙􏶰􏶯􏷔ToolDetails􏷓􏶮ascii_string􏶭􏶬tool_version􏶫􏶪􏶩

􏳃brief-foo􏳄
􏳁detail-foo􏳂
􏲿ExecutionPolicy􏳀

􏶨brief-foo􏶧
􏶦detail-foo􏶥
􏶘+􏶙􏶰􏶯􏷔ExecutionPolicy􏷓􏶮int32􏶭􏶬priority􏶫􏶪􏶩

􏳃brief-foo􏳄
􏳁detail-foo􏳂
􏲿ResultsCachePolicy􏳀

􏶨brief-foo􏶧
􏶦detail-foo􏶥
􏶘+􏶙􏶰􏶯􏷔ResultsCachePolicy􏷓􏶮int32􏶭􏶬priority􏶫􏶪􏶩

􏳃brief-foo􏳄
􏳁detail-foo􏳂
􏲿QueuedOperation􏳀

􏶨brief-foo􏶧
􏶦detail-foo􏶥
􏶘+􏶙􏶰􏶯􏷔QueuedOperation􏷓􏶮Action􏶭􏶬action􏶫􏶪􏶩

􏶨brief-foo􏶧
􏶦detail-foo􏶥
􏶘+􏶙􏶰􏶯􏷔QueuedOperation􏷓􏶮Command􏶭􏶬command􏶫􏶪􏶩

􏶨brief-foo􏶧
􏶦detail-foo􏶥
􏶘+􏶙􏶰􏶯􏷔QueuedOperation􏷓􏶮Tree􏶭􏶬tree􏶫􏶪􏶩

􏳃brief-foo􏳄
􏳁detail-foo􏳂
􏲿Action􏳀

􏶨brief-foo􏶧
􏶦detail-foo􏶥
􏶘+􏶙􏶰􏶯􏷔Action􏷓􏶮Digest􏶭􏶬command_digest􏶫􏶪􏶩

􏶨brief-foo􏶧
􏶦detail-foo􏶥
􏶘+􏶙􏶰􏶯􏷔Action􏷓􏶮Digest􏶭􏶬input_root_digest􏶫􏶪􏶩

􏶨brief-foo􏶧
􏶦detail-foo􏶥
􏶘+􏶙􏶰􏶯􏷔Action􏷓􏶮Duration􏶭􏶬timeout􏶫􏶪􏶩

􏶨brief-foo􏶧
􏶦detail-foo􏶥
􏶘+􏶙􏶰􏶯􏷔Action􏷓􏶮bool􏶭􏶬do_not_cache􏶫􏶪􏶩

􏳃brief-foo􏳄
􏳁detail-foo􏳂
􏲿Command􏳀

􏶨brief-foo􏶧
􏶦detail-foo􏶥
􏶘+􏶙􏶰􏶯􏷔Command􏷓􏶮strings􏶭􏶬arguments􏶫􏶪􏶩

􏶨brief-foo􏶧
􏶦detail-foo􏶥
􏶘+􏶙􏶰􏶯􏷔Command􏷓􏳟seq􏳠􏶮EnvironmentVariable􏶭􏶬environment_variables􏶫􏶪􏶩

􏶨brief-foo􏶧
􏶦detail-foo􏶥
􏶘+􏶙􏶰􏶯􏷔Command􏷓􏶮strings􏶭􏶬output_files􏶫􏶪􏶩

􏶨brief-foo􏶧
􏶦detail-foo􏶥
􏶘+􏶙􏶰􏶯􏷔Command􏷓􏶮strings􏶭􏶬output_directories􏶫􏶪􏶩

􏶨brief-foo􏶧
􏶦detail-foo􏶥
􏶘+􏶙􏶰􏶯􏷔Command􏷓􏶮Platform􏶭􏶬platform􏶫􏶪􏶩

􏶨brief-foo􏶧
􏶦detail-foo􏶥
􏶘+􏶙􏶰􏶯􏷔Command􏷓􏶮ascii_string􏶭􏶬working_directory􏶫􏶪􏶩

􏳃brief-foo􏳄
􏳁detail-foo􏳂
􏲿EnvironmentVariable􏳀

􏶨brief-foo􏶧
􏶦detail-foo􏶥
􏶘+􏶙􏶰􏶯􏷔EnvironmentVariable􏷓􏶮ascii_string􏶭􏶬name􏶫􏶪􏶩

􏶨brief-foo􏶧
􏶦detail-foo􏶥
􏶘+􏶙􏶰􏶯􏷔EnvironmentVariable􏷓􏶮ascii_string􏶭􏶬value􏶫􏶪􏶩

􏳃brief-foo􏳄
􏳁detail-foo􏳂
􏲿Platform􏳀

􏶨brief-foo􏶧
􏶦detail-foo􏶥
􏶘+􏶙􏶰􏶯􏷔Platform􏷓􏳟seq􏳠􏶮Property􏶭􏶬properties􏶫􏶪􏶩

􏳃brief-foo􏳄
􏳁detail-foo􏳂
􏲿Property􏳀

􏶨brief-foo􏶧
􏶦detail-foo􏶥
􏶘+􏶙􏶰􏶯􏷔Property􏷓􏶮ascii_string􏶭􏶬name􏶫􏶪􏶩

􏶨brief-foo􏶧
􏶦detail-foo􏶥
􏶘+􏶙􏶰􏶯􏷔Property􏷓􏶮ascii_string􏶭􏶬value􏶫􏶪􏶩



􏳃brief-foo􏳄
􏳁detail-foo􏳂
􏲿Tree􏳀

􏶨brief-foo􏶧
􏶦detail-foo􏶥
􏶘+􏶙􏶰􏶯􏷔Tree􏷓􏶮Directory􏶭􏶬root􏶫􏶪􏶩

􏶨brief-foo􏶧
􏶦detail-foo􏶥
􏶘+􏶙􏶰􏶯􏷔Tree􏷓􏳟seq􏳠􏶮Directory􏶭􏶬children􏶫􏶪􏶩

􏳃brief-foo􏳄
􏳁detail-foo􏳂
􏲿Directory􏳀

􏶨brief-foo􏶧
􏶦detail-foo􏶥
􏶘+􏶙􏶰􏶯􏷔Directory􏷓􏳟seq􏳠􏶮FileNode􏶭􏶬files􏶫􏶪􏶩

􏶨brief-foo􏶧
􏶦detail-foo􏶥
􏶘+􏶙􏶰􏶯􏷔Directory􏷓􏳟seq􏳠􏶮DirectoryNode􏶭􏶬directories􏶫􏶪􏶩

􏶨brief-foo􏶧
􏶦detail-foo􏶥
􏶘+􏶙􏶰􏶯􏷔Directory􏷓􏳟seq􏳠􏶮SymlinkNode􏶭􏶬symlinks􏶫􏶪􏶩

􏶨brief-foo􏶧
􏶦detail-foo􏶥
􏶘+􏶙􏶰􏶯􏷔Directory􏷓􏳟seq􏳠􏶮NodeProperty􏶭􏶬node_properties􏶫􏶪􏶩

􏳃brief-foo􏳄
􏳁detail-foo􏳂
􏲿NodeProperty􏳀

􏶨brief-foo􏶧
􏶦detail-foo􏶥
􏶘+􏶙􏶰􏶯􏷔NodeProperty􏷓􏶮string􏶭􏶬name􏶫􏶪􏶩

􏶨brief-foo􏶧
􏶦detail-foo􏶥
􏶘+􏶙􏶰􏶯􏷔NodeProperty􏷓􏶮string􏶭􏶬value􏶫􏶪􏶩

􏳃brief-foo􏳄
􏳁detail-foo􏳂
􏲿FileNode􏳀

􏶨brief-foo􏶧
􏶦detail-foo􏶥
􏶘+􏶙􏶰􏶯􏷔FileNode􏷓􏶮ascii_string􏶭􏶬name􏶫􏶪􏶩

􏶨brief-foo􏶧
􏶦detail-foo􏶥
􏶘+􏶙􏶰􏶯􏷔FileNode􏷓􏶮Digest􏶭􏶬digest􏶫􏶪􏶩

􏶨brief-foo􏶧
􏶦detail-foo􏶥
􏶘+􏶙􏶰􏶯􏷔FileNode􏷓􏶮bool􏶭􏶬is_executable􏶫􏶪􏶩

􏳃brief-foo􏳄
􏳁detail-foo􏳂
􏲿DirectoryNode􏳀

􏶨brief-foo􏶧
􏶦detail-foo􏶥
􏶘+􏶙􏶰􏶯􏷔DirectoryNode􏷓􏶮ascii_string􏶭􏶬name􏶫􏶪􏶩

􏶨brief-foo􏶧
􏶦detail-foo􏶥
􏶘+􏶙􏶰􏶯􏷔DirectoryNode􏷓􏶮Digest􏶭􏶬digest􏶫􏶪􏶩

􏳃brief-foo􏳄
􏳁detail-foo􏳂
􏲿SymlinkNode􏳀

􏶨brief-foo􏶧
􏶦detail-foo􏶥
􏶘+􏶙􏶰􏶯􏷔SymlinkNode􏷓􏶮ascii_string􏶭􏶬name􏶫􏶪􏶩

􏶨brief-foo􏶧
􏶦detail-foo􏶥
􏶘+􏶙􏶰􏶯􏷔SymlinkNode􏷓􏶮ascii_string􏶭􏶬target􏶫􏶪􏶩

􏳃brief-foo􏳄
􏳁detail-foo􏳂
􏲿CompletedOperationMetadata􏳀

􏶨brief-foo􏶧
􏶦detail-foo􏶥
􏶘+􏶙􏶰􏶯􏷔CompletedOperationMetadata􏷓􏶮ExecuteOperationMetadata􏶭􏶬execute_operation_metadata􏶫􏶪􏶩

􏶨brief-foo􏶧
􏶦detail-foo􏶥
􏶘+􏶙􏶰􏶯􏷔CompletedOperationMetadata􏷓􏶮RequestMetadata􏶭􏶬request_metadata􏶫􏶪􏶩

􏳃brief-foo􏳄
􏳁detail-foo􏳂
􏲿ExecuteOperationMetadata􏳀

􏶨brief-foo􏶧
􏶦detail-foo􏶥
􏶘+􏶙􏶰􏶯􏷔ExecuteOperationMetadata􏷓􏶮ExecutionStage􏶭􏶬stage􏶫􏶪􏶩

􏶨brief-foo􏶧
􏶦detail-foo􏶥
􏶘+􏶙􏶰􏶯􏷔ExecuteOperationMetadata􏷓􏶮Digest􏶭􏶬digest􏶫􏶪􏶩

􏶨brief-foo􏶧
􏶦detail-foo􏶥
􏶘+􏶙􏶰􏶯􏷔ExecuteOperationMetadata􏷓􏶮ascii_string􏶭􏶬stdout_stream_name􏶫􏶪􏶩

􏶨brief-foo􏶧
􏶦detail-foo􏶥
􏶘+􏶙􏶰􏶯􏷔ExecuteOperationMetadata􏷓􏶮ascii_string􏶭􏶬stderr_stream_name􏶫􏶪􏶩

􏳃brief-foo􏳄
􏳁detail-foo􏳂
􏲿ExecutionStage􏳀

􏶊brief-foo􏶉
􏶈detail-foo􏶇
􏵮􏵯􏶀ExecutionStage􏶋
􏶆unknown􏶅􏶂desc􏶁
􏶆cache_check􏶅􏶂desc􏶁
􏶆queued􏶅􏶂desc􏶁
􏶆executing􏶅􏶂desc􏶁
􏶆completed􏶅􏶂desc􏶁












message ExecutedActionMetadata {
  // The name of the worker which ran the execution.
  string worker = 1;

  // When was the action added to the queue.
  google.protobuf.Timestamp queued_timestamp = 2;

  // When the worker received the action.
  google.protobuf.Timestamp worker_start_timestamp = 3;

  // When the worker completed the action, including all stages.
  google.protobuf.Timestamp worker_completed_timestamp = 4;

  // When the worker started fetching action inputs.
  google.protobuf.Timestamp input_fetch_start_timestamp = 5;

  // When the worker finished fetching action inputs.
  google.protobuf.Timestamp input_fetch_completed_timestamp = 6;

  // When the worker started executing the action command.
  google.protobuf.Timestamp execution_start_timestamp = 7;

  // When the worker completed executing the action command.
  google.protobuf.Timestamp execution_completed_timestamp = 8;

  // When the worker started uploading action outputs.
  google.protobuf.Timestamp output_upload_start_timestamp = 9;

  // When the worker finished uploading action outputs.
  google.protobuf.Timestamp output_upload_completed_timestamp = 10;
}



// An ActionResult represents the result of an
// [Action][build.bazel.remote.execution.v2.Action] being run.
message ActionResult {
  reserved 1; // Reserved for use as the resource name.

  // The output files of the action. For each output file requested in the
  // `output_files` or `output_paths` field of the Action, if the corresponding
  // file existed after the action completed, a single entry will be present
  // either in this field, or the `output_file_symlinks` field if the file was
  // a symbolic link to another file (`output_symlinks` field after v2.1).
  //
  // If an output listed in `output_files` was found, but was a directory rather
  // than a regular file, the server will return a FAILED_PRECONDITION.
  // If the action does not produce the requested output, then that output
  // will be omitted from the list. The server is free to arrange the output
  // list as desired; clients MUST NOT assume that the output list is sorted.
  repeated OutputFile output_files = 2;

  // The output files of the action that are symbolic links to other files. Those
  // may be links to other output files, or input files, or even absolute paths
  // outside of the working directory, if the server supports
  // [SymlinkAbsolutePathStrategy.ALLOWED][build.bazel.remote.execution.v2.CacheCapabilities.SymlinkAbsolutePathStrategy].
  // For each output file requested in the `output_files` or `output_paths`
  // field of the Action, if the corresponding file existed after
  // the action completed, a single entry will be present either in this field,
  // or in the `output_files` field, if the file was not a symbolic link.
  //
  // If an output symbolic link of the same name as listed in `output_files` of
  // the Command was found, but its target type was not a regular file, the
  // server will return a FAILED_PRECONDITION.
  // If the action does not produce the requested output, then that output
  // will be omitted from the list. The server is free to arrange the output
  // list as desired; clients MUST NOT assume that the output list is sorted.
  //
  // DEPRECATED as of v2.1. Servers that wish to be compatible with v2.0 API
  // should still populate this field in addition to `output_symlinks`.
  repeated OutputSymlink output_file_symlinks = 10;

  // New in v2.1: this field will only be populated if the command
  // `output_paths` field was used, and not the pre v2.1 `output_files` or
  // `output_directories` fields.
  // The output paths of the action that are symbolic links to other paths. Those
  // may be links to other outputs, or inputs, or even absolute paths
  // outside of the working directory, if the server supports
  // [SymlinkAbsolutePathStrategy.ALLOWED][build.bazel.remote.execution.v2.CacheCapabilities.SymlinkAbsolutePathStrategy].
  // A single entry for each output requested in `output_paths`
  // field of the Action, if the corresponding path existed after
  // the action completed and was a symbolic link.
  //
  // If the action does not produce a requested output, then that output
  // will be omitted from the list. The server is free to arrange the output
  // list as desired; clients MUST NOT assume that the output list is sorted.
  repeated OutputSymlink output_symlinks = 12;

  // The output directories of the action. For each output directory requested
  // in the `output_directories` or `output_paths` field of the Action, if the
  // corresponding directory existed after the action completed, a single entry
  // will be present in the output list, which will contain the digest of a
  // [Tree][build.bazel.remote.execution.v2.Tree] message containing the
  // directory tree, and the path equal exactly to the corresponding Action
  // output_directories member.
  //
  // As an example, suppose the Action had an output directory `a/b/dir` and the
  // execution produced the following contents in `a/b/dir`: a file named `bar`
  // and a directory named `foo` with an executable file named `baz`. Then,
  // output_directory will contain (hashes shortened for readability):
  //
  // ```json
  // // OutputDirectory proto:
  // {
  //   path: "a/b/dir"
  //   tree_digest: {
  //     hash: "4a73bc9d03...",
  //     size: 55
  //   }
  // }
  // // Tree proto with hash "4a73bc9d03..." and size 55:
  // {
  //   root: {
  //     files: [
  //       {
  //         name: "bar",
  //         digest: {
  //           hash: "4a73bc9d03...",
  //           size: 65534
  //         }
  //       }
  //     ],
  //     directories: [
  //       {
  //         name: "foo",
  //         digest: {
  //           hash: "4cf2eda940...",
  //           size: 43
  //         }
  //       }
  //     ]
  //   }
  //   children : {
  //     // (Directory proto with hash "4cf2eda940..." and size 43)
  //     files: [
  //       {
  //         name: "baz",
  //         digest: {
  //           hash: "b2c941073e...",
  //           size: 1294,
  //         },
  //         is_executable: true
  //       }
  //     ]
  //   }
  // }
  // ```
  // If an output of the same name as listed in `output_files` of
  // the Command was found in `output_directories`, but was not a directory, the
  // server will return a FAILED_PRECONDITION.
  repeated OutputDirectory output_directories = 3;

  // The output directories of the action that are symbolic links to other
  // directories. Those may be links to other output directories, or input
  // directories, or even absolute paths outside of the working directory,
  // if the server supports
  // [SymlinkAbsolutePathStrategy.ALLOWED][build.bazel.remote.execution.v2.CacheCapabilities.SymlinkAbsolutePathStrategy].
  // For each output directory requested in the `output_directories` field of
  // the Action, if the directory existed after the action completed, a
  // single entry will be present either in this field, or in the
  // `output_directories` field, if the directory was not a symbolic link.
  //
  // If an output of the same name was found, but was a symbolic link to a file
  // instead of a directory, the server will return a FAILED_PRECONDITION.
  // If the action does not produce the requested output, then that output
  // will be omitted from the list. The server is free to arrange the output
  // list as desired; clients MUST NOT assume that the output list is sorted.
  //
  // DEPRECATED as of v2.1. Servers that wish to be compatible with v2.0 API
  // should still populate this field in addition to `output_symlinks`.
  repeated OutputSymlink output_directory_symlinks = 11;

  // The exit code of the command.
  int32 exit_code = 4;

  // The standard output buffer of the action. The server SHOULD NOT inline
  // stdout unless requested by the client in the
  // [GetActionResultRequest][build.bazel.remote.execution.v2.GetActionResultRequest]
  // message. The server MAY omit inlining, even if requested, and MUST do so if inlining
  // would cause the response to exceed message size limits.
  bytes stdout_raw = 5;

  // The digest for a blob containing the standard output of the action, which
  // can be retrieved from the
  // [ContentAddressableStorage][build.bazel.remote.execution.v2.ContentAddressableStorage].
  Digest stdout_digest = 6;

  // The standard error buffer of the action. The server SHOULD NOT inline
  // stderr unless requested by the client in the
  // [GetActionResultRequest][build.bazel.remote.execution.v2.GetActionResultRequest]
  // message. The server MAY omit inlining, even if requested, and MUST do so if inlining
  // would cause the response to exceed message size limits.
  bytes stderr_raw = 7;

  // The digest for a blob containing the standard error of the action, which
  // can be retrieved from the
  // [ContentAddressableStorage][build.bazel.remote.execution.v2.ContentAddressableStorage].
  Digest stderr_digest = 8;

  // The details of the execution that originally produced this result.
  ExecutedActionMetadata execution_metadata = 9;
}


