􏶞o􏶟
􏷲the operation queue of the shard backplane􏷱
􏷰the operation queue can be split into multiple queues according to platform execution information􏷯
􏷞build􏷝􏷞buildfarm􏷝􏷞instance􏷝􏷞shard􏷝

􏷤􏷣􏷦com.google.common.collect.LinkedHashMultimap􏷥
􏷤􏷣􏷦com.google.common.collect.Lists􏷥
􏷤􏷣􏷦com.google.common.collect.SetMultimap􏷥
􏷤􏷣􏷦java.util.List􏷥
􏷤􏷣􏷦build.buildfarm.common.redis.BalancedRedisQueue􏷥
􏷤􏷣􏷦build.buildfarm.common.redis.ProvisionedRedisQueue􏷥
􏷤􏷣􏷦redis.clients.jedis.JedisCluster􏷥
􏷤􏷣􏷦build.buildfarm.common.StringVisitor􏷥
􏷤􏷣􏷦java.util.Collections􏷥
􏷤􏷣􏷦java.util.regex.Matcher􏷥
􏷤􏷣􏷦java.util.regex.Pattern􏷥
􏷤􏷣􏷦build.buildfarm.v1test.QueueStatus􏷥
􏷤􏷣􏷦build.buildfarm.v1test.OperationQueueStatus􏷥
􏷤􏷣􏷦build.bazel.remote.execution.v2.Platform􏷥
􏷤􏷣􏷦java.lang.RuntimeException􏷥
􏷤􏷣􏷦java.util.ArrayList􏷥

􏲏􏲐􏲍build.buildfarm.instance.shard.JedisClusterFactory􏲎
􏲏􏲐􏲍build.buildfarm.common.redis.BalancedRedisQueue􏲎
􏲏􏲐􏲍build.buildfarm.common.redis.ProvisionedRedisQueue􏲎
􏲏􏲐􏲍build.buildfarm.common.StringVisitor􏲎
􏲏􏲐􏲍redis.clients.jedis.JedisCluster􏲎
􏲏􏲐􏲍org.junit.Test􏲎
􏲏􏲐􏲍java.util.List􏲎
􏲏􏲐􏲍java.util.ArrayList􏲎
􏲏􏲐􏲍org.junit.runner.RunWith􏲎
􏲏􏲐􏲍org.junit.runners.JUnit4􏲎
􏲏􏲐􏲍java.lang.Thread􏲎
􏲏􏲐􏲍java.util.concurrent.TimeUnit􏲎
􏲏􏲐􏲍java.lang.RuntimeException􏲎
􏲏􏲐􏲍java.io.IOException􏲎
􏲏􏲐􏲍java.util.function.Supplier􏲎
􏲏􏲐􏲍org.mockito.Mock􏲎
􏲏􏲐􏲍org.mockito.MockitoAnnotations􏲎
􏲏􏲐􏲍java.util.Arrays􏲎
􏲏i􏲐􏲍com.google.common.truth.Truth.assertThat􏲎
􏲏i􏲐􏲍org.mockito.Mockito.eq􏲎
􏲏i􏲐􏲍org.mockito.Mockito.mock􏲎
􏲏i􏲐􏲍org.mockito.Mockito.times􏲎
􏲏i􏲐􏲍org.mockito.Mockito.verify􏲎
􏲏i􏲐􏲍org.mockito.Mockito.when􏲎
􏲏i􏲐􏲍org.mockito.Mockito.any􏲎

􏶨different queues based on platform execution requirements􏶧
􏶦the appropriate queues are chosen based on given properties􏶥
􏶘-􏶙􏶰􏶯􏶮List<ProvisionedRedisQueue>􏶭􏶬queues􏶫􏶪􏶩

􏷐constructor􏷏
􏶠construct the operation queue with various provisioned redis queues􏶡
􏷘+􏷗􏴅Constructor􏴆􏷒operation queue􏷑
􏶜􏶝􏷆List<ProvisionedRedisQueue>􏷅􏷄queues􏷃􏷀provisioned queues􏶿
􏶴
    this.queues = queues;
􏶳

􏷐visit each element in the dequeue􏷏
􏶠enacts a visitor over each element in the dequeue􏶡
􏷘+􏷗􏴅Observer􏴆􏷒visit dequeue􏷑
􏶜􏶝􏷆JedisCluster􏷅􏷄jedis􏷃􏷀jedis cluster client􏶿
􏶜􏶝􏷆StringVisitor􏷅􏷄visitor􏷃􏷀a visitor for each visited element in the queue􏶿
􏶴
    for (ProvisionedRedisQueue provisionedQueue: queues){
        provisionedQueue.queue().visitDequeue(jedis,visitor);
    }
􏶳

􏷐remove element from dequeue􏷏
􏶠removes an element from the dequeue and specifies whether it was removed􏶡
􏷘+􏷗􏴅Transformer􏴆􏷒remove from dequeue􏷑
􏶜􏶝􏷆JedisCluster􏷅􏷄jedis􏷃􏷀jedis cluster client􏶿
􏶜􏶝􏷆string􏷅􏷄val􏷃􏷀the value to remove􏶿
􏶾bool􏶽􏶼was removed􏶻􏶺whether or not the value was removed􏶹
􏶴
    for (ProvisionedRedisQueue provisionedQueue: queues){
        if (provisionedQueue.queue().removeFromDequeue(jedis,val)){
            return true;
        }
    }
    return false;
􏶳

􏷐visit each element in the queue􏷏
􏶠enacts a visitor over each element in the queue􏶡
􏷘+􏷗􏴅Observer􏴆􏷒visit􏷑
􏶜􏶝􏷆JedisCluster􏷅􏷄jedis􏷃􏷀jedis cluster client􏶿
􏶜􏶝􏷆StringVisitor􏷅􏷄visitor􏷃􏷀a visitor for each visited element in the queue􏶿
􏶴
    for (ProvisionedRedisQueue provisionedQueue: queues){
        provisionedQueue.queue().visit(jedis,visitor);
    }
􏶳

􏷐get size􏷏
􏶠checks the current length of the queue􏶡
􏷘+􏷗􏴅Observer􏴆􏷒size􏷑
􏶜􏶝􏷆JedisCluster􏷅􏷄jedis􏷃􏷀jedis cluster client􏶿
􏶾l􏶽􏶼length􏶻􏶺the current length of the queue􏶹
􏶴
    //the accumulated size of all of the queues
    return queues.stream().mapToInt(i -> (int)i.queue().size(jedis)).sum();
􏶳

􏷐get dequeue name􏷏
􏶠get the name of the internal dequeue used by the queue. since each internal queue has their own dequeue, this name is generic without the hashtag􏶡
􏷘+􏷗􏴅Observer􏴆􏷒get dequeue name􏷑
􏶾string􏶽􏶼name􏶻􏶺the name of the queue􏶹
􏶴
    return "operation_dequeue";
􏶳

􏷐get dequeue name􏷏
􏶠get the name of the internal dequeue used by the queue. since each internal queue has their own dequeue, this name is generic without the hashtag􏶡
􏷘+􏷗􏴅Observer􏴆􏷒get dequeue name􏷑
􏶜􏶝􏷆List<Platform.Property>􏷅􏷄provisions􏷃􏷀provisions used to select an eligible queue􏶿
􏶾string􏶽􏶼name􏶻􏶺the name of the queue􏶹
􏶴
    BalancedRedisQueue queue = chooseEligibleQueue(provisions);
    return queue.getDequeueName();
􏶳

􏷐push a value onto the queue􏷏
􏶠adds the value into one of the internal backend redis queues􏶡
􏷘+u􏷗􏴅Transformer􏴆􏷒push􏷑
􏶜􏶝􏷆JedisCluster􏷅􏷄jedis􏷃􏷀jedis cluster client􏶿
􏶜􏶝􏷆string􏷅􏷄val􏷃􏷀the value to push onto the queue􏶿
􏶴
    queues.get(0).queue().push(jedis,val);
􏶳

􏷐push a value onto the queue􏷏
􏶠adds the value into one of the internal backend redis queues􏶡
􏷘+􏷗􏴅Transformer􏴆􏷒push􏷑
􏶜􏶝􏷆JedisCluster􏷅􏷄jedis􏷃􏷀jedis cluster client􏶿
􏶜􏶝􏷆List<Platform.Property>􏷅􏷄provisions􏷃􏷀provisions used to select an eligible queue􏶿
􏶜􏶝􏷆string􏷅􏷄val􏷃􏷀the value to push onto the queue􏶿
􏶴
    BalancedRedisQueue queue = chooseEligibleQueue(provisions);
    queue.push(jedis,val);
􏶳

􏷐pop element into internal dequeue and return value􏷏
􏶠this pops the element from one queue atomically into an internal list called the dequeue
it will perform an exponential backoff
null is returned if the overall backoff times out􏶡
􏷘+u􏷗􏴅Transformer􏴆􏷒dequeue􏷑􏶸InterruptedException􏶷
􏶜􏶝􏷆JedisCluster􏷅􏷄jedis􏷃􏷀jedis cluster client􏶿
􏶾string􏶽􏶼val􏶻􏶺the value of the transfered element.  null if the thread was interrupted􏶹
􏶴
    return queues.get(0).queue().dequeue(jedis);
􏶳

􏷐pop element into internal dequeue and return value􏷏
􏶠this pops the element from one queue atomically into an internal list called the dequeue
it will perform an exponential backoff
null is returned if the overall backoff times out􏶡
􏷘+􏷗􏴅Transformer􏴆􏷒dequeue􏷑􏶸InterruptedException􏶷
􏶜􏶝􏷆JedisCluster􏷅􏷄jedis􏷃􏷀jedis cluster client􏶿
􏶜􏶝􏷆List<Platform.Property>􏷅􏷄provisions􏷃􏷀provisions used to select an eligible queue􏶿
􏶾string􏶽􏶼val􏶻􏶺the value of the transfered element.  null if the thread was interrupted􏶹
􏶴
    BalancedRedisQueue queue = chooseEligibleQueue(provisions);
    return queue.dequeue(jedis);
􏶳

􏷐get status information about the queue􏷏
􏶠helpful for understanding the current load on the queue and how elements are balanced􏶡
􏷘+􏷗􏴅Observer􏴆􏷒status􏷑
􏶜􏶝􏷆JedisCluster􏷅􏷄jedis􏷃􏷀jedis cluster client􏶿
􏶾OperationQueueStatus􏶽􏶼status􏶻􏶺the current status of the queue􏶹
􏶴
    //get properties
    List<QueueStatus> provisions = new ArrayList<>();
    for (ProvisionedRedisQueue provisionedQueue: queues){
        provisions.add(provisionedQueue.queue().status(jedis));
    }
    
    //build proto
    OperationQueueStatus status = OperationQueueStatus.newBuilder().setSize(size(jedis)).addAllProvisions(provisions).build();
    return status;
􏶳

􏷐get status information about the queue􏷏
􏶠helpful for understanding the current load on the queue and how elements are balanced􏶡
􏷘+􏷗􏴅Observer􏴆􏷒status􏷑
􏶜􏶝􏷆JedisCluster􏷅􏷄jedis􏷃􏷀jedis cluster client􏶿
􏶜􏶝􏷆List<Platform.Property>􏷅􏷄provisions􏷃􏷀provisions used to select an eligible queue􏶿
􏶾QueueStatus􏶽􏶼status􏶻􏶺the current status of the queue􏶹
􏶴
    BalancedRedisQueue queue = chooseEligibleQueue(provisions);
    return queue.status(jedis);
􏶳

􏷐choose an eligible queue based on given properties􏷏
􏶠we use the platform execution properties of a queue entry to determine the appropriate queue
if there no eligible queues, an exception is thrown􏶡
􏷘-􏷗􏴅Observer􏴆􏷒choose eligible queue􏷑
􏶜􏶝􏷆List<Platform.Property>􏷅􏷄provisions􏷃􏷀provisions to check that requirements are met􏶿
􏶾BalancedRedisQueue􏶽􏶼queue􏶻􏶺the chosen queue􏶹
􏶴
    for (ProvisionedRedisQueue provisionedQueue: queues){
        if (provisionedQueue.isEligible(toMultimap(provisions))){
            return provisionedQueue.queue();
        }
    }
    throw new RuntimeException("there are no eligible queues for the provided execution requirements.  One solution to is to configure a provision queue with no requirements which would be eligible to all operations.");
􏶳

􏷐checks required properties for eligibility􏷏
􏶠checks whether the properties given fulfill all of the required provisions for the operation queue to accept it􏶡
􏷘+􏷗􏴅Observers􏴆􏷒is eligible􏷑
􏶜􏶝􏷆List<Platform.Property>􏷅􏷄properties􏷃􏷀properties to check that requirements are met􏶿
􏶾bool􏶽􏶼is eligible􏶻􏶺whether the operation queue will accept an operation containing the given properties􏶹
􏶴
    for (ProvisionedRedisQueue provisionedQueue: queues){
        if (provisionedQueue.isEligible(toMultimap(properties))){
            return true;
        }
    }
    return false;
􏶳

􏷐convert proto provisions into java multimap􏷏
􏶠this conversion is done to more easily check if a key/value exists in the provisions􏶡
􏷘-􏷗􏴅Observer􏴆􏷒to multimap􏷑
􏶜􏶝􏷆List<Platform.Property>􏷅􏷄provisions􏷃􏷀provisions list to convert􏶿
􏶾SetMultimap<String, String>􏶽􏶼provision set􏶻􏶺the provisions as a set􏶹
􏶴
    SetMultimap<String, String> set = LinkedHashMultimap.create();
    for (Platform.Property property : provisions) {
        set.put(property.getName(), property.getValue());
    }
    return set;
􏶳