class
❪"systems"❫
❪"utilities"❫
❪"code_tasks"❫
❪"program_options"❫
❪"credentials"❫
❪"code_submit_data"❫
❪"code_task_actions"❫
⚯

⚞⚟

◀public: static▶ Code_Tasks ☀Create(Program_Options const& program_options) ❰
    Code_Tasks tasks;
    
    //read in the credentials
    auto credentials = Create_Credentials(program_options);
    
    //add all the code tasks
    tasks.tasks.push_back(Remove_Top_Empty_Lines(credentials));
    tasks.tasks.push_back(Rtrim_Lines(credentials));
    tasks.tasks.push_back(Whitespace_Lines_To_Empty_Lines(credentials));
    tasks.tasks.push_back(Squeeze_Whitespace_Lines(credentials));
    tasks.tasks.push_back(Align_Macros(credentials));
    tasks.tasks.push_back(Break_Braces_For_Typedefd_Enums(credentials));
    tasks.tasks.push_back(Single_Blank_Newline_At_End(credentials));
    //fix workspace file...
    //comment out ccpcheck error and tag a user to fix it...
    //rename headers so that the casing matches the actual filename...
    //make system headers use <> instead of ""...
    //make include guards match filename...
    
    return tasks;
❱


◀private: static▶ Credentials ☀Create_Credentials(Program_Options const& program_options) ❰

    //read in the credentials
    Credentials credentials;
    credentials.username = program_options.Username();
    credentials.password = program_options.Password();
    
    return credentials;
❱
◀private: static▶ Code_Submit_Data ☀Remove_Top_Empty_Lines(Credentials const& credentials) ❰
    
    auto code = Create_Shared_Code_Submit_Data(credentials);
    
    //fill specific issue data
    code.issue.input_description = "remove top empty lines from source files";
    code.issue.input_summary = "remove-top-empty-lines";
    
    //fill pull-request data
    code.pull_request.reviewers = std::vector<std::string>{"jwiedmann"};
    code.pull_request.description = "remove top empty lines from source files";
    code.pull_request.title = "remove-top-empty-lines";
    
    //other meta data
    code.name = "Remove Top Empty Lines";
    code.branch_name = "remove-top-empty-lines";
    code.commit_message = "removes top empty lines";
    code.action = Code_Task_Actions::Remove_Top_Empty_Lines;
    
    return code;
❱
◀private: static▶ Code_Submit_Data ☀Rtrim_Lines(Credentials const& credentials) ❰
    
    auto code = Create_Shared_Code_Submit_Data(credentials);
    
    //fill specific issue data
    code.issue.input_description = "trim whitespace from the right of lines";
    code.issue.input_summary = "rtrim lines";
    
    //fill pull-request data
    code.pull_request.reviewers = std::vector<std::string>{"jwiedmann"};
    code.pull_request.description = "trim whitespace from the right of lines";
    code.pull_request.title = "rtrim lines";
    
    //other meta data
    code.name = "Rtrim Lines";
    code.branch_name = "rtrim-lines";
    code.commit_message = "rtrim lines";
    code.action = Code_Task_Actions::Rtrim_Lines;
    
    return code;
❱
◀private: static▶ Code_Submit_Data ☀Whitespace_Lines_To_Empty_Lines(Credentials const& credentials) ❰
    
    auto code = Create_Shared_Code_Submit_Data(credentials);
    
    //fill specific issue data
    code.issue.input_description = "convert whitespace lines to empty lines";
    code.issue.input_summary = "whitespace lines to empty lines";
    
    //fill pull-request data
    code.pull_request.reviewers = std::vector<std::string>{"jwiedmann"};
    code.pull_request.description = "convert whitespace lines to empty lines";
    code.pull_request.title = "whitespace lines to empty lines";
    
    //other meta data
    code.name = "Whitespace Lines to Empty Lines";
    code.branch_name = "whitespace-lines-to-empty-lines";
    code.commit_message = "converts whitespace lines to empty lines";
    code.action = Code_Task_Actions::Whitespace_Lines_To_Empty_Lines;
    
    return code;
❱
◀private: static▶ Code_Submit_Data ☀Squeeze_Whitespace_Lines(Credentials const& credentials) ❰
    
    auto code = Create_Shared_Code_Submit_Data(credentials);
    
    //fill specific issue data
    code.issue.input_description = "multiple whitespace lines to single line";
    code.issue.input_summary = "squeeze whitespace lines";
    
    //fill pull-request data
    code.pull_request.reviewers = std::vector<std::string>{"jwiedmann"};
    code.pull_request.description = "multiple whitespace lines to single line";
    code.pull_request.title = "squeeze whitespace lines";
    
    //other meta data
    code.name = "Squeeze Whitespace Lines";
    code.branch_name = "squeeze-whitespace-lines";
    code.commit_message = "removes additional newlines and ensures there is only one";
    code.action = Code_Task_Actions::Squeeze_Whitespace_Lines;
    
    return code;
❱
◀private: static▶ Code_Submit_Data ☀Align_Macros(Credentials const& credentials) ❰
    
    auto code = Create_Shared_Code_Submit_Data(credentials);
    
    //fill specific issue data
    code.issue.input_description = "aligns macro values";
    code.issue.input_summary = "align macro values";
    
    //fill pull-request data
    code.pull_request.reviewers = std::vector<std::string>{"jwiedmann"};
    code.pull_request.description = "aligns macro values";
    code.pull_request.title = "align macro values";
    
    //other meta data
    code.name = "Align Macros";
    code.branch_name = "align-macros";
    code.commit_message = "aligns macro values";
    code.action = Code_Task_Actions::Align_Macros;
    
    return code;
❱
◀private: static▶ Code_Submit_Data ☀Break_Braces_For_Typedefd_Enums(Credentials const& credentials) ❰
    
    auto code = Create_Shared_Code_Submit_Data(credentials);
    
    //fill specific issue data
    code.issue.input_description = "adds missing brace break on typedef'd enums";
    code.issue.input_summary = "adds missing brace break";
    
    //fill pull-request data
    code.pull_request.reviewers = std::vector<std::string>{"jwiedmann"};
    code.pull_request.description = "adds missing brace break on typedef'd enums";
    code.pull_request.title = "adds missing brace break";
    
    //other meta data
    code.name = "Break Braces For Typedefd Enums";
    code.branch_name = "fix-missing-break-on-brace";
    code.commit_message = "adds missing breaks";
    code.action = Code_Task_Actions::Break_Braces_For_Typedefd_Enums;
    
    return code;
❱
◀private: static▶ Code_Submit_Data ☀Single_Blank_Newline_At_End(Credentials const& credentials) ❰
    
    auto code = Create_Shared_Code_Submit_Data(credentials);
    
    //fill specific issue data
    code.issue.input_description = "ensure files end with a single newline to avoid warnings";
    code.issue.input_summary = "single newline at end";
    
    //fill pull-request data
    code.pull_request.reviewers = std::vector<std::string>{"jwiedmann"};
    code.pull_request.description = "ensure files end with a single newline to avoid warnings";
    code.pull_request.title = "single newline at end";
    
    //other meta data
    code.name = "Single Blank Line At End";
    code.branch_name = "single-blank-line-at-end";
    code.commit_message = "adjusts file endings to contain a single blank line";
    code.action = Code_Task_Actions::Single_Blank_Newline_At_End;
    
    return code;
❱







◀private: static▶ Code_Submit_Data ☀Create_Shared_Code_Submit_Data(Credentials const& credentials) ❰
    Code_Submit_Data code;
    
    //fill shared issue data
    code.issue.project_id = 10201;
    code.issue.issue_type = "Feature ";
    code.issue.jira_url = "https://jira.f2si.net/";
    code.issue.jira_username = credentials.username;
    code.issue.jira_password = credentials.password;
    code.issue.build_number = "build-16";
    code.issue.report_type = "Software";
    code.issue.assignee = "thickey";
    code.issue.component = "Sim Host - Aircraft Systems";
    
    return code;
❱
