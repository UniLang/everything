class
❪"systems"❫
❪"utilities"❫
❪"current_issue"❫
❪"processing_settings"❫
❪"code_submit_data"❫
⚯

⚞⚟

//how we derive branch names based on the way bit bucket works
//and based on the tag we get back from creating a jira issue
//If there is no issue tag, we just create the branch name without the tag
◀public: static▶ std::string ☀Derive_Branch_Name(Code_Submit_Data const& task, Current_Issue & issue, Processing_Settings const& settings) ❰


    //how to create the branch name if it does not have an associated issue tag
    if (!issue.Exists()){
        return "feature/" + task.branch_name;
    }
    
    //how to create the branch when it does have an associated issue tag
    return "feature/" + issue.Tag_Name() + "-" + task.branch_name;
❱