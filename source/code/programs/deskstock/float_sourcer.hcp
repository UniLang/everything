class

❪vector❫
❪"code/programs/deskstock/settings/deskstock_state"❫
⚯
❪"code/utilities/web/lib"❫
❪"code/utilities/program/call/lib"❫
❪"code/utilities/types/strings/transformers/other/lib"❫
❪"code/utilities/types/vectors/operators/lib"❫
❪"code/utilities/peripheral/mouse/mouse_controller"❫
⚞⚟


◀public: static▶ std::vector<float> ☀Source_Floats(Deskstock_State & state) ❰
    std::vector<float> current;
    
    //extract 1 (simulation)
    if (state.current_settings.how_to_get_value.through_simulation.simulate){
        auto temp = state.current_settings.how_to_get_value.through_simulation.cycled_values[state.current_settings.how_to_get_value.through_simulation.current_simulation_index];
        current.emplace_back(temp);
        
        //update index 
        if (state.current_settings.how_to_get_value.through_simulation.current_simulation_index >= state.current_settings.how_to_get_value.through_simulation.cycled_values.size()-1){
            state.current_settings.how_to_get_value.through_simulation.current_simulation_index = 0;
        }
        else{
            state.current_settings.how_to_get_value.through_simulation.current_simulation_index++;
        }
    }
    
    //extract 2 (custom)
    else if (state.current_settings.how_to_get_value.through_custom.enable){
        for (auto const& it: state.current_settings.how_to_get_value.through_custom.user_commands){
            auto result = execute(it);
            auto floats = Collect_Whitespace_Separated_Floats(result);
            current += floats;
            
        }
    }
    
    //extract 3 (through mouse)
    else if (state.current_settings.how_to_get_value.through_mouse.enable){
        auto m = Mouse_Controller();
        auto pos = m.current_mouse_position();
        current.emplace_back(pos.x);
        current.emplace_back(pos.y);
    }
    
    //extract 3 (from web)
    else{
        auto temp = Extract_Web_Json_Float(state.current_settings.how_to_get_value.through_web);
        current.emplace_back(temp);
    }
    
    //TODO(anyone): Add additional ways to source a value
    return current;
❱