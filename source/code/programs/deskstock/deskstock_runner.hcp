class

❪"code/utilities/linguistics/chinese/chinese_translations"❫
❪"code/utilities/peripheral/screen/good_bad/good_bad_screen_tint_settings"❫
❪"code/utilities/time/sleeping/lib"❫
❪"code/programs/deskstock/settings/deskstock_settings"❫
❪"code/programs/deskstock/settings/deskstock_state"❫
❪"code/programs/deskstock/meta_settings"❫
⚯
❪"code/utilities/types/general/lib"❫
❪"code/utilities/program/common_actions/exits/lib"❫
❪"code/utilities/filesystem/files/creating/lib"❫
❪"code/utilities/program/common_actions/locale/lib"❫
❪"code/utilities/types/vectors/observers/lib"❫
❪"code/utilities/types/vectors/operators/lib"❫
❪"code/utilities/filesystem/files/getting/lib"❫
❪"code/utilities/filesystem/paths/lib"❫
❪"code/utilities/types/strings/observers/splitting/lib"❫
❪"code/utilities/types/strings/transformers/squeeze/lib"❫
❪"code/utilities/peripheral/screen/screen_tint_setter"❫
❪"code/utilities/web/endpoints/stock/stock_getter"❫
❪"code/utilities/program/common_actions/locale/locale_setter"❫
❪"code/utilities/web/lib"❫
❪iostream❫
❪"nlohmann/json.hpp"❫
❪"code/programs/deskstock/default_settings_getter"❫
❪"code/utilities/program/inputs/config/config_monitor"❫
❪"code/utilities/program/inputs/config/config_monitor_settings"❫
❪"code/utilities/types/strings/transformers/search_replace/lib"❫
❪"code/utilities/program/call/lib"❫
❪"code/utilities/system/installed_programs_checker"❫
❪"code/utilities/terminal/good_bad/good_bad_terminal_changer"❫
❪"code/utilities/math/math"❫
❪"code/programs/deskstock/float_sourcer"❫
❪"code/programs/deskstock/system_effecter"❫
⚞⚟

◀public: static▶ void ☀Run(Meta_Settings const& meta) ❰

    //other settings
    std::string failure_to_source_error = "couldn't source any values";
    std::vector<float> default_values_when_failure_to_source;

    //Load the program state for usage in the rest of the program
    auto state = Get_Program_State(meta);
    
    //How to source the value.
    //we can get a float from anywhere
    //here we choose to source from various places
    auto how_to_source_value = [&](){
        auto success = Config_Monitor::Monitor_Changes(state.ms,state.current_settings,state.default_settings);
        
        if (success){
            return Float_Sourcer::Source_Floats(state);
        }
        
        // we couldn't read from config
        std::cerr << failure_to_source_error << std::endl;
        return default_values_when_failure_to_source;
    };
    
    //Whether we consider the value changed and should take action.
    //we decide whether to take action based on configuration.
    //we might only take action if the values have changed.
    //or we might ALWAYS take action each iteration; its up to the user.
    auto should_take_action = [&](std::vector<float> const& previous, std::vector<float> const& current){
        
        if (state.current_settings.monitor.only_on_change){
            return Math::different(previous,current);
        }
        return true;
    };
    
    // if the config was updated, we should reset the main loop
    // this is because, the sleep time might have been changed.
    // we could refactor this away, by fixing the main program loop.
    auto should_reset = [&](){
        return Config_Monitor::Trigger_Update(state.ms);
    };
    
    // what to do when the value changes
    // in our case, we perform the configured effects on the system
    auto on_value_change = [&](std::vector<float> const& current){
        System_Effecter::Effect_The_System(state,current);
    };
    
    // infinite program loop
    // all the lambdas are a little sloppy, improvements are welcome.
    Locale_Setter::Set(state.current_settings.startup.locale);
    Installed_Programs_Checker::Ensure_Installed(state.current_settings.startup.needed_programs);
    When_Value_Changes(state.current_settings.monitor.ms_to_fetch_changing_data,
                       how_to_source_value,
                       should_reset,
                       should_take_action,
                       on_value_change);
❱


// The deskstock state is primarily whatever is in the config file
// if the config file does not exist we will automatically refresh it with default values
◀private: static▶ Deskstock_State ☀Get_Program_State(Meta_Settings const& meta) ❰
    Deskstock_State state;
    state.default_settings = Default_Settings_Getter::Get();
    state.ms.config_path = Full_Path_To_Home_Config_File(meta.program_name);
    Config_Monitor::Monitor_Changes(state.ms,state.current_settings,state.default_settings);
    return state;
❱

// this is kind of sloppy.  I just wanted a generic "do this every time a value changes" kind of function.
// I ended up slipping in a lot of lambdas as the tool grew.
// It still feels event based, which is fine.
// But anyway, this is the little float observing engine that runs in a loop and dispatches to all the behaviors passed in.
◀private: template <typename Fun1, typename Fun2, typename Fun3, typename Fun4>
static void When_Value_Changes(int & check_mseconds, Fun1 source_action, Fun2 should_reset, Fun3 should_take_action, Fun4 change_action){
    
    std::vector<float> previous;
    std::vector<float> current;
    while (true){
        previous.clear();
        current.clear();
        For_Every_N_Milliseconds_With_Exception_Catching(check_mseconds,[&](){
            
            //if current value has changed
            current = source_action();
            if (should_take_action(previous,current)){
                
                //tint screen accordingly
                change_action(current);
            }
            
            //store previous value for next iteration
            previous = current;
            
        },should_reset);
    }
}
▶