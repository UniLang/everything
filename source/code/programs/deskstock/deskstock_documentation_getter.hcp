class
❪iostream❫
❪fstream❫
❪string❫
❪"code/utilities/documentation/common_documentation_getter"❫
⚯
❪"code/utilities/types/converters/lib"❫
❪"code/programs/deskstock/settings/startup_settings"❫
❪"code/programs/deskstock/default_settings_getter"❫
❪"code/utilities/formats/json/converters/lib"❫
❪"code/utilities/formats/json/converters/type_to_json_string"❫
⚞⚟

◀public: static▶ Structure ☀Get() ❰
    Structure s;
    s.name = "deskstock";
    s.literature.paragraphs.emplace_back(Title());
    s.literature.paragraphs.emplace_back(Introduction());
    s.literature.paragraphs.emplace_back(Common_Documentation_Getter::Common_Installation_Instructions("deskstock"));
    s.literature.paragraphs.emplace_back(Configuration());
    s.literature.paragraphs.emplace_back(Startup());
    s.literature.paragraphs.emplace_back(Monitoring());
    s.literature.paragraphs.emplace_back(Sourcing());
        s.literature.paragraphs.emplace_back(Sourcing_Web());
        s.literature.paragraphs.emplace_back(Sourcing_Simulation());
        s.literature.paragraphs.emplace_back(Sourcing_Mouse());
        s.literature.paragraphs.emplace_back(Sourcing_Custom());
    s.literature.paragraphs.emplace_back(Effects());
    return s;
❱


◀private: static▶ Paragraph ☀Title() ❰
    Paragraph p;
    p.depth.value = as_wstring("0");
    p.title.value = as_wstring("Feel the stock market");
    
    Sentence s;
    Sentence_Image img;
    img.alternative_text.value = as_wstring("deskstock");
    s.images.emplace_back(img);
    p.sentences.emplace_back(s);
    return p;
❱

◀private: static▶ Paragraph ☀Introduction() ❰
    Paragraph p;
    p.depth.value = as_wstring("0");
    p.title.value = as_wstring("Introduction");
    
    Add_Sentence(p,"deskstock is a tool that monitors changing values over time");
    Add_Sentence(p,"it adjusts your system to reflect the changing value in fun and potentially useful ways");
    Add_Sentence(p,"don't just watch a value change; have it grow or shrink your mouse cursor");
    Add_Sentence(p,"have it change the color of your terminal or play sound effects when certain values are reached");
    Add_Sentence(p,"there are different ways to \"source\" values for monitoring, and lots of built in \"effects\" to perform on the monitored values");
    Add_Sentence(p,"you can customize how frequently observations and changes are performed on your system");
    Add_Sentence(p,"the tool is designed to be run in the background and reflect changes to you throughout the day");
    Add_Sentence(p,"write your own configurations and share them with others");
    Add_Sentence(p,"here is an example of changing the terminal color based on a chosen stock");
    Add_Sentence_With_Image(p,"a green terminal when stocks are up","img/stock-up-example.png");
    Add_Sentence_With_Image(p,"a red terminal when stocks are down","img/stock-down-example.png");
    return p;
❱

◀private: static▶ Paragraph ☀Configuration() ❰
    Paragraph p;
    p.depth.value = as_wstring("0");
    p.title.value = as_wstring("Configuration");
    
    Add_Sentence(p,"all configuration for deskstock will be found in your home directory inside the file **.deskstock**");
    Add_Sentence(p,"this is a json file that will be automatically reloaded by the program upon saving");
    Add_Sentence(p,"go ahead, you can adjust this configuration while the program is running, and it will pick up the changes in real-time");
    Add_Sentence(p,"if you specify malformed json, or your json does not match the schema known to the program, it will tell you");
    Add_Sentence(p,"the best way to fix this, is to simply delete the configuration file");
    Add_Sentence(p,"the program will automatically re-create it with a valid default configuration");
    Add_Sentence(p,"a word of warning on how you configure things");
    Add_Sentence(p,"deskstock does not apply any artificial restrictions");
    Add_Sentence(p,"if you want to ping a sever every millisecond, or spawn an infinite amount of processes you can");
    Add_Sentence(p,"its up to you to configure things that are sensible on your machine");
    Add_Sentence(p,"in the following sections, we will cover more specifically the different areas of configuration");
    return p;
❱

◀private: static▶ Paragraph ☀Startup() ❰
    Paragraph p;
    p.depth.value = as_wstring("1");
    p.title.value = as_wstring("Startup");
    
    Add_Sentence(p,"startup configurations refer to any initial provisioning that needs to take place as soon as deskstock starts");
    auto default_settings = Default_Settings_Getter::Get();
    auto config_example = Type_To_Json_String::As_JSON_String(default_settings.startup);
    Add_Sentence_With_Code(p,"configurations related to the program startup looks as followed",config_example);
    Add_Sentence(p,"the **locale** of the program can be changed depending on the user's language and region");
    Add_Sentence(p,"disable the **set** flag if you don't want to configure the locale at all");
    Add_Sentence(p,"in this case, your system's default will be used");
    //break
    Add_Sentence(p,"**needed programs** are additional programs that deskstock will call for you on your behalf when monitoring and effecting");
    Add_Sentence(p,"if you want to ensure the user has these programs available, specify them here");
    Add_Sentence(p,"deskstock will error out if a program is listed but cannot be found");
    Add_Sentence(p,"this is useful if you write custom rules that rely on programs which might not exist on other people's machines");
    Add_Sentence(p,"disable the **check** flag if you don't want to check for additional programs");
    //break
    Add_Sentence(p,"these effects only take place on program startup");
    Add_Sentence(p,"unlike other configurations, the program will need restarted for the settings to take effect");
    
    return p;
❱

◀private: static▶ Paragraph ☀Monitoring() ❰
    Paragraph p;
    p.depth.value = as_wstring("1");
    p.title.value = as_wstring("Monitoring");
    
    Add_Sentence(p,"monitoring configurations refer to how deskstock monitors values and when it decides to perform effects");
    auto default_settings = Default_Settings_Getter::Get();
    auto config_example = Type_To_Json_String::As_JSON_String(default_settings.monitor);
    Add_Sentence_With_Code(p,"configurations related to monitoring looks as followed",config_example);
    Add_Sentence(p,"deskstock runs in an infinite loop where it sources data and decides whether to effect the system");
    Add_Sentence(p,"you can configure how long it sleeps between each iteration with **ms_to_fetch_changing_data**");
    Add_Sentence(p,"usually, deskstock will only effect the system when it discovers the value has changed from what it was previously");
    Add_Sentence(p,"if you want to perform the effect again (despite the value having not changed), you can disable **only_on_change**");
    Add_Sentence(p,"depending on how you source values, and what kind of effects you perform on your system, be careful about settings the fetch rate too quick");
    return p;
❱

◀private: static▶ Paragraph ☀Sourcing() ❰
    Paragraph p;
    p.depth.value = as_wstring("1");
    p.title.value = as_wstring("Sourcing");
    
    Add_Sentence(p,"what value or set of values do you want to monitor?");
    Add_Sentence(p,"sourcing refers to the configuration you can use to specify how your value(s) will be monitored");
    Add_Sentence(p,"Each section below shows different ways you can enable sourcing for particular values");
    return p;
❱

◀private: static▶ Paragraph ☀Sourcing_Web() ❰
    Paragraph p;
    p.depth.value = as_wstring("2");
    p.title.value = as_wstring("Through a Web Endpoint");
    
    Add_Sentence(p,"sourcing values through a web endpoint is possible assuming the endpoint returns json");
    auto default_settings = Default_Settings_Getter::Get();
    auto config_example = Type_To_Json_String::As_JSON_String(default_settings.how_to_get_value.through_web);
    Add_Sentence_With_Code(p,"below is an example configuration that sources today's percentage change on UBER stock",config_example);
    Add_Sentence(p,"the fetch url is the endpoint where json is sourced from");
    Add_Sentence(p,"different strategies for fetching can be used internally by deskstock");
    Add_Sentence(p,"strategy 0 will use the curl library directly.  strategy 1 will call the actual curl cli program");
    Add_Sentence(p,"**desired_key** and **steps** are used to extract a value from the returned json payload");
    Add_Sentence(p,"each step of extraction may require indexing with a number or accessing a key");
    Add_Sentence(p,"if its a key name, set index to false and provide the name");
    Add_Sentence(p,"if you need to index into an array, set index to true and provide an index number (as a string)");
    Add_Sentence(p,"the extraction steps take place in the order they are specified");
    return p;
❱
◀private: static▶ Paragraph ☀Sourcing_Simulation() ❰
    Paragraph p;
    p.depth.value = as_wstring("2");
    p.title.value = as_wstring("Through Simulation");
    Add_Sentence(p,"sometimes you need to test your effects to see what they will look like");
    Add_Sentence(p,"its not always possible to wait for your values to change from your configured source");
    Add_Sentence(p,"we mitigate this by allowing you to temporarily switch to a simulated source");
    Add_Sentence(p,"simulation will allow you to cycle through a set of values in a predictable way");
    Add_Sentence(p,"once you are happy with what the effects look like on your specified examples, you can switch back to using a different source");
    auto default_settings = Default_Settings_Getter::Get();
    default_settings.how_to_get_value.through_simulation.simulate = true;
    auto config_example = Type_To_Json_String::As_JSON_String(default_settings.how_to_get_value.through_simulation);
    Add_Sentence_With_Code(p,"below is an example configuration for simulating over a set of test values",config_example);
    Add_Sentence(p,"this allows the user to experiment with the effects configuration in realtime");
    Add_Sentence(p,"when the last value in the list is provided, it will start back over at the beginning of the list");
    return p;
❱
◀private: static▶ Paragraph ☀Sourcing_Mouse() ❰
    Paragraph p;
    p.depth.value = as_wstring("2");
    p.title.value = as_wstring("Through Mouse");
    
    Add_Sentence(p,"you can source the x and y mouse coordinates and use them as your changing values");
    auto default_settings = Default_Settings_Getter::Get();
    default_settings.how_to_get_value.through_mouse.enable = true;
    auto config_example = Type_To_Json_String::As_JSON_String(default_settings.how_to_get_value.through_mouse);
    Add_Sentence_With_Code(p,"below shows the typical configuration for mouse sourcing",config_example);
    return p;
❱
◀private: static▶ Paragraph ☀Sourcing_Custom() ❰
    Paragraph p;
    p.depth.value = as_wstring("2");
    p.title.value = as_wstring("Through Custom");
    Add_Sentence(p,"the flood gates are open so you can source values through any custom scripts or programs you want");
    Add_Sentence(p,"specify any command which you can execute from your shell");
    Add_Sentence(p,"as long as the program outputs whitespace separated values to stdout they will be monitored by deskstock");
    auto default_settings = Default_Settings_Getter::Get();
    default_settings.how_to_get_value.through_custom.enable = true;
    auto config_example = Type_To_Json_String::As_JSON_String(default_settings.how_to_get_value.through_custom);
    Add_Sentence_With_Code(p,"below is an example that takes the current seconds of the minute and mods it by 5 to get different values",config_example);
    return p;
❱


◀private: static▶ Paragraph ☀Effects() ❰
    Paragraph p;
    p.depth.value = as_wstring("1");
    p.title.value = as_wstring("Effects");
    Add_Sentence(p,"Once you are sourcing values, there are various ways to effect the system based on the changing value(s)");
    return p;
❱


◀private: static▶ void ☀Add_Sentence(Paragraph & p, std::string const& str) ❰
    Sentence s;
    s.text.value = as_wstring(str);
    p.sentences.emplace_back(s);
❱
◀private: static▶ void ☀Add_Sentence_With_Code(Paragraph & p, std::string const& str, std::string const& code) ❰
    Sentence s;
    s.text.value = as_wstring(str);
    
    Code_Line line;
    line.line.value = as_wstring(code);
    s.codes.emplace_back(line);
    p.sentences.emplace_back(s);
❱

◀private: static▶ void ☀Add_Sentence_With_Image(Paragraph & p, std::string const& str, std::string const& image_path) ❰
    Sentence s;
    s.text.value = as_wstring(str);
    
    Sentence_Image img;
    img.image_path.value = as_wstring(image_path);
    s.images.emplace_back(img);
    p.sentences.emplace_back(s);
❱