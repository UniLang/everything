class
❪string❫
❪vector❫
❪"code/programs/reflexivity/tool_chain_conversion/conversion_test_data/bazel_conversion_tests"❫
⚯
❪"code/utilities/filesystem/paths/lib"❫
❪"code/utilities/filesystem/files/creating/lib"❫
❪"code/utilities/types/strings/transformers/appending/lib"❫
❪"code/utilities/types/vectors/converters/lib"❫
❪"code/utilities/filesystem/files/deleting/lib"❫
❪"code/utilities/types/strings/transformers/casing/lib"❫
❪"code/programs/reflexivity/tool_chain_conversion/conversion_test_data/test_getter"❫
❪"code/programs/reflexivity/tool_chain_conversion/readme_creator"❫
❪"code/utilities/linguistics/computer/file_extension/file_extension_getter"❫
⚞⚟

◀public: static▶ void ☀Refresh()❰
    
    //Clear out directory before re-populating
    Make_Sure_Path_Exists_And_Is_Empty(Unilang_Bazel_Test_Directory());
    
    //Move to the directory and place a readme file inside
    Move_To_Unilang_Bazel_Test_Directory();
    Readme_Creator::Create();
    
    Create_All_Bazel_Transcompilation_Tests();
❱

◀private: static▶ void ☀Create_All_Bazel_Transcompilation_Tests()❰
    auto all = Test_Getter::Get_All_Bazel_Tests();
    for (auto const& it: all.tests){
        Create_Files_For_A_Bazel_Test(it);
    }
❱

◀private: static▶ void ☀Create_Files_For_A_Bazel_Test(Bazel_Conversion_Test const& test)❰

    //decide the subdirectory
    auto full_path_of_test = Decide_Full_Path_To_Test(test);
    Create_Path_If_It_Doesnt_Already_Exist(full_path_of_test);
    
    //create the files
    auto artifact_type = test.transcompilation_chain[0];
    auto file_extension = File_Extension_Getter::Get_For_Interface(artifact_type);
    Write_To_File(full_path_of_test + "example." + file_extension,test.contents.source_contents);
    Write_To_File(full_path_of_test + "BUILD",test.contents.build_contents);
    if (!test.contents.test_contents.empty()){
        Write_To_File(full_path_of_test + "main.cpp",test.contents.test_contents);
    }
    
❱


◀private: static▶ std::string ☀Decide_Full_Path_To_Test(Bazel_Conversion_Test const& test)❰
    auto sub_path = enum_vec_into_file_path(test.transcompilation_chain);
    auto sub_path2 = string_vec_into_file_path(test.feature_categorization);
    auto full_path_of_test = Unilang_Bazel_Test_Directory() + sub_path + "/" + sub_path2 + "/";
    return full_path_of_test;
❱

//other utility stuff
◀private: static▶ std::string ☀string_vec_into_file_path(std::vector<std::string> const& strs)❰
    return Get_As_String_With_Delim_In_Between_Each_Element(strs,"/");
❱

◀private: static▶ std::string ☀enum_vec_into_file_path(std::vector<Artifact_Type> const& artifacts)❰
    std::vector<std::string> strs;
    for (auto const& it: artifacts){
        strs.emplace_back(As_All_Lowercase_Letters_With_Spaces_As_Underscores(as_string(it)));
    }
    
    return Get_As_String_With_Delim_In_Between_Each_Element(strs,"_to_");
❱



◀private: static▶ void ☀Make_Sure_Path_Exists_And_Is_Empty(std::string const& path)❰
    Create_Path_If_It_Doesnt_Already_Exist(path);
    Empty_Out_Folder_But_Keep_Folder(path);
❱

//path stuff
◀private: static▶ std::string ☀Unilang_Bazel_Test_Directory()❰
    return Bazel_Workspace_Directory() + "/code/examples/transcompilation/";
❱
◀private: static▶ void ☀Move_To_Unilang_Bazel_Test_Directory() ❰
    auto build_from = Unilang_Bazel_Test_Directory();
    Set_Path(build_from);
❱