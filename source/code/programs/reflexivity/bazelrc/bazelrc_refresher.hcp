class
❪string❫
❪vector❫
❪"code/programs/reflexivity/docker/data/apt_get_command"❫
❪"code/programs/reflexivity/docker/data/docker_settings"❫
⚯
❪"code/utilities/filesystem/paths/lib"❫
❪"code/utilities/filesystem/files/creating/lib"❫
❪"code/utilities/types/strings/transformers/appending/lib"❫
❪"code/utilities/types/vectors/converters/lib"❫
❪"code/utilities/filesystem/files/deleting/lib"❫
❪"code/utilities/types/strings/transformers/casing/lib"❫
❪"code/utilities/linguistics/computer/file_extension/file_extension_getter"❫
❪"code/programs/reflexivity/docker/data/docker_settings_getter"❫
❪"code/programs/reflexivity/comment/generated_comment_getter"❫
⚞⚟

◀public: static▶ void ☀Refresh()❰

    //main file
    Write_To_File(Get_Bazelrc_File_Path(),Create_Bazelrc_Contents());
    
    //sub-files
    Write_To_File(Get_General_Bazelrc_File_Path(),Create_General_Bazelrc_Contents());
    Write_To_File(Get_Sanitizer_Bazelrc_File_Path(),Create_Sanitizer_Bazelrc_Contents());
    Write_To_File(Get_Remote_Bazelrc_File_Path(),Create_Remote_Bazelrc_Contents());

❱ 

◀private: static▶ std::string ☀Create_Bazelrc_Contents()❰
    std::string str;
    Append_With_Newline(str,Generated_Comment_Getter::Get());
    Append_With_Newline(str,"import %workspace%/bazel/config/bazelrc.general");
    Append_With_Newline(str,"import %workspace%/bazel/config/bazelrc.sanitizers");
    Append_With_Newline(str,"import %workspace%/bazel/config/bazelrc.remote");
    
    return str;
❱


◀private: static▶ std::string ☀Create_General_Bazelrc_Contents()❰
    std::string str;
    Append_With_Newline(str,Generated_Comment_Getter::Get());
    
    //backwards compatibility junk (Try to remove these)
    Append_With_Newline(str,"build --incompatible_disable_crosstool_file=false");
    Append_With_Newline(str,"build --incompatible_use_python_toolchains=false");
    Append_With_Newline(str,"build --incompatible_use_specific_tool_files=false");
    
    //Sometimes we want to keep going (depends on state of the repo)
    //Append_With_Newline(str,"build --keep_going");
    
    //trying to fix java jni issue
    //Append_With_Newline(str,"build --javabase=@embedded_jdk//:jdk");
    //Append_With_Newline(str,"build --javabase=@bazel_tools//tools/jdk:remote_jdk");
    
    
    //hermetic toolchain
    //we don't need to pass crosstool_top anymore and it will one day be deprecated
    //Append_With_Newline(str,"build --crosstool_top=@llvm_toolchain//:toolchain");
    
    //instead we allow cc_toolchain resolution to choose the correct toolchain that was registered through bazel rules
    //one day this flag will be the default and we can remove it here as well
    //TODO(thickey): remove flag
    Append_With_Newline(str,"build --incompatible_enable_cc_toolchain_resolution");
    Append_With_Newline(str,"build --incompatible_restrict_string_escapes=false");
    
    
    //faster to build here?
    //codeship does not have this.
    //https://app.codeship.com/projects/340017/builds/44589606?pipeline=53b461c2-ec88-4fb5-9c37-c59f7a29c29f
    //Append_With_Newline(str,"build --experimental_sandbox_base=/run/shm");
    
    //I don't want the symlinks showing up in the repository.
    //Its bad for IDEs, and prevents code from accidentally relying on their existence
    //Append_With_Newline(str,"build --experimental_convenience_symlinks=ignore");
    
    
    //BES Stuff
    // build --bes_results_url=http://localhost:8080/invocation/
    // build --bes_backend=grpc://localhost:1985
    // build --remote_cache=grpc://localhost:1985
    
    //allow unilang to write to places outside of the main repo
    Append_With_Newline(str,"build:unilang --sandbox_writable_path=" + Full_Path_To_Desktop() + "repos");
    
    return str;
❱

◀private: static▶ std::string ☀Create_Sanitizer_Bazelrc_Contents()❰
    std::string str;
    Append_With_Newline(str,Generated_Comment_Getter::Get());
    
    //make fuzzing possible
    Append_With_Newline(str,"# Define the --config=asan-libfuzzer configuration.");
    Append_With_Newline(str,"build:asan-libfuzzer --@rules_fuzzing//fuzzing:cc_engine=@rules_fuzzing//fuzzing/engines:libfuzzer");
    Append_With_Newline(str,"build:asan-libfuzzer --@rules_fuzzing//fuzzing:cc_engine_instrumentation=libfuzzer");
    Append_With_Newline(str,"build:asan-libfuzzer --@rules_fuzzing//fuzzing:cc_engine_sanitizer=asan");
    
    //enable other sanitizers
    Append_With_Newline(str,"build:asan --copt=-fsanitize=address --linkopt=-fsanitize=address");
    
    
// build:ubsan --copt=-fsanitize=undefined --copt=-fno-sanitize-recover=all --linkopt=-fsanitize=undefined
// build:msan --copt=-fsanitize=memory --copt=-fsanitize-memory-track-origins --copt=-fno-sanitize-recover=all --linkopt=-fsanitize=memory

    
    return str;
❱

◀private: static▶ std::string ☀Create_Remote_Bazelrc_Contents()❰
    std::string str;
    Append_With_Newline(str,Generated_Comment_Getter::Get());
    
    return str;
❱


◀private: static▶ std::string ☀Get_Bazelrc_File_Path()❰
    std::string f = Bazel_Derived_Root_Of_Repo();
    f += "source/.bazelrc";
    return f;
❱
◀private: static▶ std::string ☀Get_General_Bazelrc_File_Path()❰
    std::string f = Bazel_Derived_Root_Of_Repo();
    f += "source/bazel/config/bazelrc.general";
    return f;
❱
◀private: static▶ std::string ☀Get_Sanitizer_Bazelrc_File_Path()❰
    std::string f = Bazel_Derived_Root_Of_Repo();
    f += "source/bazel/config/bazelrc.sanitizers";
    return f;
❱
◀private: static▶ std::string ☀Get_Remote_Bazelrc_File_Path()❰
    std::string f = Bazel_Derived_Root_Of_Repo();
    f += "source/bazel/config/bazelrc.remote";
    return f;
❱