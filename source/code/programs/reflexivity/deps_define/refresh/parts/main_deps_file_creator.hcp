class
❪string❫
❪vector❫
❪algorithm❫
❪"code/programs/reflexivity/deps_define/data/dependency_specifications_getter"❫
❪"code/utilities/filesystem/paths/lib"❫
⚯
❪"code/utilities/filesystem/files/creating/lib"❫
❪"code/programs/reflexivity/comment/generated_comment_getter"❫
❪"code/utilities/types/strings/transformers/appending/lib"❫
❪"code/utilities/types/strings/transformers/casing/case_modifier"❫
❪"code/utilities/types/strings/transformers/search_replace/lib"❫
❪"code/utilities/types/strings/transformers/removing/lib"❫
⚞⚟


◀public: static▶ void ☀Create(Dependency_Specifications all_specs)❰

    //sort them
    std::sort(all_specs.specs.begin(),all_specs.specs.end(),[&](Dependency_Specification const& a, Dependency_Specification const& b){
        return a.lib_name < b.lib_name;
    });

    //move to where the file goes
    Temporarily_Move_To_Path_To_Call_Function(Bazel_Deps_Directory(),[&](){
    
        //create its content
        auto source_data = Create_Main_Third_Party_Sourcing_File(all_specs);
        
        //write it out to a file
        Write_To_File_With_Auto_Gen_Comment("third_party_libraries.bzl",Source_Language::PYTHON,source_data);
    
    });
❱

◀private: static▶ std::string ☀Create_Main_Third_Party_Sourcing_File(Dependency_Specifications const& all_specs)❰
    std::string result;
    
    //add load statements
    Add_Load_Statement(result,all_specs);
    
    //add func to call all loads
    Add_Function_To_Call_All_Loaded_Funcs(result,all_specs);
    
    return result;
❱

◀private: static▶ void ☀Add_Load_Statement(std::string & result, Dependency_Specifications const& all_specs)❰

    //add load statements
    for (auto it: all_specs.specs){
        auto folder_name = As_Removed_Dashes(it.lib_name);
        Append(result,"load(\"//bazel/deps/");
        Append(result,folder_name);
        Append(result,":get.bzl");
        Append(result,"\"");
        Append(result,", \"");
        Append(result,Fix_Casing_For_Bazel(it.lib_name));
        Append(result,"\")\n");
    }
❱

◀private: static▶ void ☀Add_Function_To_Call_All_Loaded_Funcs(std::string & result, Dependency_Specifications const& all_specs)❰
    Append_With_Newline(result,"def third_party_libraries():");
    for (auto const& it: all_specs.specs){
        Append(result,"    ");
        Append(result,Fix_Casing_For_Bazel(it.lib_name));
        Append_With_Newline(result,"()");
    }
❱



◀private: static▶ std::string ☀Fix_Casing_For_Bazel(std::string const& str)❰
    //return str;
    auto without_dashes = string_replace_all(str,"-","_");
    return Case_Modifier::As_Modified_Casing(Case_Format_Style::LOWER_CAMEL_CASE,without_dashes);
❱