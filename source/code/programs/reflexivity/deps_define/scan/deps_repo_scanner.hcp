class
❪string❫
❪"code/utilities/filesystem/paths/lib"❫
❪"code/utilities/filesystem/files/creating/lib"❫
❪"code/utilities/types/strings/transformers/appending/lib"❫
❪"code/programs/reflexivity/settings/reflexive_refresh_settings"❫
❪"code/programs/reflexivity/deps_define/scan/repo_scanned_info"❫
⚯
❪"code/programs/reflexivity/docker/dockerfile_refresher"❫
❪"code/programs/reflexivity/bazelrc/bazelrc_refresher"❫
❪"code/programs/reflexivity/bazel_wrapper/bazel_wrapper_refresher"❫
❪"code/programs/reflexivity/deps_define/refresh/deps_definition_refresher"❫
❪"code/programs/reflexivity/settings/reflexive_refresh_settings_getter"❫
❪"code/utilities/program/common_actions/locale/lib"❫
❪"code/utilities/program/name/program_name_getter"❫
❪"code/utilities/output/publisher/essay/essay_publisher"❫
❪"code/utilities/code/artifacts/concept_tree/concept_tree_to_image"❫
❪"code/programs/reflexivity/deps_define/data/dependency_specifications_getter"❫
❪"code/utilities/github/repo_getter"❫
❪"code/utilities/program/wrappers/git/repo_establisher/repo_establisher"❫
❪"code/utilities/program/wrappers/git/lib"❫
❪"code/utilities/filesystem/files/temp/existing_temp_file"❫
⚞⚟

◀public: static▶ void ☀Scan()❰
    auto all_specs = Dependency_Specifications_Getter::Get_All_Dependency_Specifications();
    
    //scan all the repos and get results
    std::vector<Repo_Scanned_Info> scan_results;
    for (auto const& spec: all_specs.specs){
        if (!spec.locations.empty()){
            scan_results.emplace_back(Scan_Repo(spec));
        }
    }
    
    //use the scan results to make a table
    
    //to sync them with upstream master
    
    //to try and auto-upgrade
❱

◀private: static▶ Repo_Scanned_Info ☀Scan_Repo(Dependency_Specification const& spec)❰
    Repo_Scanned_Info results;
    results.main_spec = spec;
    
    //get meta information about repo
    auto owner_name = spec.locations[0].owner_name;
    auto repo_name = spec.locations[0].repo_name;
    results.main_meta = Repo_Getter::Get(owner_name,repo_name);
    
    //clone the repository to get some more information
    Repo_Location repo_location;
    repo_location.use_clone=true;
    repo_location.clone_url=SSH_Clone_Url(owner_name,repo_name);
    repo_location.verbose=true;
    auto main_repo = Repo_Establisher::Establish_And_Get_Path(repo_location);
    
    Temporarily_Move_To_Path_To_Call_Function(main_repo.path,[&](){
        results.main_commit_count = Number_Of_Commits();
    });
    Existing_Temp_File del1(main_repo.path);
    
    //clone the fork (if there is one) to get more information about the fork
    if (results.main_meta["fork"] == true){
        std::string forked_repo_name = results.main_meta["source"]["full_name"];
        
        repo_location.clone_url=SSH_Clone_Url(forked_repo_name);
        auto fork_repo = Repo_Establisher::Establish_And_Get_Path(repo_location);
        Temporarily_Move_To_Path_To_Call_Function(fork_repo.path,[&](){
            results.forked_commit_count = Number_Of_Commits();
        });
        Existing_Temp_File del2(main_repo.path);
    }
    
    
    if (results.main_meta["fork"] == true){
        std::cout << repo_name << " " << results.forked_commit_count-results.main_commit_count << std::endl;
    }
    
    return results;
❱

◀private: static▶ std::string ☀SSH_Clone_Url(std::string const& owner, std::string const& repo)❰
    std::string url = "git@github.com:" + owner + "/" + repo + ".git";
    return url;
❱
◀private: static▶ std::string ☀SSH_Clone_Url(std::string const& owner_slash_repo)❰
    std::string url = "git@github.com:" + owner_slash_repo + ".git";
    return url;
❱