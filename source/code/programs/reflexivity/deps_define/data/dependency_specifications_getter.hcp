class
❪string❫
❪vector❫
❪iostream❫
❪"code/programs/reflexivity/deps_define/data/dependency_specifications"❫
❪"code/programs/reflexivity/deps_define/data/common_patch_cmds_getter"❫
⚯
⚞⚟


◀public: static▶ Dependency_Specifications ☀Get_All_Dependency_Specifications()❰
    Dependency_Specifications x;
    
// # TODO(thickey): we can't trust that these git repos will always exist.  
// # make copies and store them somewhere else.  Give multiple mirrors
// # for the urls.  the first url can be where we host it.
// # Also, github is a single source of failure here.  
// # Its probably okay to clone on github and use that as a mirror,
// # but we may also want additional hosting elsewhere (ex: buildfactory)
// # we may want to set up our own servers in case of another world war and we lose github

// # TODO(thickey): as a rule of thumb, we do not want patch files.  
// # when a patch file is created, we need to work with the original author to merge it back.
// # In the worst case scenarios where an agreement cannot be made with the author, or
// # the original author is unresponsive, we can fork the project.
    
//libraries to add:
//https://github.com/facebook/folly
//https://github.com/preshing/junction
//https://github.com/twitter/vireo
//https://github.com/rbock/sqlpp11
//https://github.com/godotengine/godot
//https://github.com/p-ranav/tabulate
// #gmp (this was hard)
// #add-range-v3 library (eh, this is going in std right?)
// #add klmr-cpp11-range
//https://github.com/jupp0r/prometheus-cpp
    
// #need to make hermetic for imgui
// #sudo apt-get install libsdl2-dev
// #sudo apt-get install libsdl1.2-dev
// #sudo apt install libjpeg9-dev libwebp-dev libtiff5-dev libsdl2-image-dev libsdl2-image-2.0-0
//http://www.svgalib.org/jay/beginners_guide/beginners_guide.html
//http://irrlicht.sourceforge.net/?page_id=10
//http://plib.sourceforge.net/index.html
//https://github.com/ssloy/tinyrenderer/wiki
//https://github.com/ghaerr/agg-2.6

//need to make hermetic for xdo
// #sudo apt-get install xdotool
// #sudo apt-get install libxdo-dev
// #sudo apt-get install libxtst-dev
// # http_archive(
// #     name = "xdo",
// #     build_file = "//bazel/deps/build_files/xdo:xdo.BUILD",
// #     commit = "08c8e2d6cad60a69ce415499e34865157a1b66fd",
// #     remote = "https://github.com/jordansissel/xdotool.git",
// # )


//https://github.com/mull-project/mull

//https://github.com/gitsbi/unlib
//https://github.com/Unilang/SDL_ttf
//https://github.com/Unilang/sdl2-widgets
//https://github.com/yue/yue

//other libraries to install:
//https://github.com/raizam/gamedev_libraries
//https://github.com/sho3la/ShaderPlusPlus
    
//Qt:
//https://github.com/justbuchanan/bazel_rules_qt
//https://github.com/bbreslauer/qt-bazel-example
//https://github.com/wxWidgets/wxWidgets
    //https://github.com/liballeg/allegro5
    //https://github.com/cinder/Cinder


//https://github.com/mmikk/MikkTSpace
//https://github.com/assimp/assimp
    
//crypt
//https://github.com/Unilang/libxcrypt
    

//serialization:
//https://github.com/apache/avro
    
//GUI:
//https://github.com/zenotech/fox-toolkit

    
    //Build Systems
    x.specs.emplace_back(Bazel());
    x.specs.emplace_back(Bazel_Skylib());
    x.specs.emplace_back(BazelBuildTools());
    x.specs.emplace_back(Buildfarm());
    x.specs.emplace_back(Remote_APIs());
    
    //Google protobuf stuff
    x.specs.emplace_back(Protobuf());
    x.specs.emplace_back(Protobuf_Rules());
    x.specs.emplace_back(Google_Apis());
    x.specs.emplace_back(Google_Apis_Common_Protos());
    
    //Toolchains
    x.specs.emplace_back(Co_Vsco_Bazel_Toolchains());
    x.specs.emplace_back(Grail_Bazel_Toolchain());
    x.specs.emplace_back(Io_Bazel_Rules_M4());
    
    
    //Rules
    x.specs.emplace_back(Io_Bazel_Rules_Go());
    x.specs.emplace_back(Bazel_Gazelle());
    x.specs.emplace_back(Io_Bazel_Rules_Docker());
    x.specs.emplace_back(Rules_Swift());
    x.specs.emplace_back(Rules_Rust());
    x.specs.emplace_back(Rules_Fuzzing());
    x.specs.emplace_back(Rules_Python());
    //x.specs.emplace_back(Rules_Pkg());
    x.specs.emplace_back(Apple_Rules_Lint());


    
    //Sysroots
    x.specs.emplace_back(debian_stretch_amd64_sysroot());
    x.specs.emplace_back(ubuntu_14_04_clang_10_sysroot());
    x.specs.emplace_back(ubuntu_20_04_clang_11_sysroot());
    
    //bundling things from user's system root
    x.specs.emplace_back(system_files());
    
    //shared objects to link with
    x.specs.emplace_back(GL());
    
    
    
    //C++
    x.specs.emplace_back(Boost());
    x.specs.emplace_back(Abseil());
    x.specs.emplace_back(NameOf());
    x.specs.emplace_back(Stb());
    x.specs.emplace_back(PrettyPrint());
    x.specs.emplace_back(pstreams());
    x.specs.emplace_back(fast_io());
    x.specs.emplace_back(hedley());
    x.specs.emplace_back(tuple());
    x.specs.emplace_back(include_what_you_use());
    x.specs.emplace_back(indicators());
    
    //Spelling / Grammar
    x.specs.emplace_back(nuspell());
    //https://github.com/hunspell/hunspell
    
    //backtrace / stacktrace
    x.specs.emplace_back(Backward_Cpp());
    x.specs.emplace_back(DeathHandler());
    x.specs.emplace_back(Poppy());
    //https://github.com/ianlancetaylor/libbacktrace
    //https://github.com/certik/stacktrace
    //https://github.com/google/breakpad
    
    //https://github.com/threatstack/elfutils
    //https://github.com/abseil/abseil-cpp/blob/master/absl/debugging/stacktrace.h
    
    //Emscripten
    x.specs.emplace_back(Emscripten());
    x.specs.emplace_back(Emscripten_Clang());
    
    //Testing
    x.specs.emplace_back(Gtest());
    x.specs.emplace_back(Lcov());
    x.specs.emplace_back(Catch2());
    
    //Benchmarking
    x.specs.emplace_back(Google_Benchmark());
    x.specs.emplace_back(Gperf());
    x.specs.emplace_back(Cpuinfo());
    x.specs.emplace_back(Asmjit());
    x.specs.emplace_back(Nasm());
    
    //Timing
    x.specs.emplace_back(Stopwatch());
    x.specs.emplace_back(TimerCpp());
    x.specs.emplace_back(Asap());
    
    //Logging
    x.specs.emplace_back(Spdlog());
    x.specs.emplace_back(glog());
    
    
    //Serialization / Parsers / Reflection
    x.specs.emplace_back(RapidJson());
    x.specs.emplace_back(NlohmannJson());
    x.specs.emplace_back(YamlCpp());
    x.specs.emplace_back(Captnproto());
    x.specs.emplace_back(Apache_Thrift());
    x.specs.emplace_back(Cereal());
    x.specs.emplace_back(Expat());
    x.specs.emplace_back(Flatbuffers());
    x.specs.emplace_back(Snappy());
    x.specs.emplace_back(Csv());
    x.specs.emplace_back(SqliteOrm());
    x.specs.emplace_back(Pegtl());
    x.specs.emplace_back(tomlplusplus());
    x.specs.emplace_back(visit_struct());
    x.specs.emplace_back(msgpack_c());
    x.specs.emplace_back(pugixml());
    
    
    //encryption
    x.specs.emplace_back(Monocypher());
    x.specs.emplace_back(secp256k1());
    x.specs.emplace_back(libbase58());
    
    
    //Debugging
    x.specs.emplace_back(painless());
    x.specs.emplace_back(dbg_macro());
    
    //Data Structures
    x.specs.emplace_back(Andres_Graph());
    x.specs.emplace_back(Cpp_Graph_Library());
    x.specs.emplace_back(Date());
    x.specs.emplace_back(MpmcQueue());
    x.specs.emplace_back(SpscQueue());
    x.specs.emplace_back(ConcurrentQueue());
    x.specs.emplace_back(BrainTree());
    x.specs.emplace_back(Forest());
    x.specs.emplace_back(Tree());
    x.specs.emplace_back(Color());
    x.specs.emplace_back(TinyColorMap());
    x.specs.emplace_back(IntervalTree());
    x.specs.emplace_back(Frozen());
    x.specs.emplace_back(stxxl());
    x.specs.emplace_back(bitset2());
    
    //https://github.com/goldsborough/lru-cache
    //https://github.com/minkezhang/cachepp
    //https://github.com/akashihi/stlcache
    //https://github.com/vpetrigo/caches
    //https://github.com/cachelot/cachelot
    
    
    //Math
    x.specs.emplace_back(Gmp());
    x.specs.emplace_back(BigIntegerCPP());
    x.specs.emplace_back(BigNumber());
    x.specs.emplace_back(LittleBigInt());
    x.specs.emplace_back(Fxdiv());
    x.specs.emplace_back(Fp16());
    x.specs.emplace_back(Glm());
    x.specs.emplace_back(saturating());
    x.specs.emplace_back(arithmetic_type_tools());
    x.specs.emplace_back(clamp_cast());
    x.specs.emplace_back(bsa());
    x.specs.emplace_back(matplotplusplus());
    
    //Metrics
    x.specs.emplace_back(statsd_cpp());
    
    
    //Games
    x.specs.emplace_back(Entt());
    x.specs.emplace_back(Corange());
    x.specs.emplace_back(raylib());
    x.specs.emplace_back(halley());
    x.specs.emplace_back(blah());
    x.specs.emplace_back(xscreensaver());
    x.specs.emplace_back(ncine());
    
    
    
    
    //Graphics
    x.specs.emplace_back(XkbCommon());
    x.specs.emplace_back(xcb());
    x.specs.emplace_back(xcb_util());
    x.specs.emplace_back(xcb_util_wm());
    
    
    x.specs.emplace_back(X11());
    x.specs.emplace_back(Xtrans());
    x.specs.emplace_back(Xau());
    x.specs.emplace_back(Xaw());
    x.specs.emplace_back(Xmu());
    x.specs.emplace_back(Xorg_libSM());
    x.specs.emplace_back(Xorg_libICE());
    x.specs.emplace_back(libXpm());
    x.specs.emplace_back(xorg_libXt());
    x.specs.emplace_back(xorg_libXext());
    x.specs.emplace_back(xorg_libXi());
    x.specs.emplace_back(xorg_libXfixes());
    x.specs.emplace_back(xorg_libXdamage());
    x.specs.emplace_back(xorg_libXcursor());
    x.specs.emplace_back(xorg_libXinerama());
    x.specs.emplace_back(xorg_libXtst());
    
    
    x.specs.emplace_back(xorg_libXrandr());
    x.specs.emplace_back(xorg_libXrender());
    x.specs.emplace_back(xorg_glproto());
    x.specs.emplace_back(xorg_libxshmfence());
    x.specs.emplace_back(libXxf86vm());
    x.specs.emplace_back(xorg_xorgproto());
    x.specs.emplace_back(mesa());
    x.specs.emplace_back(mesa_glu());
    x.specs.emplace_back(glut());
    x.specs.emplace_back(FreeGLUT());
    x.specs.emplace_back(gl3w());
    x.specs.emplace_back(glew());
    x.specs.emplace_back(Sdl2());
    x.specs.emplace_back(sdl2_bazel_registry());
    x.specs.emplace_back(SDL_image());
    x.specs.emplace_back(SDL_mixer());
    x.specs.emplace_back(Sfml());
    x.specs.emplace_back(Swoosh()); //sfml utility
    x.specs.emplace_back(Kairos()); //sfml utility
    x.specs.emplace_back(Glfw());
    x.specs.emplace_back(Imgui());
    x.specs.emplace_back(Cairo());
    x.specs.emplace_back(Plutovg());
    x.specs.emplace_back(Lib_Png());
    x.specs.emplace_back(Lib_Jpeg());
    x.specs.emplace_back(libtiff());
    x.specs.emplace_back(GD());
    x.specs.emplace_back(Open_CV());
    x.specs.emplace_back(Open_CV_Test_Data());
    x.specs.emplace_back(Pixman());
    x.specs.emplace_back(Ncurses());
    x.specs.emplace_back(imtui());
    x.specs.emplace_back(olcPixelGameEngine());
    x.specs.emplace_back(asciiArt());
    x.specs.emplace_back(magnum());
    x.specs.emplace_back(dbus());
    x.specs.emplace_back(libglvnd());
    x.specs.emplace_back(glproto());
    
    x.specs.emplace_back(QR_Code_generator());
    
    
    
    //3d models
    x.specs.emplace_back(tinyobjloader());
    
    
    //Font
    x.specs.emplace_back(Freetype2());
    x.specs.emplace_back(Font_Config());
    
    //Database
    x.specs.emplace_back(Sqlite3());
    x.specs.emplace_back(Soci());
    x.specs.emplace_back(Hiberlite());
    
    //Profiling
    x.specs.emplace_back(uftrace());
    
    //Web Servers
    x.specs.emplace_back(Crow());
    x.specs.emplace_back(Cpp_Httplib());
    
    //Web Query
    x.specs.emplace_back(Cpr());
    x.specs.emplace_back(Zlib());
    x.specs.emplace_back(Open_SSL());
    x.specs.emplace_back(Curl());
    x.specs.emplace_back(Chrome_Drivers());
    x.specs.emplace_back(CxxUrl());
    
    //Standalone Tools
    x.specs.emplace_back(Cloc());
    
    //networking
    //https://github.com/librg/librg
    
    //CLI
    x.specs.emplace_back(Cli11());
    //https://github.com/muellan/clipp
    
    //Language Interop
    x.specs.emplace_back(Pybind11());
    
    //Threading / Workflow
    x.specs.emplace_back(Cpp_Taskflow());
    x.specs.emplace_back(Tbb());
    x.specs.emplace_back(Pthreadpool());
    x.specs.emplace_back(ThreadPool());
    
    //Security
    x.specs.emplace_back(Obfuscate());
    x.specs.emplace_back(HashLib4Cpp());
    
    //Compression
    x.specs.emplace_back(PicoSha2());
    x.specs.emplace_back(Miniz_Cpp());
    
    //Device Inputs
    x.specs.emplace_back(Getch());
    x.specs.emplace_back(Xorg_Xinput());
    
    //Natural Language
    x.specs.emplace_back(Stmr());
    x.specs.emplace_back(GloVe());
    x.specs.emplace_back(word2vec());
    
    //Audio / Sound
    x.specs.emplace_back(sndio());
    x.specs.emplace_back(Openal_Soft());
    x.specs.emplace_back(openal());
    x.specs.emplace_back(Soloud());
    x.specs.emplace_back(AudioFile());
    x.specs.emplace_back(Wave());
    x.specs.emplace_back(flac());
    x.specs.emplace_back(ogg());
    x.specs.emplace_back(vorbis());
    
    //Documentation
    x.specs.emplace_back(plantuml());
    
    //GUID / UUID / Random
    x.specs.emplace_back(CrossGuid());
    x.specs.emplace_back(stduuid());
    x.specs.emplace_back(uuid());
    
    //Other
    x.specs.emplace_back(Grpc());
    x.specs.emplace_back(Fmt());
    x.specs.emplace_back(Xdo());
    x.specs.emplace_back(xdotool());
    x.specs.emplace_back(Python3());
    x.specs.emplace_back(Tippecanoe());
    x.specs.emplace_back(Semver());
    x.specs.emplace_back(CppConsoleTable());
    x.specs.emplace_back(Tweeny());
    x.specs.emplace_back(Mustache());
    x.specs.emplace_back(LevenShtein());
    x.specs.emplace_back(Rang());
    x.specs.emplace_back(Dtl());
    x.specs.emplace_back(ibus());
    x.specs.emplace_back(libevent());
    x.specs.emplace_back(glib());
    x.specs.emplace_back(glibc());
    x.specs.emplace_back(utilsLinux());
    x.specs.emplace_back(systemd());
    x.specs.emplace_back(google_or_tools());
    x.specs.emplace_back(gflags());
    x.specs.emplace_back(osdialog());
    x.specs.emplace_back(libgpg_error());
    x.specs.emplace_back(libgcrypt());
    
    //filesystem
    x.specs.emplace_back(glob());
    
    
    //constraint / model / theorem / proof
    x.specs.emplace_back(gecode());
    
    //analyzing files
    x.specs.emplace_back(LibMagic());
    
    //analyzing system
    x.specs.emplace_back(InfoWare());
    
    
    //Programs (want to get library out of)
    x.specs.emplace_back(Fluxcapacitor());
    x.specs.emplace_back(Tardis());
    
    //Java Tools
    x.specs.emplace_back(Google_Java_Format());
    
    //Data Library
    x.specs.emplace_back(Chinese_Syllable_Sounds());
    x.specs.emplace_back(Scrabble_Words());
    
    //Web
    x.specs.emplace_back(Tabulator());
    
    //Assets
    x.specs.emplace_back(Fonts());
    x.specs.emplace_back(PuyoPuyo());
    x.specs.emplace_back(EnglishSounds());
    x.specs.emplace_back(PlayingCardAssets());
    
    //tools
    x.specs.emplace_back(gkrellm());
    
    
    
    

    return x;
❱



◀private: static▶ Dependency_Specification ☀debian_stretch_amd64_sysroot()❰
    Dependency_Specification spec;
    spec.lib_name = "debian_stretch_amd64_sysroot";
    Add_Unilang_Github_Mirror(spec,"debian_stretch_amd64_sysroot","733762a3256bdbb173e6617d451f473f810fd8bf","0f3729d5b77147f3276512afffb89ee74bb3c55fa175f8bbf2903d2ff867a11c");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀ubuntu_14_04_clang_10_sysroot()❰
    Dependency_Specification spec;
    spec.lib_name = "ubuntu_14_04_clang_10_sysroot";
    Add_Unilang_Github_Mirror(spec,"ubuntu_14_04_clang_10_sysroot","79690a1aefd7fd84e77e9bf785acb1dc82e55c4e","6204f7998b543e7190ba55c7a0fe81d59afcaf8171e9dc34975fbf18bc9e4853");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀ubuntu_20_04_clang_11_sysroot()❰
    Dependency_Specification spec;
    spec.lib_name = "ubuntu_20_04_clang_11_sysroot";
    Add_Unilang_Github_Mirror(spec,"ubuntu_20_04_clang_11_sysroot","be13d45d482ae05a0a6794fb71cb31b7e24bc90c","4d07d996b2fdd1381c3f1b940cf9d4a6bc9abb3923b7759672f8c47e2c165702");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀system_files()❰
    Dependency_Specification spec;
    spec.lib_name = "system";
    spec.system = true;
    spec.system_path = "/";
    return spec;
❱
◀private: static▶ Dependency_Specification ☀GL()❰
    Dependency_Specification spec;
    spec.lib_name = "GL";
    spec.system = true;
    spec.system_path = "/";
    return spec;
❱


◀private: static▶ Dependency_Specification ☀Google_Java_Format()❰
    Dependency_Specification spec;
    spec.lib_name = "google_java_format";
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Open_SSL()❰
    Dependency_Specification spec;
    spec.lib_name = "openssl";
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Sqlite3()❰
    Dependency_Specification spec;
    spec.lib_name = "sqlite3";
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Boost()❰
    Dependency_Specification spec;
    spec.lib_name  = "boost";
    return spec; 
❱
◀private: static▶ Dependency_Specification ☀Gmp()❰
    Dependency_Specification spec;
    spec.lib_name = "gmp";
    Add_Unilang_Github_Mirror(spec,"GMP","cc09e59afe9a23de9e7d0ef10598a395d7e8c850","341237cd00ec7b72f609d8246569ceda322992efcee853ac21c43ce8bf310de9");
    spec.patch.patch_files.emplace_back("p1");
    spec.patch.patch_args.emplace_back("-p1");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Cloc()❰
    Dependency_Specification spec;
    spec.lib_name = "cloc";
    Add_Unilang_Github_Mirror(spec,"cloc","90070481081b6decd9446d57a35176da3a6d8fbc","da1a0de6d8ce2f4e80fa7554cf605f86d97d761b4ffd647df9b01c4658107dba");
    
    spec.build_defs.raw_starlark = 
R"RAW_STRING(
package(default_visibility = ["//visibility:public"])
)RAW_STRING";
    return spec;

❱
◀private: static▶ Dependency_Specification ☀Bazel()❰
    Dependency_Specification spec;
    spec.lib_name = "bazel";
    Add_Unilang_Github_Mirror(spec,"bazel","2895cd5ce6797a22279dc7482926371ae9ea78b5","e3138b869f19c480c1bb28e553cfd7d67ecaf8d86df66ba70dc7e156b40c0aab");
    spec.patch.patch_cmds.emplace_back("find . -name 'BUILD' -type f -delete");
    spec.patch.patch_cmds.emplace_back("sed -i 's/repeated string direct_artifact_ids/repeated bytes direct_artifact_ids/' src/main/protobuf/analysis.proto");
    spec.patch.patch_cmds.emplace_back("sed -i 's/repeated string output_ids/repeated bytes output_ids/' src/main/protobuf/analysis.proto");
    spec.patch.patch_cmds.emplace_back("sed -i 's/repeated string transitive_dep_set_ids/repeated bytes transitive_dep_set_ids/' src/main/protobuf/analysis.proto");
    spec.patch.patch_cmds.emplace_back("sed -i 's/repeated string input_dep_set_ids/repeated bytes input_dep_set_ids/' src/main/protobuf/analysis.proto");
    
    spec.build_defs.raw_starlark = 
R"RAW_STRING(
package(default_visibility = ["//visibility:public"])
load("@rules_proto//proto:defs.bzl", "proto_library")
load("@com_github_grpc_grpc//bazel:cc_grpc_library.bzl", "cc_grpc_library")

proto_library(
    name = "build_proto",
    srcs = ["src/main/protobuf/build.proto"],
)

cc_proto_library(
    name = "build_proto_cpp",
    deps = [":build_proto"],
)

proto_library(
    name = "spawn_proto",
    srcs = ["src/main/protobuf/spawn.proto"],
)

cc_proto_library(
    name = "spawn_proto_cpp",
    deps = [":spawn_proto"],
)

proto_library(
    name = "workspace_log_proto",
    srcs = ["src/main/java/com/google/devtools/build/lib/bazel/debug/workspace_log.proto"],
)

cc_proto_library(
    name = "workspace_log_proto_cpp",
    deps = [":workspace_log_proto"],
)

proto_library(
    name = "analysis_proto",
    srcs = ["src/main/protobuf/analysis.proto"],
    deps = [":build_proto"],
)

cc_proto_library(
    name = "analysis_proto_cpp",
    deps = [":analysis_proto"],
)

proto_library(
    name = "build_event_stream",
    srcs = ["src/main/java/com/google/devtools/build/lib/buildeventstream/proto/build_event_stream.proto"],
    deps = [
        "@com_google_protobuf//:any_proto",
        "@com_google_protobuf//:duration_proto",
        "@com_google_protobuf//:empty_proto",
        #"@com_google_protobuf//:timestamp",
        ":command_line",
        ":invocation_policy",
    ],
)

cc_proto_library(
    name = "build_event_stream_cpp",
    deps = [":build_event_stream"],
)

proto_library(
    name = "option_filters",
    srcs = ["src/main/protobuf/option_filters.proto"],
)

cc_proto_library(
    name = "option_filters_cpp",
    deps = [":option_filters"],
)

proto_library(
    name = "command_line",
    srcs = ["src/main/protobuf/command_line.proto"],
    deps = [":option_filters"]
)

cc_proto_library(
    name = "command_line_cpp",
    deps = [":command_line"],
)

proto_library(
    name = "invocation_policy",
    srcs = ["src/main/protobuf/invocation_policy.proto"],
)

cc_proto_library(
    name = "invocation_policy_cpp",
    deps = [":invocation_policy"],
)


# proto_library(
#     name = "failure_details",
#     srcs = ["src/main/protobuf/failure_details.proto"],
#     deps = ["@com_google_protobuf//:descriptor_proto"]
# )

# cc_proto_library(
#     name = "failure_details_cpp",
#     deps = [":failure_details"],
# )

# for parsing grpc log
proto_library(
    name = "remote_execution_log",
    srcs = ["src/main/protobuf/remote_execution_log.proto"],
    deps = [
        "@com_google_protobuf//:timestamp_proto",
        "@googleapis//:google_bytestream_bytestream_proto",
        "@remote_apis//:remote_execution_proto",
        "@googleapis//:google_rpc_status_proto",
        "@googleapis//:google_longrunning_operations_proto",
    ]
)

#causes error about duplicate source:
#ERROR: file 'external/remote_apis/build/bazel/semver/semver.pb.h' is generated by these conflicting actions:
#Label: @remote_apis//:_semver_cc_proto_only, @remote_apis//:semver_proto
# cc_proto_library(
#     name = "remote_execution_log_cpp",
#     deps = [":remote_execution_log"],
# )

cc_grpc_library(
    name = "remote_execution_log_cpp",
    srcs = ["src/main/protobuf/remote_execution_log.proto"],
    proto_only = False,
    use_external = False,
    well_known_protos = True,
    deps = [
        "@remote_apis//:remote_execution_cc_proto",
        "@googleapis//:google_bytestream_bytestream_cc_proto",
        "@googleapis//:google_longrunning_operations_cc_proto",
        "@googleapis//:google_rpc_status_cc_proto",
    ],
)
)RAW_STRING";
    return spec;
❱
◀private: static▶ Dependency_Specification ☀nuspell()❰
    Dependency_Specification spec;
    spec.lib_name = "nuspell";
    Add_Unilang_Github_Mirror(spec,"nuspell","3cf62b59e2eba32b09ee3cdbd0ca4d92c6f214f0","0a477f8a64427d2828745b8b0c136b48f4d93ecff2f5ac10a6f7d62427e57684");
    spec.patch.patch_files.emplace_back("p1");
    spec.patch.patch_args.emplace_back("-p1");
    spec.build_defs.raw_starlark = 
R"RAW_STRING(
package(default_visibility = ["//visibility:public"])

hdrs = glob(
    include = [
        "src/nuspell/*.hxx",
        "src/nuspell/*.h",
    ],
    exclude = [
    ],
)

srcs = glob(
    include = [
        "src/nuspell/*.cxx",
    ],
    exclude = [
        "src/nuspell/main.cxx",
    ],
)

cc_library(
    name = "nuspell",
    hdrs = hdrs,
    srcs = srcs,
    copts = ["-Wno-everything"],
    includes = ["src/nuspell"],
    deps = ["@system//:unicode_hdrs","@system//:icuuc","@system//:icudata"],
)

)RAW_STRING";
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Bazel_Skylib()❰
    Dependency_Specification spec;
    spec.lib_name = "bazel_skylib";
    Add_Unilang_Github_Mirror(spec,"bazel-skylib","2a89db4749d1aa860ea42ab50491cdc40d9a199a","d007737f4508c8fb9e5de09c33346cb5971f6f4a629210e4619c20a785452fd7");
    spec.build_content_in_dependency=true;
    return spec;
❱
◀private: static▶ Dependency_Specification ☀BazelBuildTools()❰
    Dependency_Specification spec;
    spec.lib_name = "buildtools";
    Add_Unilang_Github_Mirror(spec,"buildtools","c98e381e8651e97d6da52122b288ec2ba6c392ec","bacae31ebfa1dbed55b9db531038d1e2c5fae9c7d056f9ff9947ae9bcfe0c6ae");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Buildfarm()❰
    Dependency_Specification spec;
    spec.lib_name = "buildfarm";
    Add_Unilang_Github_Mirror(spec,"bazel-buildfarm","355f816acf3531e9e37d860acf9ebbb89c9041c2","de2a18bbe1e6770be0cd54e93630fb1ee7bce937bff708eed16329033fbfe32b");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Remote_APIs()❰
    Dependency_Specification spec;
    spec.lib_name = "remote_apis";
    spec.patch.patch_cmds = Common_Patch_Cmds_Getter::Remove_Bazel_Stuff();
    //spec.patch.patch_cmds = Common_Patch_Cmds_Getter::Remove_Bazel_Workspace();
    Add_Unilang_Github_Mirror(spec,"remote-apis","f54876595da9f2c2d66c98c318d00b60fd64900b","b3bd7c29e8a9dccb40b13287edc7c451a9d4f36be605bbef6b58a240e99f373d");
    //spec.build_content_in_dependency=true;
    spec.workspace.priority = 11;
    spec.workspace.raw_starlark = 
R"RAW_STRING(
load("@remote_apis//:repository_rules.bzl", remote_apis_switched_rules_by_language = "switched_rules_by_language")
remote_apis_switched_rules_by_language(
    name = "bazel_remote_apis_imports",
    cc = True,
    go = False,
    java = True,
)
)RAW_STRING";
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Protobuf()❰
    Dependency_Specification spec;
    spec.lib_name = "com_google_protobuf";
    Add_Unilang_Github_Mirror(spec,"protobuf","66e3562aafce093d30473555248f22b3fdc88aad","ea97ff1804cb8508b78fc672c27f57e60087979ce7dbb3f66a1586a3dbf57cf2");
    spec.build_content_in_dependency=true;
    //spec.repo_mapping.push_back({"zlib","zlib_internal"});
    spec.workspace.priority = 8;
    spec.workspace.raw_starlark = 
R"RAW_STRING(
load("@com_google_protobuf//:protobuf_deps.bzl", "protobuf_deps")
protobuf_deps()
)RAW_STRING";
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Google_Apis()❰
    Dependency_Specification spec;
    spec.lib_name = "googleapis";
    spec.patch.patch_cmds = Common_Patch_Cmds_Getter::Remove_Bazel_Stuff();
    //spec.patch.patch_cmds = Common_Patch_Cmds_Getter::Remove_Bazel_Workspace();
    Add_Unilang_Github_Mirror(spec,"googleapis","3dbeac0d54125b123c8dfd39c774b37473c36944","1ca9e4c0de992c44c3c95cf72c3b93ec4c14b8916e42703ecce0eaf41a908557");
    //spec.build_content_in_dependency=true;
    spec.workspace.priority = 10;
    spec.workspace.raw_starlark = 
R"RAW_STRING(
load("@googleapis//:repository_rules.bzl", "switched_rules_by_language")
switched_rules_by_language(
    name = "com_google_googleapis_imports",
    cc = True,
    csharp = False,
    gapic = False,
    go = False,
    grpc = False,
    java = False,
    nodejs = False,
    php = False,
    python = False,
    ruby = False,
)
)RAW_STRING";
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Google_Apis_Common_Protos()❰
    Dependency_Specification spec;
    spec.lib_name = "googleapi_common_protos";
    Add_Unilang_Github_Mirror(spec,"api-common-protos","0fcae75a2c20a140137e3a9c48a87d15ceffabd7","3cc5d56cf02dbf2e41022d84135cff48d0720d229b13806a6fc799b2ad3693c5");
    spec.build_content_in_dependency=true;
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Protobuf_Rules()❰
    Dependency_Specification spec;
    spec.lib_name = "build_stack_rules_proto";
    //Add_Unilang_Github_Mirror(spec,"rules_proto","d86ca6bc56b1589677ec59abfa0bed784d6b7767","36f11f56f6eb48a81eb6850f4fb6c3b4680e3fc2d3ceb9240430e28d32c47009");
    Add_Unilang_Github_Mirror(spec,"rules_proto","b2913e6340bcbffb46793045ecac928dcf1b34a5","d456a22a6a8d577499440e8408fc64396486291b570963f7b157f775be11823e");

    spec.build_content_in_dependency=true;
    spec.workspace.priority = 7;
    spec.workspace.raw_starlark = 
R"RAW_STRING(
load("@build_stack_rules_proto//cpp:deps.bzl", "cpp_proto_compile")
cpp_proto_compile()
)RAW_STRING";
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Abseil()❰
    Dependency_Specification spec;
    spec.lib_name = "abseil";
    Add_Unilang_Github_Mirror(spec,"abseil-cpp","93d155bc4414f6c121bb1f19dba9fdb27c8943bc","bbe285994afb2751a49b7ed63c54e2230a774438a467a7ccaabb5d16156d211a");
    spec.build_content_in_dependency=true;
    return spec;
❱
◀private: static▶ Dependency_Specification ☀NameOf()❰
    Dependency_Specification spec;
    spec.lib_name = "nameof";
    Add_Unilang_Github_Mirror(spec,"nameof","7e974384b2f2215f183d89988df2693efeeddd51","b0fd0ce9bd04153c9efa14922feba675921ec3fa54f98ab0269a417e77c1b52f");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Stb()❰
    Dependency_Specification spec;
    spec.lib_name = "stb";
    Add_Unilang_Github_Mirror(spec,"stb","052dce117ed989848a950308bd99eef55525dfb1","978de595fcc62448dbdc8ca8def7879fbe63245dd7f57c1898270e53a0abf95b");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Backward_Cpp()❰
    Dependency_Specification spec;
    spec.lib_name = "backward_cpp";
    Add_Unilang_Github_Mirror(spec,"backward-cpp","aa3f253efc7281148e9159eda52b851339fe949e","16ea32d5337735ed3e7eacd71d90596a89bc648c557bb6007c521a2cb6b073cc");
    spec.build_defs.raw_starlark = 
R"RAW_STRING(
package(default_visibility = ["//visibility:public"],)

cc_library(
    name = "backward_cpp",
    srcs = ["backward.cpp"],
    hdrs = ["backward.hpp"],
    includes = [
    ],
)
)RAW_STRING";

    return spec;
❱
◀private: static▶ Dependency_Specification ☀DeathHandler()❰
    Dependency_Specification spec;
    spec.lib_name = "death_handler";
    Add_Unilang_Github_Mirror(spec,"DeathHandler","6b8599b81d54734e42f09c146cbde1049f1e8b69","b67c3f7a2fa6bd42588f231dc9de61a2d49b2bbab61735000ef05b2bfa272ad9");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Poppy()❰
    Dependency_Specification spec;
    spec.lib_name = "Poppy";
    Add_Unilang_Github_Mirror(spec,"Poppy","9643a498f015a7ade7693ff4b9fb976588f93dc6","905921192994f6243efc8dc15691135c0486720b49011fc35473b6ea7635e9f3");
    spec.build_defs.raw_starlark = 
R"RAW_STRING(
package(default_visibility = ["//visibility:public"],)

cc_library(
    name = "Poppy",
    srcs = [],
    hdrs = ["PoppyDebugTools.h"],
    includes = [
    ],
)
)RAW_STRING";
    return spec;
❱
◀private: static▶ Dependency_Specification ☀PrettyPrint()❰
    Dependency_Specification spec;
    spec.lib_name = "pretty_print";
    Add_Unilang_Github_Mirror(spec,"cxx-prettyprint","9ab26d228f2960f50b38ad37fe0159b7381f7533","15d9c8580a79e17f15cf80e974353cac6cf255612441ddcf75606e17a2308538");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀pstreams()❰
    Dependency_Specification spec;
    spec.lib_name = "pstreams";
    Add_Unilang_Github_Mirror(spec,"pstreams","7813172b40fce016438101c5252eec9371ba5fe2","5d518901de023ba7060c245104ede07346cb008b7bcd5c81444c2b6580ccf4f8");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀fast_io()❰
    Dependency_Specification spec;
    spec.lib_name = "fast_io";
    Add_Unilang_Github_Mirror(spec,"fast_io","a9c59fde3a378cda9c7cb021559880a843ecc880","784191db22789ad7d78dbfea42803595712f32d0d61a0fed6a09b2c18b13f12b");
    return spec;
❱

◀private: static▶ Dependency_Specification ☀hedley()❰
    Dependency_Specification spec;
    spec.lib_name = "hedley";
    Add_Unilang_Github_Mirror(spec,"hedley","d9261eeb6907b502dd06581932a6738ce4f65012","243cb4624b538cd5b95713baf9fdd2df8e2d53857b1f9dc5ce94b3d6a7201803");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀tuple()❰
    Dependency_Specification spec;
    spec.lib_name = "tuple";
    Add_Unilang_Github_Mirror(spec,"tuple","ceeceea5833260f22de3d7f44528adfe32c20639","42b2dbe0bc94085aeacf1c246bdcca6ce63ffe7388951e64eb0eaadf97e937cb");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀include_what_you_use()❰
    Dependency_Specification spec;
    spec.lib_name = "include_what_you_use";
    Add_Unilang_Github_Mirror(spec,"include-what-you-use","bff9327eb2aac72f78cbf49a2cc76843b57ae9af","d5558cd419c8d46bdc958064cb97f963d1ea793866414c025906ec15033512ed");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀indicators()❰
    Dependency_Specification spec;
    spec.lib_name = "indicators";
    Add_Unilang_Github_Mirror(spec,"indicators","b85eadb47c1d0f0edbb4da9c3b6384ec6486b24a","4f051ff20f6f2f1d926ca322d18e74650de77d77b9d02c55fd804e1cd410f40a");
    return spec;
❱

◀private: static▶ Dependency_Specification ☀Emscripten()❰
    Dependency_Specification spec;
    spec.lib_name = "emscripten";
    Add_Unilang_Github_Mirror(spec,"emscripten","913505e3bbbeacf7dae0ceb62559f10d9e6be693","d265533ae9914ec13ee2d82f0714ccfa585c02a145b6c268c22792940838b54b");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Emscripten_Clang()❰
    Dependency_Specification spec;
    spec.lib_name = "emscripten_clang";
    Add_Unilang_Github_Mirror(spec,"emscripten-fastcomp-clang","52c8673a54b402372b85ac751df38f41928765e5","9b4878c75a8ed1d8c7c2e2d3d968deb81c14a36d437b77de59e9abc76ed08c74");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Gtest()❰
    Dependency_Specification spec;
    spec.lib_name = "gtest";
    Add_Unilang_Github_Mirror(spec,"googletest","e5e2ef7cd27cc089c1d8302a11970ef870554294","3efbb860886c6018d707f1b5ee3e84d4ef63517ee85744aa2a8cb12b2feef57b");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Lcov()❰
    Dependency_Specification spec;
    spec.lib_name = "lcov";
    Add_Unilang_Github_Mirror(spec,"lcov","a5dd9529f9232b8d901a4d6eb9ae54cae179e5b3","97615b9cbb3fae1d1c655c7201b9aa61d59dd8c18eae2a4f94dcea747aa6ecf4");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Catch2()❰
    Dependency_Specification spec;
    spec.lib_name = "catch2";
    Add_Unilang_Github_Mirror(spec,"Catch2","5eb7aa4f90fd3822adf1ba7a469b061af8bb2713","4f6d81264d63982b44f3028b85db07a4a8f4ca44006bffc3f1fa5d6a56b56e93");
    spec.build_content_in_dependency=true;
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Google_Benchmark()❰
    Dependency_Specification spec;
    spec.lib_name = "google_benchmark";
    Add_Unilang_Github_Mirror(spec,"benchmark","d939634b8ce7e0741a79c1c1f22205fae54b375d","5bcaca7bcb700c84ea1282d3dfe0d2af1c9c2c8783e592744ae33605c133478a");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Gperf()❰
    Dependency_Specification spec;
    spec.lib_name = "gperf";
    Add_Unilang_Github_Mirror(spec,"gperftools","9e5b1628737c67b4587f937164572774592978c4","a5125e935b2dbfe93f8329baa56699b27e46c15e16ce666973510a454e3c7ee0");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Cpuinfo()❰
    Dependency_Specification spec;
    spec.lib_name = "cpuinfo";
    Add_Unilang_Github_Mirror(spec,"cpuinfo","d5e37adf1406cf899d7d9ec1d317c47506ccb970","3f2dc1970f397a0e59db72f9fca6ff144b216895c1d606f6c94a507c1e53a025");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Asmjit()❰
    Dependency_Specification spec;
    spec.lib_name = "asmjit";
    Add_Unilang_Github_Mirror(spec,"asmjit","3d510b3540776d4961f5eac83af3643d31cde18b","e1097de5bf57d6801dd38373b6c495b4612f74ecd9bff5db9aa4db4ab93c76a2");

    spec.build_defs.raw_starlark = 
R"RAW_STRING(
package(default_visibility = ["//visibility:public"],)

cc_library(
    name = "asmjit",
    srcs = glob([
        "src/asmjit/base/*.cpp",
        "src/asmjit/x86/*.cpp",
        "src/asmjit/core/*.cpp",
    ]),
    hdrs = glob([
        "src/asmjit/x86/*.h",
        "src/asmjit/base/*.h",
        "src/asmjit/*.h",
        "src/asmjit/core/*.h",
    ]),
    copts = [
        "-DASMJIT_STATIC",
        "-fno-tree-vectorize",
        "-fmerge-all-constants",
        "-DTH_BLAS_MKL",
    ],
    includes = [
        "asmjit/",
        "src/",
    ],
    linkopts = [
        "-lrt",
    ],
    linkstatic = True,
)
)RAW_STRING";

    return spec;
❱
◀private: static▶ Dependency_Specification ☀Nasm()❰
    Dependency_Specification spec;
    spec.lib_name = "nasm";
    Add_Unilang_Github_Mirror(spec,"nasm","e91f5cc1322eed4da0de81656276e021bf352c3d","d3e1949883f77d631e256523c0e77098cf6ffd7eda1489a99d9f09fcd7225d95");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Stopwatch()❰
    Dependency_Specification spec;
    spec.lib_name = "stopwatch";
    Add_Unilang_Github_Mirror(spec,"stopwatch","b88000611becb2060eeb9ae16cd3fd5b0ef266f9","6d7a5cfea3191be8ae42b8d03b53a6b5e8aa8ff18a5d16bd1f3300cf1ec367b3");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀TimerCpp()❰
    Dependency_Specification spec;
    spec.lib_name = "timercpp";
    Add_Unilang_Github_Mirror(spec,"timercpp","17aa02155414ad3d58b8508a08d0edf4a8bbd097","7b209e6cf38a6ced674d35c9d3e7376a6d78deb5097540db60d5843c4bde08c4");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Asap()❰
    Dependency_Specification spec;
    spec.lib_name = "asap";
    Add_Unilang_Github_Mirror(spec,"asap","0a1bb6137dd5229898a6ae39cff0809e233350b3","c6f0a4f5709d07a07bdbfc9d761b46dd6efa80d9c8ff01804bc32c177f32b37e");
    
    spec.build_defs.raw_starlark = 
R"RAW_STRING(
package(default_visibility = ["//visibility:public"])

cc_library(
    name = "asap",
    hdrs = glob(
        [
            "include/**/*.h",
            "include/**/*.cpp",
        ],
    ),
    includes = ["include"],
)
)RAW_STRING";

    return spec;
❱
◀private: static▶ Dependency_Specification ☀Spdlog()❰
    Dependency_Specification spec;
    spec.lib_name = "spdlog";
    Add_Unilang_Github_Mirror(spec,"spdlog","bdfc7d2a5a4ad9cc1cebe1feb7e6fcc703840d71","236bd43fe30ace4db2a3fa0861db3671fe07f84bfdbdd30babc8965a9a0203ac");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀glog()❰
    Dependency_Specification spec;
    spec.lib_name = "glog";
    Add_Unilang_Github_Mirror(spec,"glog","0a2e5931bd5ff22fd3bf8999eb8ce776f159cda6","bae42ec37b50e156071f5b92d2ff09aa5ece56fd8c58d2175fc1ffea85137664");
    spec.build_content_in_dependency=true;
    spec.repo_mapping.emplace_back("com_github_gflags_gflags","gflags");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀RapidJson()❰
    Dependency_Specification spec;
    spec.lib_name = "rapid_json";
    Add_Unilang_Github_Mirror(spec,"rapidjson","7484e06c589873e1ed80382d262087e4fa80fb63","fc22de09b56c68bf4e0463e33352f0d7622eb9500ba93af453b7d2d66b5d6be9");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀NlohmannJson()❰
    Dependency_Specification spec;
    spec.lib_name = "nlohmann_json";
    Add_Unilang_Github_Mirror(spec,"json","21516f2bae552a49cc1ba1c11746be3730361d8d","1f4217bb75eff1c38d4fe85494303e733c93aa5075c5fbfae9d76c54ee2b3089");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀YamlCpp()❰
    Dependency_Specification spec;
    spec.lib_name = "yaml_cpp";
    Add_Unilang_Github_Mirror(spec,"yaml-cpp","283d06f9f796e779ac94b769dbd13f3a9786c305","2c72fa8d48fec83595b93960c1f15cc5d32c668520b2aa82489d6f817a753cae");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Captnproto()❰
    Dependency_Specification spec;
    spec.lib_name = "captnproto";
    Add_Unilang_Github_Mirror(spec,"capnproto","4972582de4761910a6acbcbba16c0d23bb0f48a0","fd53ad53701e41d829dba551df546916e05aaa0613d00e28f881d26a2d5a7976");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Apache_Thrift()❰
    Dependency_Specification spec;
    spec.lib_name = "apache_thrift";
    Add_Unilang_Github_Mirror(spec,"thrift","6e5c0f6e315ea1cd8526789558bfd10d6cee2173","e05119a1b046c7af1bec092e1edf4ab5ef5546f6954a8f7aa015536a31909e7d");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Cereal()❰
    Dependency_Specification spec;
    spec.lib_name = "cereal";
    Add_Unilang_Github_Mirror(spec,"cereal","51cbda5f30e56c801c07fe3d3aba5d7fb9e6cca4","26361b539fe50eee308b564faa2742166d2922a7ab0bd4870ac55708581228c8");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Expat()❰
    Dependency_Specification spec;
    spec.lib_name = "expat";
    Add_Unilang_Github_Mirror(spec,"libexpat","5801a1b70adeb59964be51e61ac753be8ebe75e8","35133afefe3ce180cf368efb49b04642249e3b2dc50846f525ee5609939bb45f");
    spec.patch.patch_files.emplace_back("p1");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Flatbuffers()❰
    Dependency_Specification spec;
    spec.lib_name = "flat_buffers";
    Add_Unilang_Github_Mirror(spec,"flatbuffers","db972be264078bf83e112836c0b685a7020e96b8","c6a6ce90c75c76ae0d05f16864df499d8cc9c00dbfc456ae08f5ae60d61bd3e4");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Snappy()❰
    Dependency_Specification spec;
    spec.lib_name = "snappy";
    Add_Unilang_Github_Mirror(spec,"snappy","156cd8939c5fba7fa68ae08db843377ecc07b4b5","455611dcee5470001aa6ebc84ddc195f91b0579f60f4aa7673beb4cd683c02b9");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Csv()❰
    Dependency_Specification spec;
    spec.lib_name = "csv";
    Add_Unilang_Github_Mirror(spec,"csv","13e04e5b31b585855c7d7e7f3c65e47ae863569b","148640bf0cad34c5b6e6886cfea03cd79fe33d67606f18668012ecdb070fd9f0");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀SqliteOrm()❰
    Dependency_Specification spec;
    spec.lib_name = "sqlite_orm";
    Add_Unilang_Github_Mirror(spec,"sqlite_orm","de4e2bd01040090b163e1ee87f1dd6600e143270","7c2a02ec48e48078a61817627c09ef0a5540b06b5fb2990976f63b18d05c4c83");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Pegtl()❰
    Dependency_Specification spec;
    spec.lib_name = "pegtl";
    Add_Unilang_Github_Mirror(spec,"PEGTL","697aaa06564c6ea9d13f95de081a2d2d46b39160","1d0b85f514d65cfdc2e9e177dafa56bc0af01859d3f24a7224f0680b55a1953d");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Andres_Graph()❰
    Dependency_Specification spec;
    spec.lib_name = "andres_graph";
    Add_Unilang_Github_Mirror(spec,"graph","bd456cb6b2ec207e15b10c7c470f8db1e5491547","0fa9b77db99620c93c1d2da34de958aeeab3305ed06139a5be4d3cf9a2500d88");
    spec.build_defs.raw_starlark = 
R"RAW_STRING(
package(default_visibility = ["//visibility:public"],)

licenses(["notice"])  # BSD 3-Clause like

cc_library(
    name = "andres_graph",
    hdrs = glob([
        "include/andres/*.hxx",
        "include/andres/ilp/*.hxx",
        "include/andres/graph/*.hxx",
        "include/andres/graph/multicut/*.hxx",
        "include/andres/graph/multicut-lifted/*.hxx",
        "include/andres/graph/twocut/*.hxx",
        "include/andres/graph/twocut-lifted/*.hxx",
        "include/andres/graph/hdf5/*.hxx",
        "include/andres/graph/detail/*.hxx",
    ]),
    copts = ["-Wno-everything"],
    includes = ["include"],
)

[cc_test(
    name = "test-graph-" + test_name.replace("/", "-"),
    srcs = ["src/andres/graph/unit-test/" + test_name + ".cxx"],
    deps = [":andres_graph"],
) for test_name in (
    "graph",
    "digraph",
    "shortest-paths",
    "paths",
    "components",
    "max-flow",
    "graph-complete",
    "graph-grid",
    "dfs",
    "bfs",
    "cut-vertices",
    "bridges",
    "minimum-spanning-tree",
    "lifting",
    "multicut-lifted/kernighan-lin",
    "multicut-lifted/greedy-additive",
    "multicut/kernighan-lin",
    "multicut/greedy-additive",
)]
)RAW_STRING";

    return spec;
❱
◀private: static▶ Dependency_Specification ☀Cpp_Graph_Library()❰
    Dependency_Specification spec;
    spec.lib_name = "cpp_graph_library";
    Add_Unilang_Github_Mirror(spec,"Cpp-Graph-Library","e2dd887c2e38fabf1618628ab2c714aafe67c684","25e596035bbf73d19b1de758967757cb257110777e9aaff9bec28511d97ff806");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Date()❰
    Dependency_Specification spec;
    spec.lib_name = "date";
    Add_Unilang_Github_Mirror(spec,"date","dca8ddc65919be7df60c0ba3bec43160fed106c7","56cf3d129713d7e786c9591e65cb39d3f42b3545c4c7900c0ad058ccf3426da3");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀SpscQueue()❰
    Dependency_Specification spec;
    spec.lib_name = "spsc_queue";
    Add_Unilang_Github_Mirror(spec,"SPSCQueue","10c00a5c0f1bcfcd4f4e135d143f00b409254026","c3fed3c2654f45043f4394e580e8634e3f53b17088fb94bdbafdc4d265d1d2cf");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀ConcurrentQueue()❰
    Dependency_Specification spec;
    spec.lib_name = "concurrent_queue";
    Add_Unilang_Github_Mirror(spec,"concurrentqueue","7e3ad876fcca2e44e17528a51865ab2420afb238","7fd9a9e9c7756d81080fad6b0d7d344f4e871ca0d492cb5efc7be37ab405febd");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀MpmcQueue()❰
    Dependency_Specification spec;
    spec.lib_name = "mpmc_queue";
    Add_Unilang_Github_Mirror(spec,"MPMCQueue","5883e32b07e8a60c22d532d9120ea5c11348aea9","675004f332c74390c16efea98f30ebc636a2855434bdbfa24eaa703501a6ae0f");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀BrainTree()❰
    Dependency_Specification spec;
    spec.lib_name = "brain_tree";
    Add_Unilang_Github_Mirror(spec,"BrainTree","8126f735ae91df204682c56b6a314aa0d17107ff","8005614ea34ef8ede2d9345cfa36b85579a44ee8b2d420f2bdcb2f7271bce5e8");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Forest()❰
    Dependency_Specification spec;
    spec.lib_name = "forest";
    Add_Unilang_Github_Mirror(spec,"forest","0d09364e1a202d70b0115696558eb8574eca9fe7","d6bbd2ae2f9dd96e0fabb241a1f02ac13524d2e4c2862a953f669431334479c6");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Tree()❰
    Dependency_Specification spec;
    spec.lib_name = "tree";
    Add_Unilang_Github_Mirror(spec,"tree.hh","c0201bbd57e5711a0de87af31c54b68c64818131","0781e19d4279cb1ca0b088496050f10c80e9533e4da83d7aa307f99fa46a2c7f");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Color()❰
    Dependency_Specification spec;
    spec.lib_name = "color";
    Add_Unilang_Github_Mirror(spec,"color","41a786d1167b30324fa32382644039c3f6ccf4db","d13e9a7eb57c4dd479fcdbb80eb6e49bacf7afd423a9361375ced53a50b2b048");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀TinyColorMap()❰
    Dependency_Specification spec;
    spec.lib_name = "tinycolormap";
    Add_Unilang_Github_Mirror(spec,"tinycolormap","a1f736a31f8f8b71a986228a2ab0492730c1e807","3525d912824184f2519215e933757d30bc84d06b85b1ddc0b2ec262af15d41dc");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀IntervalTree()❰
    Dependency_Specification spec;
    spec.lib_name = "intervaltree";
    Add_Unilang_Github_Mirror(spec,"intervaltree","e8082c74a6f5c18de99d8b4cc4a55e2e62a1150d","32dcbabbfbd870dcfb64675b8d47fa6b718d4b87de6ebac9cbdc792d0fc182d4");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀BigIntegerCPP()❰
    Dependency_Specification spec;
    spec.lib_name = "big_integer_cpp";
    Add_Unilang_Github_Mirror(spec,"BigIntegerCPP","79e7b023bf5157c0f8d308d3791cf3b081d1e156","1c9505406accb1216947ca60299ed70726eade7c9458c7c7f94ca2aea68d288e");
    spec.build_defs.raw_starlark = 
R"RAW_STRING(
package(default_visibility = ["//visibility:public"])

# doesn't build.  needs patched
cc_library(
    name = "big_integer_cpp",
    srcs = glob(
        [
            "**/*.cpp",
        ],
        exclude = [
            "Security/Random.cpp",
            "Security/SecureRandom.cpp",
            "BigInteger Application.cpp",
        ],
    ),
    hdrs = glob(
        [
            "**/*.h",
            "**/*.hpp",
        ],
        exclude = [
            "Security/Random.h",
            "Security/SecureRandom.h",
        ],
    ),
)
)RAW_STRING";

    return spec;
❱
◀private: static▶ Dependency_Specification ☀BigNumber()❰
    Dependency_Specification spec;
    spec.lib_name = "BigNumber";
    Add_Unilang_Github_Mirror(spec,"BigNumber","4a65e2d4149a61632f9b31fff8aaddd0187681dd","a77ef3362a9ed5986cc158d45fab8e6797ba4cabeb26b92d89d4333d55a08c3f");
    spec.build_defs.raw_starlark = 
R"RAW_STRING(
package(default_visibility = ["//visibility:public"],)

cc_library(
    name = "lib",
    srcs = ["src/bignumber.cpp"],
    hdrs = ["src/bignumber.h"],
    includes = ["src"],
)
)RAW_STRING";

    return spec;
❱
◀private: static▶ Dependency_Specification ☀LittleBigInt()❰
    Dependency_Specification spec;
    spec.lib_name = "LittleBigInt";
    Add_Unilang_Github_Mirror(spec,"little-big-int","6db1f7cba88a7dccf02008118b57e780a89a2361","2010b3c97591cd2208017b994cb3a6fece6e8bdb0815d54e3690fac77f8efa95");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Fxdiv()❰
    Dependency_Specification spec;
    spec.lib_name = "fx_div";
    Add_Unilang_Github_Mirror(spec,"FXdiv","f8c5354679ec2597792bc70a9e06eff50c508b9a","7d3215bea832fe77091ec5666200b91156df6724da1e348205078346325fc45e");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Fp16()❰
    Dependency_Specification spec;
    spec.lib_name = "fp16";
    Add_Unilang_Github_Mirror(spec,"FP16","febbb1c163726b5db24bed55cc9dc42529068997","3e71681e0a67cd28552aa0bbb78ec6a6bd238216df15336dc1326280f7958de2");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Glm()❰
    Dependency_Specification spec;
    spec.lib_name = "glm";
    Add_Unilang_Github_Mirror(spec,"glm","67d647ae4645a9787c1f87efa3279e8ec5f506e3","51b79f24e75bc239dcec184f0c349b093482ddf12cbd3e255776106ac083e4ff");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀saturating()❰
    Dependency_Specification spec;
    spec.lib_name = "saturating";
    Add_Unilang_Github_Mirror(spec,"saturating","1917e3212ed7c91b2f3c0ab1c5680bea86f809b7","0ac340a93d327e5a8272e4078d04aefd0c2a47e3d1537e5ffc344bdbc6a20e1f");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀arithmetic_type_tools()❰
    Dependency_Specification spec;
    spec.lib_name = "arithmetic_type_tools";
    Add_Unilang_Github_Mirror(spec,"arithmetic_type_tools","2336d0c40671795b7d33bb27679453d2c56a5526","887fe101708ed0478e98aae9446a28dc278790d86d219f4eaf7c0a4ca7841eac");
    
    spec.build_defs.raw_starlark = 
R"RAW_STRING(
package(default_visibility = ["//visibility:public"])

cc_library(
    name = "lib",
    hdrs = ["arithmetic_type_tools.hpp"],
    include_prefix = "arithmetic_type_tools",
)
)RAW_STRING";

    return spec;
❱
◀private: static▶ Dependency_Specification ☀clamp_cast()❰
    Dependency_Specification spec;
    spec.lib_name = "clamp_cast";
    Add_Unilang_Github_Mirror(spec,"clamp_cast","fb7fe06331972a2a58358ae7897ea2dad78dd1f4","d657420395e9068f259471e45f8e216313e5b3cb18ab4b1f2fb1b961e4004d7c");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀bsa()❰
    Dependency_Specification spec;
    spec.lib_name = "bsa";
    Add_Unilang_Github_Mirror(spec,"bsa","bef7fbb68512f3c281e0369facd455c23c6fe023","6bac7332a4dc66145e74fb6e379a283dd75c690fe2fc8bc441495bdf0330a502");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀matplotplusplus()❰
    Dependency_Specification spec;
    spec.lib_name = "matplotplusplus";
    Add_Unilang_Github_Mirror(spec,"matplotplusplus","a07240f3cdc2cf869d2a9e128946e12aa79fdba0","7cfcee9ef043514cb64e535191ae646e849cc6dff901e7f930bde5f59ab39365");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀statsd_cpp()❰
    Dependency_Specification spec;
    spec.lib_name = "statsd_cpp";
    Add_Unilang_Github_Mirror(spec,"statsd-cpp","abed359419ebd9ff8d8374c46e6d209c2619d8e0","e758e633326ff96144226c8b1cee13f96ca23339caa338c652e53061bcf4457a");
    spec.patch.patch_cmds.emplace_back("mv include/version.hpp.in include/version.hpp");
    
    spec.build_defs.raw_starlark = 
R"RAW_STRING(
package(default_visibility = ["//visibility:public"])

#build headers
hdrs = glob(
    include = [
        "include/**/*.h",
        "include/**/*.hpp",
    ],
    exclude = [
    ],
)

#build sources
srcs = glob(
    include = [
        "src/**/*.cpp",
    ],
    exclude = [
    ],
)

cc_library(
    name = "hdrs",
    hdrs = hdrs,
    includes = [
        "include",
    ],
)

cc_library(
    name = "lib",
    srcs = srcs,
    copts = [
    ],
    includes = [
    ],
    deps = [
        ":hdrs",
    ],
)
    
)RAW_STRING";

    return spec;
❱

◀private: static▶ Dependency_Specification ☀Entt()❰
    Dependency_Specification spec;
    spec.lib_name = "entt";
    Add_Unilang_Github_Mirror(spec,"entt","688e6ad79fcc443d395351f15e447005b668d8dc","0d8466250334485374c38c92d1cb822932898119ffb729fd41c3e84e6e99c6e7");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Corange()❰
    Dependency_Specification spec;
    spec.lib_name = "corange";
    Add_Unilang_Github_Mirror(spec,"Corange","3c99c2e25c338b27ee831406aaed0159ec3a77a2","5a57e417b722d67b6297419e156f179aa1968186deeff306462447d66e454b7a");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀XkbCommon()❰
    Dependency_Specification spec;
    spec.lib_name = "xkbcommon";
    Add_Unilang_Github_Mirror(spec,"libxkbcommon","bdb009bb0cd925b062ec922bf031042d6209eb29","bb9b5784267331ac5bb1eed7c38d42ce85e545d7bf63168094c71fbb32093681");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀xcb()❰
    Dependency_Specification spec;
    spec.lib_name = "xcb";
    Add_Unilang_Github_Mirror(spec,"xcb-libxcb","ee9dfc9a7658e7fe75d27483bb5ed1ba4d1e2c86","0e6dceb9133b42a405d06b7336ba0f06884e3bad8af080d817243c78c4a6e409");
    spec.patch.patch_files.emplace_back("config");
    spec.patch.patch_files.emplace_back("gen");
    spec.patch.patch_args.emplace_back("-p1");
    spec.patch.patch_cmds.emplace_back("mv src/ xcb/");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀xcb_util()❰
    Dependency_Specification spec;
    spec.lib_name = "xcb_util";
    Add_Unilang_Github_Mirror(spec,"xcb-util","e3d56200f322c6e25a80381d27fe37205826a4c1","fad7112b1f325fd1da26083e0765e1c9746b9910d9f39291aeffdb14ed278078");
    spec.patch.patch_files.emplace_back("p1");
    spec.patch.patch_args.emplace_back("-p1");
    spec.patch.patch_cmds.emplace_back("mkdir xcb");
    spec.patch.patch_cmds.emplace_back("mv aux/xcb_aux.h xcb");
    spec.patch.patch_cmds.emplace_back("mv aux/xcb_aux.c xcb");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀xcb_util_wm()❰
    Dependency_Specification spec;
    spec.lib_name = "xcb_util_wm";
    Add_Unilang_Github_Mirror(spec,"xcb__util-wm","24eb17df2e1245885e72c9d4bbb0a0f69f0700f2","b30675911336660c4af2ac50d89e29ad10b859bc9934c7eb74a6dc401d74dce5");
    spec.patch.patch_files.emplace_back("p1");
    spec.patch.patch_cmds.emplace_back("mv icccm/xcb_icccm.h xcb");
    spec.patch.patch_cmds.emplace_back("mv icccm/icccm.c xcb");
    spec.patch.patch_args.emplace_back("-p1");
    return spec;
❱

◀private: static▶ Dependency_Specification ☀X11()❰
    Dependency_Specification spec;
    spec.lib_name = "x11";
    Add_Unilang_Github_Mirror(spec,"xorg-libX11","b8766a438461e20b5c6f7a6111b703d4cb71501f","b422eaeaf9c62d8a8fd344d29e21a31dc7f6b50d0005f0d25daf6006230c41ad");
    spec.patch.patch_files.emplace_back("ks_tables");
    spec.patch.patch_files.emplace_back("config");
    spec.patch.patch_args.emplace_back("-p1");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Xtrans()❰
    Dependency_Specification spec;
    spec.lib_name = "Xtrans";
    Add_Unilang_Github_Mirror(spec,"xorg-libxtrans","3b5df889f58a99980a35a7b4a18eb4e7d2abeac4","e4a2eea83173ae8f932eda4d440bdde958baddffc74c93eae420fb9f71e17916");
    
    //for some reason, this library doesn't include the headers of symbols it needs?
    //why? does the build system do something weird where they get pasted in somehow?
    //lets just add these headers to the sources.
    //spec.patch.patch_cmds.emplace_back("sed -i '1s/^/#include <Xtrans.h>\\\\n/' Xtrans.c");
    spec.patch.patch_cmds.emplace_back("sed -i '1s/^/#include <Xtransint.h>\\\\n/' Xtrans.c");
    
    //spec.patch.patch_cmds.emplace_back("sed -i '1s/^/#include <Xtrans.h>\\\\n/' transport.c");
    //spec.patch.patch_cmds.emplace_back("sed -i '1s/^/#include <Xtransint.h>\\\\n/' transport.c");
    
    spec.patch.patch_cmds.emplace_back("sed -i '1s/^/#include <Xtrans.h>\\\\n/' Xtranslcl.c");
    spec.patch.patch_cmds.emplace_back("sed -i '1s/^/#include <Xtransint.h>\\\\n/' Xtranslcl.c");
    
    //spec.patch.patch_cmds.emplace_back("sed -i '1s/^/#include <Xtrans.h>\\\\n/' Xtranssock.c");
    spec.patch.patch_cmds.emplace_back("sed -i '1s/^/#include <Xtransint.h>\\\\n/' Xtranssock.c");
    
    spec.patch.patch_cmds.emplace_back("sed -i '1s/^/#include <Xtransint.h>\\\\n/' Xtransutil.c");
    
    spec.patch.patch_cmds.emplace_back("sed -i -z 's/static int\\\\nis_numeric/int\\\\nis_numeric/g' Xtransutil.c");
    spec.patch.patch_cmds.emplace_back("sed -i -z 's/static int\\\\ntrans_mkdir/int\\\\ntrans_mkdir/g' Xtransutil.c");
    
    spec.patch.patch_cmds.emplace_back("sed -i '/stropts/d' Xtranslcl.c");
    
    //other libraries expect everything to be in the following folder after installation.
    //it seems easier to just move it there and then build it.
    spec.patch.patch_cmds.emplace_back("mkdir -p X11/Xtrans");
    spec.patch.patch_cmds.emplace_back("mv *.h X11/Xtrans/");
    spec.patch.patch_cmds.emplace_back("mv *.c X11/Xtrans/");
    
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Xau()❰
    Dependency_Specification spec;
    spec.lib_name = "Xau";
    Add_Unilang_Github_Mirror(spec,"xorg-libXau","42e152c6f2d1bd839e77c5e97f3a509d890c3237","f3f7dabba13edcc0bfa20f0feca37b6fe43a0754d49987bf2bdd3829e2756881");
    spec.patch.patch_files.emplace_back("p1");
    spec.patch.patch_args.emplace_back("-p1");
    return spec;
❱

◀private: static▶ Dependency_Specification ☀Xaw()❰
    Dependency_Specification spec;
    spec.lib_name = "Xaw";
    Add_Unilang_Github_Mirror(spec,"xorg-libXaw","197e9d055f3cd351ae73551955ff463294b965bf","c30f3e7bbe6bf949bca40e2c0421f3bdae7d43753ae9f92d303ac44cf5de5e5a");
    spec.patch.patch_cmds.emplace_back("sed -i '1s/^/#include <wchar.h>\\\\n/' src/TextAction.c");
    spec.patch.patch_files.emplace_back("p1");
    spec.patch.patch_args.emplace_back("-p1");
    return spec;
❱

◀private: static▶ Dependency_Specification ☀Xmu()❰
    Dependency_Specification spec;
    spec.lib_name = "Xmu";
    Add_Unilang_Github_Mirror(spec,"libXmu","4459e6940fe3fdf26a8d5d4c71989498bc400a62","f7967206f463472f6c86fa0816aa8f85192cfd179cfed8b0fa728799d3816c1d");
    spec.patch.patch_files.emplace_back("p1");
    spec.patch.patch_args.emplace_back("-p1");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Xorg_libSM()❰
    Dependency_Specification spec;
    spec.lib_name = "xorg_libSM";
    Add_Unilang_Github_Mirror(spec,"xorg-libSM","b347e9f8ef3ae027c049741ab5c0c8dac45c9eb2","d75853ecf1c8e46a3a3cb4441e70e5264f17cd1ced6646db81e3276d65720d74");
    spec.patch.patch_files.emplace_back("p1");
    spec.patch.patch_args.emplace_back("-p1");
    spec.patch.patch_cmds.emplace_back("mv include/X11 X11");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Xorg_libICE()❰
    Dependency_Specification spec;
    spec.lib_name = "xorg_libICE";
    Add_Unilang_Github_Mirror(spec,"xorg-libICE","ff5e59f32255913bb1cdf51441b98c9107ae165b","236a51f17ce2bba509be970e8b8ff4aef4ab3e5edcc3234cd817671d01d8e288");
    spec.patch.patch_files.emplace_back("p1");
    spec.patch.patch_args.emplace_back("-p1");
    //spec.patch.patch_cmds.emplace_back("sed -i '1s/^/#include <Xtransint.h>\\\\n/' Xtrans.c");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀libXpm()❰
    Dependency_Specification spec;
    spec.lib_name = "libXpm";
    Add_Unilang_Github_Mirror(spec,"libXpm","42ca8d956276bc00bec09e410d76daf053ae35f9","56c3d912c1125a42d85ef3829f5d7f45fc9a147786bd4f93783780e868d4a255");
    spec.patch.patch_files.emplace_back("p1");
    spec.patch.patch_args.emplace_back("-p1");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀xorg_libXt()❰
    Dependency_Specification spec;
    spec.lib_name = "xorg_libXt";
    Add_Unilang_Github_Mirror(spec,"xorg-libXt","51cbf52b7668ad46a428dabe8e79e6819e825b20","d154ab7b84da70d5df5cd7be6b2a6cd16f13524937c20c4ecfc28fcdcb253bfe");
    spec.patch.patch_files.emplace_back("p1");
    spec.patch.patch_args.emplace_back("-p1");
    spec.patch.patch_cmds.emplace_back("mv include/X11 X11");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀xorg_libXext()❰
    Dependency_Specification spec;
    spec.lib_name = "xorg_libXext";
    Add_Unilang_Github_Mirror(spec,"xorg-libXext","a07b4bb8290d0c1bba7bcecd5bb6896fbe1b169c","483a2c0ddba32f30deaf8c114264f17678781b4a0935742e7cfaa76456e4e4c1");
    spec.patch.patch_files.emplace_back("p1");
    spec.patch.patch_args.emplace_back("-p1");
    spec.patch.patch_cmds.emplace_back("mv include/X11 X11");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀xorg_libXi()❰
    Dependency_Specification spec;
    spec.lib_name = "xorg_libXi";
    Add_Unilang_Github_Mirror(spec,"xorg-libXi","e05da79a98775edb91ffe3de3b413f156bc4d6e7","110301e384be0aa08eede5568681e5aebee96949922364262d464ed57eee5f83");
    spec.patch.patch_files.emplace_back("p1");
    spec.patch.patch_args.emplace_back("-p1");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀xorg_libXfixes()❰
    Dependency_Specification spec;
    spec.lib_name = "xorg_libXfixes";
    Add_Unilang_Github_Mirror(spec,"xorg-libXfixes","174a94975af710247719310cfc53bd13e1f3b44d","ed38275d3b662b7b9be6da5db75b891f596a52bf21dcb1547324d76c37347b99");
    spec.patch.patch_files.emplace_back("p1");
    spec.patch.patch_args.emplace_back("-p1");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀xorg_libXdamage()❰
    Dependency_Specification spec;
    spec.lib_name = "xorg_libXdamage";
    Add_Unilang_Github_Mirror(spec,"xorg-libXdamage","8c8f9c1e356e9481fdf5a7bd1927dbfdac196310","5639c66abeb72dd34870ceac33666a485a1180bb752f6422e22dc7a090875c66");
    spec.patch.patch_files.emplace_back("p1");
    spec.patch.patch_args.emplace_back("-p1");
    return spec;
❱

◀private: static▶ Dependency_Specification ☀xorg_libXcursor()❰
    Dependency_Specification spec;
    spec.lib_name = "xorg_libXcursor";
    Add_Unilang_Github_Mirror(spec,"xorg-libXcursor","75b10c972d15c036a692ef4590a81a6c54d384f6","2d38e476bd958d420b05d702bf07f81e8167bc920e0ff160c1f06b411b4941fb");
    spec.patch.patch_files.emplace_back("p1");
    spec.patch.patch_args.emplace_back("-p1");
    return spec;
❱

◀private: static▶ Dependency_Specification ☀xorg_libXinerama()❰
    Dependency_Specification spec;
    spec.lib_name = "xorg_libXinerama";
    Add_Unilang_Github_Mirror(spec,"xorg-libXinerama","56777107b0c517ba58304d6a247bf65f7a27eb96","981e6d6ec2d5282ba8cc7234990ff1ee664607e835858c127bdb14ab3d0afc1d");
    spec.patch.patch_files.emplace_back("p1");
    spec.patch.patch_args.emplace_back("-p1");
    return spec;
❱

◀private: static▶ Dependency_Specification ☀xorg_libXtst()❰
    Dependency_Specification spec;
    spec.lib_name = "xorg_libXtst";
    Add_Unilang_Github_Mirror(spec,"xorg-libXtst","769598f20386845f5839fbc68dfed1f4245197be","0a6e749520f1d4c2a3b44f549f240b592ba9e625f1577ba26fa28652f1b41bf9");
    spec.patch.patch_files.emplace_back("p1");
    spec.patch.patch_args.emplace_back("-p1");
    return spec;
❱


◀private: static▶ Dependency_Specification ☀xorg_libXrandr()❰
    Dependency_Specification spec;
    spec.lib_name = "xorg_libXrandr";
    Add_Unilang_Github_Mirror(spec,"xorg-libXrandr","55dcda4518eda8ae03ef25ea29d3c994ad71eb0a","f03c4a89f1cfcdad9973e9f0371d74d1a4984484d193a376f63caa3953a4570c");
    spec.patch.patch_files.emplace_back("p1");
    spec.patch.patch_args.emplace_back("-p1");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀xorg_libXrender()❰
    Dependency_Specification spec;
    spec.lib_name = "xorg_libXrender";
    Add_Unilang_Github_Mirror(spec,"xorg-libXrender","bce0618839fc33f44edd8b5498b8e33d167806ff","f7ec77bdde44d3caa991100760da7ae0af6fa4555b5796bb000f57d8c9c206cc");
    spec.patch.patch_files.emplace_back("p1");
    spec.patch.patch_args.emplace_back("-p1");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀xorg_glproto()❰
    Dependency_Specification spec;
    spec.lib_name = "xorg_glproto";
    Add_Unilang_Github_Mirror(spec,"xorg-glproto","500b137bbdba1cd8ae943849fef6e79fdd4eca40","62e7d3b692a5bd4b429cbb64d9a6b41bb475599df0ab6b747fa3eb54294a2fb3");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀QR_Code_generator()❰

    Dependency_Specification spec;
    spec.lib_name = "QR_Code_generator";
    Add_Unilang_Github_Mirror(spec,"QR-Code-generator","8518684c0f33d004fa93971be2c6a8eca3167d1e","1c281781d834e703ec40750ee0e0924567d8edc469d6f43083600e0195a74044");

    spec.build_defs.raw_starlark = 
R"RAW_STRING(
package(default_visibility = ["//visibility:public"])

#build headers
hdrs = glob(
    include = [
        "cpp/**/*.h",
        "cpp/**/*.hpp",
    ],
    exclude = [
    ],
)

cc_library(
    name = "hdrs",
    hdrs = hdrs,
    includes = [
        "cpp",
    ],
)

cc_library(
    name = "lib",
    srcs = ["cpp/QrCode.cpp"],
    copts = [
    ],
    includes = [
    ],
    deps = [
        ":hdrs",
    ],
)

cc_binary(
    name = "demo",
    srcs = ["cpp/QrCodeGeneratorDemo.cpp"],
    deps = [":lib"]
)
    
)RAW_STRING";
    return spec;
❱
◀private: static▶ Dependency_Specification ☀tinyobjloader()❰
    Dependency_Specification spec;
    spec.lib_name = "tinyobjloader";
    Add_Unilang_Github_Mirror(spec,"tinyobjloader","9173980d1de273b17eba5e10eb189e8b4be89425","fe06bf462bf386ea7f6bf34f94c78099c849df348d4a6df681707fba5b5b643c");
    return spec;
❱

◀private: static▶ Dependency_Specification ☀xorg_libxshmfence()❰
    Dependency_Specification spec;
    spec.lib_name = "xorg_libxshmfence";
    Add_Unilang_Github_Mirror(spec,"xorg-libxshmfence","db7966bee2ec46b835d0bb374f35ae631a0edbd1","bd300affe41db9a9c889a6aa88dcd96147ce7fbcc1d2984248fdcbcff0b1b598");
    spec.patch.patch_files.emplace_back("p1");
    spec.patch.patch_args.emplace_back("-p1");
    
    return spec;
❱
◀private: static▶ Dependency_Specification ☀raylib()❰
    Dependency_Specification spec;
    spec.lib_name = "raylib";
    Add_Unilang_Github_Mirror(spec,"raylib","b5eb104b08ed9983b1294d203d06d0141622f92c","590420a2666bd5b14ddbdfc4daef863a87c1334a821f8fd95864eeee2d0cac99");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀halley()❰
    Dependency_Specification spec;
    spec.lib_name = "halley";
    Add_Unilang_Github_Mirror(spec,"halley","cd90859ed700b65bbab0f4473c7e2ce9ee4cd65f","f4ff28208cb144e60ac2233dfbcf495ea3c7627e9accb74804511191b31aff99");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀blah()❰
    Dependency_Specification spec;
    spec.lib_name = "blah";
    Add_Unilang_Github_Mirror(spec,"blah","3fa9f997916ab4b7e14efe5771a59c6ed5b42d85","c0e5f93b414a67006b7aec9539dd0fc7e24d4c6eee364229edf5ef88cc5d0371");
    spec.build_defs.raw_starlark = 
R"RAW_STRING(
package(default_visibility = ["//visibility:public"])

#build headers
hdrs = glob(
    include = [
        "include/**/*.h",
        "include/**/*.hpp",
        "src/**/*.hpp",
        "src/**/*.h",
    ],
    exclude = [
    ],
)

cc_library(
    name = "hdrs",
    hdrs = hdrs,
    includes = [
        "include",
    ],
)

cc_library(
    name = "blah",
    srcs = glob(["src/**/*.cpp"]),
    copts = [
        "-DOPENGL_ENABLED",
        "-DBLAH_USE_OPENGL",
        "-DSDL2_ENABLED",
        "-DBLAH_USE_SDL2",
    ],
    includes = [
    ],
    deps = [
        ":hdrs",
        "@system//:SDL2",
        "@system//:SDL2_hdrs",
    ],
)
)RAW_STRING";
    return spec;
❱
◀private: static▶ Dependency_Specification ☀xscreensaver()❰
    Dependency_Specification spec;
    spec.lib_name = "xscreensaver";
    Add_Unilang_Github_Mirror(spec,"xscreensaver","9c9ac21de7b85b6c4c767f3005b510d78b0a3e97","014c757da20b2c369c51bcaa2860e39e1844f1e3a3d784fc29685f390b762f77");
    spec.patch.patch_files.emplace_back("p1");
    spec.patch.patch_files.emplace_back("p2");
    spec.patch.patch_args.emplace_back("-p1");
    
    
    spec.patch.patch_cmds.emplace_back("sed -i '1s/^/void clear_gl_error(void);\\\\n /' hacks/glx/xlock-gl-utils.c");
    
    
    return spec;
❱


◀private: static▶ Dependency_Specification ☀ncine()❰
    Dependency_Specification spec;
    spec.lib_name = "nCine";
    Add_Unilang_Github_Mirror(spec,"nCine","43f5fe8e82e9daa21e4d1feea9ca41ed4cce7454","78964d315e2da1f42f8597c5cd21137015c326bec6bc7fdb128dc86ed3ace285");
    return spec;
❱




◀private: static▶ Dependency_Specification ☀libXxf86vm()❰
    Dependency_Specification spec;
    spec.lib_name = "libXxf86vm";
    Add_Unilang_Github_Mirror(spec,"libXxf86vm","92d18649e92566ccc3abeba244adabda249cce1b","f067f5e0383d845b1c20b71cb029f92161cf11fbf410cccb502898d68d6acdb2");
    spec.patch.patch_files.emplace_back("p1");
    spec.patch.patch_args.emplace_back("-p1");
    return spec;
❱

◀private: static▶ Dependency_Specification ☀xorg_xorgproto()❰
    Dependency_Specification spec;
    spec.lib_name = "xorg_xorgproto";
    Add_Unilang_Github_Mirror(spec,"xorg-xorgproto","f61f9a3ee1aa77ebcc67730cda9bfde88e4e9c5f","d15b1d6980ddd0a47f18473b2d1460a3cb4d20c979a7828cad02515fe3370426");
    spec.patch.patch_files.emplace_back("p1");
    spec.patch.patch_args.emplace_back("-p1");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀mesa()❰
    Dependency_Specification spec;
    spec.lib_name = "mesa";
    Add_Unilang_Github_Mirror(spec,"mesa","d1f9d1e26a2aab71d6ba6edcf195b972f12cff80","7998af53dbac10902a23bf9aadd42c458dd5df7d9a7cbc92b9bc227779f33f54");
    spec.patch.patch_files.emplace_back("p1");
    spec.patch.patch_args.emplace_back("-p1");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀mesa_glu()❰
    Dependency_Specification spec;
    spec.lib_name = "mesa_glu";
    Add_Unilang_Github_Mirror(spec,"mesa-glu","dd4e18eb7557a31a3c8318d6612801329877c745","11e1eff80197b0d192040c520522dfa6919170c202b7c00b647ee70a3ee10887");
    //spec.patch.patch_cmds.emplace_back("sed -i '1s/^/#include <stdlib.h>\\\\n/' src/libnurbs/internals/nurbsinterfac.cc");
    //spec.patch.patch_cmds.emplace_back("sed -i '1s/^/#include <stdio.h>\\\\n/' src/libnurbs/internals/nurbsinterfac.cc");
    //spec.patch.patch_cmds.emplace_back("sed -i '1s/^/#include <assert.h>\\\\n/' src/libnurbs/internals/nurbsinterfac.cc");
    
    //spec.patch.patch_cmds.emplace_back("sed -i '1s/^/#include <stdlib.h>\\\\n/' src/libnurbs/internals/varray.cc");
    //spec.patch.patch_cmds.emplace_back("sed -i '1s/^/#include <stdio.h>\\\\n/' src/libnurbs/internals/varray.cc");
    //spec.patch.patch_cmds.emplace_back("sed -i '1s/^/#include <assert.h>\\\\n/' src/libnurbs/internals/varray.cc");
    
    //spec.patch.patch_cmds.emplace_back("sed -i '1s/^/#include <stdlib.h>\\\\n/' src/libnurbs/internals/trimline.h");
    //spec.patch.patch_cmds.emplace_back("sed -i '1s/^/#include <stdio.h>\\\\n/' src/libnurbs/internals/trimline.h");
    //spec.patch.patch_cmds.emplace_back("sed -i '1s/^/#include <assert.h>\\\\n/' src/libnurbs/internals/trimline.h");
    
    //spec.patch.patch_cmds.emplace_back("sed -i '1s/^/#include <stdlib.h>\\\\n/' src/libnurbs/internals/arc.h");
    //spec.patch.patch_cmds.emplace_back("sed -i '1s/^/#include <stdio.h>\\\\n/' src/libnurbs/internals/arc.h");
    //spec.patch.patch_cmds.emplace_back("sed -i '1s/^/#include <assert.h>\\\\n/' src/libnurbs/internals/arc.h");
    
    //spec.patch.patch_cmds.emplace_back("sed -i '1s/^/#include <stdlib.h>\\\\n/' src/libnurbs/nurbtess/rectBlock.h");
    //spec.patch.patch_cmds.emplace_back("sed -i '1s/^/#include <stdio.h>\\\\n/' src/libnurbs/nurbtess/rectBlock.h");
    //spec.patch.patch_cmds.emplace_back("sed -i '1s/^/#include <assert.h>\\\\n/' src/libnurbs/nurbtess/rectBlock.h");
    
    //spec.patch.patch_cmds.emplace_back("sed -i '1s/^/#include <assert.h>\\\\n/' src/libnurbs/internals/bufpool.h");
    
    spec.patch.patch_cmds.emplace_back("sed -i 's/register/ /g' src/libnurbs/internals/varray.cc");
    
     spec.patch.patch_cmds.emplace_back("sed -i '1s/^/#include <limits.h>\\\\n/' src/libtess/priorityq-heap.c");
    
    return spec;
❱

◀private: static▶ Dependency_Specification ☀glut()❰
    Dependency_Specification spec;
    spec.lib_name = "glut";
    Add_Unilang_Github_Mirror(spec,"glut","8cd96cb440f1f2fac3a154227937be39d06efa53","e1d4e2d38aad559c329859a0dc45c8fc8ff3ec5a1001587d5ca3d7a2b57f9a38");
    return spec;
❱

◀private: static▶ Dependency_Specification ☀glew()❰
    Dependency_Specification spec;
    spec.lib_name = "glew";
    Add_Unilang_Github_Mirror(spec,"glew","9fb23c3e61cbd2d581e33ff7d8579b572b38ee26","8d4f733c0d487c4088b46e0ec35926452de2c0481fa932a8d1e389f08344dfb6");
    return spec;
❱

◀private: static▶ Dependency_Specification ☀FreeGLUT()❰
    Dependency_Specification spec;
    spec.lib_name = "FreeGLUT";
    Add_Unilang_Github_Mirror(spec,"FreeGLUT","349a23dcc1264a76deb79962d1c90462ad0c6f50","90828907ea4e30a79ce7f36c5b3e4d60039912d92ec17788fd709c955f4d0a04");
    spec.patch.patch_files.emplace_back("p1");
    spec.patch.patch_args.emplace_back("-p1");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀gl3w()❰
    Dependency_Specification spec;
    spec.lib_name = "gl3w";
    Add_Unilang_Github_Mirror(spec,"gl3w","7729692af8a2322cddb636b90393a42c130b1c85","399cab5d702a80e281c8e37fe1b3abc9d9a3517502c72053e16e75afaaa0dd35");
    spec.patch.patch_files.emplace_back("p1");
    spec.patch.patch_args.emplace_back("-p1");
    return spec;
❱


◀private: static▶ Dependency_Specification ☀Sdl2()❰
    Dependency_Specification spec;
    spec.lib_name = "sdl2";
    Add_Unilang_Github_Mirror(spec,"SDL-mirror","36ea2544f08508f42d5193e175d3a269c3b95bdf","d532a339c0d33c4a090983a32017798e9108873dce445e4b617a0f726f90d081");
    //spec.patch.patch_cmds.emplace_back("find . -type f -name '*.c' -exec sed -i 's/#include \\\"SDL.h\\\"/#include \\\"SDL.h\\\"\\n#include <stdio.h>/g' {} \\;");
    //spec.patch.patch_cmds.emplace_back("find . -type f -name '*.c' -exec sed -i 's/#include <stdio.h>/#include <stdio.h>\\n#include <stdlib.h>/g' {} \\;");
    spec.patch.patch_cmds.emplace_back("sed -i '1s/^/#include <stdlib.h>\\\\n/' src/dynapi/SDL_dynapi.c");
    spec.patch.patch_cmds.emplace_back("sed -i '1s/^/#include <stdio.h>\\\\n/' src/dynapi/SDL_dynapi.c");
    spec.patch.patch_cmds.emplace_back("sed -i 's#fn = dlsym#fn = NULL;\\\\/\\\\/#g' src/thread/pthread/SDL_systhread.c");
    spec.patch.patch_cmds.emplace_back("sed -i 's#ppthread_setname_np = #ppthread_setname_np = NULL;\\\\/\\\\/#g' src/thread/pthread/SDL_systhread.c");
    
    
    spec.patch.patch_files.emplace_back("config");
    spec.patch.patch_files.emplace_back("gen_files");
    spec.patch.patch_args.emplace_back("-p1");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀sdl2_bazel_registry()❰
    Dependency_Specification spec;
    spec.lib_name = "sdl2_bazel_registry";
    Add_Unilang_Github_Mirror(spec,"sdl2","ffccd0be0f102cc628bb71cd52cbc1fbd27dac62","2f3009e9a7c5ccd9c4dafb111252e27293c2bbb2b704e75df7ba1161d11a0696");
    spec.build_content_in_dependency=true;
    return spec;
❱
◀private: static▶ Dependency_Specification ☀SDL_image()❰
    Dependency_Specification spec;
    spec.lib_name = "SDL_image";
    Add_Unilang_Github_Mirror(spec,"SDL_image","b7c6f50dc61c7a02894caed798179ad71a4e452a","f33b3d6c41a4be188414515ee76cd8a281d5866c1a1c4fc277f74c50dd64d4a5");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀SDL_mixer()❰
    Dependency_Specification spec;
    spec.lib_name = "SDL_mixer";
    Add_Unilang_Github_Mirror(spec,"SDL_mixer","e012c219253eaba6040abef04ece88cb4daa41fa","5f67669340a4475fcad03b357b80c272ff31f05b550af528c4c58644a493c666");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Sfml()❰
    Dependency_Specification spec;
    spec.lib_name = "sfml";
    Add_Unilang_Github_Mirror(spec,"SFML","257e50beb886f1edebeebbde1903169da4eca39f","6b013624aa9a916da2d37180772031e963098494538f59a14f40e00db23c9077");
    
    
    
    //pthread local not working...
    //replace with regular void*
    //I have no idea if this will cause different issues, but it got past a segfault
    spec.patch.patch_cmds.emplace_back("sed -i 's/.*m_key(0).*/ptr(nullptr)/' src/SFML/System/Unix/ThreadLocalImpl.cpp");
    spec.patch.patch_cmds.emplace_back("sed -i 's/.*pthread_key_create.*/ptr = nullptr;/' src/SFML/System/Unix/ThreadLocalImpl.cpp");
    spec.patch.patch_cmds.emplace_back("sed -i 's/.*pthread_key_delete.*//' src/SFML/System/Unix/ThreadLocalImpl.cpp");
    spec.patch.patch_cmds.emplace_back("sed -i 's/.*pthread_setspecific.*/ptr = value;/' src/SFML/System/Unix/ThreadLocalImpl.cpp");
    spec.patch.patch_cmds.emplace_back("sed -i 's/.*pthread_getspecific.*/return ptr;/' src/SFML/System/Unix/ThreadLocalImpl.cpp");
    spec.patch.patch_cmds.emplace_back("sed -i 's/.*pthread_key_t m_key.*/void* ptr=nullptr;/' src/SFML/System/Unix/ThreadLocalImpl.hpp");
    
    
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Swoosh()❰
    Dependency_Specification spec;
    spec.lib_name = "swoosh";
    Add_Unilang_Github_Mirror(spec,"Swoosh","249785d9a0365e52cb81eb63790a7b8b15105bec","d84923d4ab6fcbe293cc1b5fe88492011e9bfea6abca93293aa8361b82e4ab41");
    return spec;
❱

◀private: static▶ Dependency_Specification ☀Kairos()❰
    Dependency_Specification spec;
    spec.lib_name = "Kairos";
    Add_Unilang_Github_Mirror(spec,"Kairos","2d5ea13c552b149ba3f00b3d6571ad6bbb44559d","f1ccd1a8cf7c5f7efe2c748b317652e36b854abd4a192da7381468db01c50a87");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Glfw()❰
    Dependency_Specification spec;
    spec.lib_name = "glfw";
    Add_Unilang_Github_Mirror(spec,"glfw","7c3aaf80651070cb2de14cac2f0366f939a1f514","e9170527b057c8c3b78c1c5955d7a5b699da4a29a7db8e7fe45c76eeec5e8a8b");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Imgui()❰
    Dependency_Specification spec;
    spec.lib_name = "imgui";
    Add_Unilang_Github_Mirror(spec,"imgui","ec945f44b5eff1d82129233be5643abbff2845da","1514c3b9037137331f57abec14c6ba238f9c6a4d2c0c1f0bab3debe5afdf3854");
    
    //Apparently its pretty easy to come up with too many vertexes in the buffer.
    //Changing this is the author's suggestion, and the code even has a comment to do this.
    //these use some imconfig.h file to overwrite, but this is fine too.
    spec.patch.patch_cmds.emplace_back("find . -type f -name '*.h' -exec sed -i 's/typedef unsigned short ImDrawIdx;/typedef unsigned int ImDrawIdx;/g' {} \\;");
    
    spec.patch.patch_cmds.emplace_back("sed -i '1s/^/#include <cfloat>\\\\n/' imgui_internal.h");
    spec.patch.patch_cmds.emplace_back("sed -i '1s/^/#include <float.h>\\\\n/' imgui_internal.h");
    
    spec.patch.patch_cmds.emplace_back("sed -i '1s/^/#include <cfloat>\\\\n/' imgui.h");
    spec.patch.patch_cmds.emplace_back("sed -i '1s/^/#include <float.h>\\\\n/' imgui.h");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Cairo()❰
    Dependency_Specification spec;
    spec.lib_name = "cairo";
    Add_Unilang_Github_Mirror(spec,"cairo","cbc241d338ca7bf927a7cfe23cb15c58491373e0","b1d1344b33f72fc239227e58d98acbe500946a520671e239ae3de89c7a72027d");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Plutovg()❰
    Dependency_Specification spec;
    spec.lib_name = "plutovg";
    Add_Unilang_Github_Mirror(spec,"plutovg","91ebcfc3cca193ac9267eaf1fdff342a6583738b","09214f273259d61f0c9cd0477d4d995eca78f7397c9a1a888397bc8605d17530");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Lib_Png()❰
    Dependency_Specification spec;
    spec.lib_name = "libpng";
    Add_Unilang_Github_Mirror(spec,"libpng","301f7a14295a3bdfaf406dbb5004d0784dc137ea","16ca00dca64c72f293a27af290a349a0d9ae2ef7336f6bd9caae612f67ffba8b");
    spec.patch.patch_files.emplace_back("p1");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Lib_Jpeg()❰
    Dependency_Specification spec;
    spec.lib_name = "libjpeg";
    Add_Unilang_Github_Mirror(spec,"libjpeg","6c0fcb8ddee365e7abc4d332662b06900612e923","daf72156ce51b85b42e3387c46b7f79e7391f84452ad6e62b5524026c25119e4");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀libtiff()❰
    Dependency_Specification spec;
    spec.lib_name = "libtiff";
    Add_Unilang_Github_Mirror(spec,"libtiff","9f657ff8a7411c95ffe83ec39e3e881c3fec6bb0","c18b37467d2ad20bd2778c25d3be76fe4d43b421ff358dbdda8a192393fcf0e3");
    spec.patch.patch_files.emplace_back("p1");
    spec.patch.patch_args.emplace_back("-p1");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀GD()❰
    Dependency_Specification spec;
    spec.lib_name = "libgd";
    Add_Unilang_Github_Mirror(spec,"libgd","e0cb1b76c305db68b251fe782faa12da5d357593","ef0bb94002d1fbc5e593c517ea353d3c039b92d20024fdf4bacb1cdc26c0dd9f");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Open_CV()❰
    Dependency_Specification spec;
    spec.lib_name = "opencv";
    Add_Unilang_Github_Mirror(spec,"opencv","8bde6aea4ba19454554aa008922d967b552e79cc","be16e2ed051c7d3f9817ace8cd602087f5bc86ff63d2745f5d69b3e506a4ea28");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Open_CV_Test_Data()❰
    Dependency_Specification spec;
    spec.lib_name = "opencv_extra";
    Add_Unilang_Github_Mirror(spec,"opencv_extra","b540994702a410614ac7bf00ecd8a790eff6d0fd","97617893f02afa2eb614ef354513f385c94767c5d1ba71eea148747f13ac838c");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Pixman()❰
    Dependency_Specification spec;
    spec.lib_name = "pixman";
    Add_Unilang_Github_Mirror(spec,"pixman","6f8b8b383f3e9c2c8b9ec22fac73e9e84d0232d3","201917adc8a5be5074f9bddc5c3f5e514949f7fea5a801d04e3fb759af6c990f");
    spec.patch.patch_files.emplace_back("p1");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Ncurses()❰
    Dependency_Specification spec;
    spec.lib_name = "ncurses";
    Add_Unilang_Github_Mirror(spec,"ncurses","9193d076200365eeb5ff932acdbbdcc5e452292c","a76cc838501ae16392bf748242fabe1108a479a9c5e8a6f905954e619c919f2a");
    spec.patch.patch_cmds.emplace_back("sed -i '1s/^/#include <wchar.h>\\\\n/' ncurses/curses.priv.h");
    spec.patch.patch_files.emplace_back("p1");
    spec.patch.patch_args.emplace_back("-p1");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀imtui()❰
    Dependency_Specification spec;
    spec.lib_name = "imtui";
    Add_Unilang_Github_Mirror(spec,"imtui","f4d4b1eb8e57770a7c329b8dc76127013fa31a11","a3c857905567255f2329593f98c86044c6ca1f8ee335f31205b0deefbd3ebf00");
    spec.patch.patch_cmds.emplace_back("find . -type f -name '*.h' -exec sed -i 's/imgui\\\\/imgui/imgui/g' {} \\;");
    spec.patch.patch_cmds.emplace_back("find . -type f -name '*.h' -exec sed -i 's/<ncurses.h>/<curses.h>/g' {} \\;");
    spec.patch.patch_cmds.emplace_back("find . -type f -name '*.cpp' -exec sed -i 's/<ncurses.h>/<curses.h>/g' {} \\;");
    spec.patch.patch_cmds.emplace_back("sed -i '/ImGui::InputFloat(\\\"Font offset\\\"/d' examples/imtui-demo.cpp");
    return spec;
❱

◀private: static▶ Dependency_Specification ☀Freetype2()❰
    Dependency_Specification spec;
    spec.lib_name = "freetype2";
    Add_Unilang_Github_Mirror(spec,"freetype2","fbbcf50367403a6316a013b51690071198962920","21773ee5ff55565cda9e9beae39eb36d966079dd1c73085320c0c73328e728a7");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Font_Config()❰
    Dependency_Specification spec;
    spec.lib_name = "fontconfig";
    Add_Unilang_Github_Mirror(spec,"fontconfig","277eca11e8f619498e6123001f22bd33d1674df2","711f7fe1c4604f2d0cd8397d18ed70dede07b86a6057009b790395a8f91f558c");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Soci()❰
    Dependency_Specification spec;
    spec.lib_name = "soci";
    Add_Unilang_Github_Mirror(spec,"soci","04e1870294918d20761736743bb6136314c42dd5","9c3b350a30795d80e95a297cd2df265b4fb8ec447ab9616a72b2650f99e983a3");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Hiberlite()❰
    Dependency_Specification spec;
    spec.lib_name = "hiberlite";
    Add_Unilang_Github_Mirror(spec,"hiberlite","ffd558a4917b33668d1001b4bba8e11b508be06a","6b290db813962e2bfc571d16d8d346916cf923cef128205ff18478e37d006586");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Cpr()❰
    Dependency_Specification spec;
    spec.lib_name = "cpr";
    Add_Unilang_Github_Mirror(spec,"cpr","3d14e61ed247a90a07db26fb107beb3086a035d6","656ee0b0d6d79280a0aa6f58c08bb2afdc0b67fd745c3c405b3453bd195e14dd");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Zlib()❰
    Dependency_Specification spec;
    
    //we had to name this _internal because it seemed to conflict with rules_proto
    spec.lib_name = "zlib";
    Add_Unilang_Github_Mirror(spec,"zlib","cacf7f1d4e3d44d871b605da3b647f07d718623f","6d4d6640ca3121620995ee255945161821218752b551a1a180f4215f7d124d45");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Curl()❰
    Dependency_Specification spec;
    spec.lib_name = "curl";
    Add_Unilang_Github_Mirror(spec,"curl","11974ac859c5d82def59e837e0db56fef7f6794e","3f6c54fb691853e9b00ed484ea2f52566c7af172ecd48cd9eeec8041a9ac679b");
    spec.patch.patch_files.emplace_back("p1");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Chrome_Drivers()❰
    Dependency_Specification spec;
    spec.lib_name = "chrome_drivers";
    Add_Unilang_Github_Mirror(spec,"chrome-drivers","8a426d5d974d155363d7dc47cd3021266985c89d","3fe0091237726a03945889c89aef26b8a6c0feab91d47546de1b9ccb2054500b");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀CxxUrl()❰
    Dependency_Specification spec;
    spec.lib_name = "cxx_url";
    Add_Unilang_Github_Mirror(spec,"CxxUrl","7e7af0ce97b1021eaaf687ced1f65a5bd3e7d548","9b4ba36ee6579be8c367659ea3768ddb7745a9da00d1ac1e5cfd996bf5d40511");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Crow()❰
    Dependency_Specification spec;
    spec.lib_name = "crow";
    Add_Unilang_Github_Mirror(spec,"crow","49edf898a5b9a39a0d69072cc2434c4f23692908","cd2c780b57c54a42f964ef7e6eaee0cd95f3fee97466c23d5dab87fd80cde696");
    
    //project abandoned.  use https://github.com/CrowCpp/crow
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Cpp_Httplib()❰
    Dependency_Specification spec;
    spec.lib_name = "cpp_httplib";
    Add_Unilang_Github_Mirror(spec,"cpp-httplib","22615f96828a72d84019b748ede01fa11d905977","166103fc4281a438e1f5b9611981f2351ab12136086404895fe5d22e5db3aff5");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Cli11()❰
    Dependency_Specification spec;
    spec.lib_name = "cli11";
    Add_Unilang_Github_Mirror(spec,"cli11","1a1cde98f5e8868ca2f17707ab84dcae5718110e","58e542aa42b31119569463ee3990a9b0931e0a4a8bd0da9aa6d3206ebc5fd159");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Pybind11()❰
    Dependency_Specification spec;
    spec.lib_name = "pybind11";
    Add_Unilang_Github_Mirror(spec,"pybind11","25abf7efba0b2990f5a6dfb0a31bc65c0f2f4d17","1a1ccf8779332a7d6d0db9034d42df188867cbaf52eb71d74451f79aa8ce2040");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Cpp_Taskflow()❰
    Dependency_Specification spec;
    spec.lib_name = "cpp_taskflow";
    Add_Unilang_Github_Mirror(spec,"cpp-taskflow","67fc5c1cab8b8f72729ca5b0a97f7adb466c9f8a","d68ccaf99903cd148946ef3b78ceeb0278962ec7192d0cc739554bb1e1c5a697");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Tbb()❰
    Dependency_Specification spec;
    spec.lib_name = "tbb";
    Add_Unilang_Github_Mirror(spec,"tbb","314792356bf75f4a190277536aea543b9b6b310b","1a3fc4ff6932e524c8afc3461b350851977fc4bfeb498411020c15dd183e2c8a");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Pthreadpool()❰
    Dependency_Specification spec;
    spec.lib_name = "pthreadpool";
    Add_Unilang_Github_Mirror(spec,"pthreadpool","6673a4c71fe35e077c6843a74017d9c25610c537","7a523b439a996e2f4376169279409059101f2f71eed4fcc915971368990504a0");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀ThreadPool()❰
    Dependency_Specification spec;
    spec.lib_name = "threadpool";
    Add_Unilang_Github_Mirror(spec,"threadpool","06e635dff22c9d359dfb93bc535a460774dc7319","44e7d6de0ef5380b86dfea74bbd53545319cdc06a50d7a1095b04d8a949242c2");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Obfuscate()❰
    Dependency_Specification spec;
    spec.lib_name = "obfuscate";
    Add_Unilang_Github_Mirror(spec,"Obfuscate","88915d0afa46448570207e36aa8cc5f714709c50","fda8221e08853a2d15e4c9004ceaf96ecb0fd5f86830d48dff0b218c6fc63353");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀HashLib4Cpp()❰
    Dependency_Specification spec;
    spec.lib_name = "HashLib4CPP";
    Add_Unilang_Github_Mirror(spec,"HashLib4CPP","ec6c056df3a9093e731d9a3d60e429554783089e","b2bf7eec9cbe593b16104ffe9e200f51b33fa0e70b10a047cc9c90b17d5aa4ce");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Grpc()❰
    Dependency_Specification spec;
    spec.lib_name = "com_github_grpc_grpc";
    //Add_Unilang_Github_Mirror(spec,"grpc","d6e8c4fdb1c851e48b343fcd82b401a51fd192b3","fbf6d2a560176eb5e5fb7402257da2c73230692df7c3d9a814fa890c7ef9e180");
    Add_Unilang_Github_Mirror(spec,"grpc","ac6f3a78188ee157a38973e7847a02aba80f4d1f","b3a6378b08680d9c39bf91968b2bbb6a419d203a9d4ca7debd82dbe866014ec9");
    //spec.repo_mapping.push_back({"zlib","zlib_internal"});
    spec.build_content_in_dependency=true;
    spec.workspace.priority = 9;
    spec.workspace.raw_starlark = 
R"RAW_STRING(
load("@com_github_grpc_grpc//bazel:grpc_deps.bzl", "grpc_deps")
grpc_deps()
)RAW_STRING";
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Fmt()❰
    Dependency_Specification spec;
    spec.lib_name = "fmt";
    Add_Unilang_Github_Mirror(spec,"fmt","187bd1b8b2392d565d573c0984d0edd57e20ac8d","f80e9325155478455260d8ebfc803ba1685302cd0303e9c706bd657330ab070a");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Xdo()❰
    Dependency_Specification spec;
    spec.lib_name = "xdo";
    Add_Unilang_Github_Mirror(spec,"xdo","dc34b20e6e8ddb43d6d2d7fa1d2b25be4d83b83a","e64cac9d49d1f67e2aa54dcd4352bb1b4f27323778612cb9ad028b3dfc1a50b2");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀xdotool()❰
    Dependency_Specification spec;
    spec.lib_name = "xdotool";
    Add_Unilang_Github_Mirror(spec,"xdotool","a7903d0fdad57e12209b77d9126587a6f9aa87dc","ad218add49f48979b8e21c2ee7609c97cc24771f4fee63118b28b9ac801483a0");
    spec.patch.patch_files.emplace_back("p1");
    spec.patch.patch_args.emplace_back("-p1");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Python3()❰
    Dependency_Specification spec;
    spec.lib_name = "python3";
    Add_Unilang_Github_Mirror(spec,"python3","7f755fe87d217177603a27d9dcc2fedc979f0f1a","36592ee2910b399c68bf0ddad1625f2c6a359ab9a8253d676d44531500e475d4");
    spec.patch.patch_cmds.emplace_back("sed -i '/HAVE_CRYPT_H/d'  usr/include/x86_64-linux-gnu/python3.6m/pyconfig.h");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Tippecanoe()❰
    Dependency_Specification spec;
    spec.lib_name = "tippecanoe";
    Add_Unilang_Github_Mirror(spec,"tippecanoe","a17bd79f7788952d8ecc046c4b47315640f92d93","9169a734cebd6d541e57f0fba98c7ef1d76b9afd9eb335f538d803e847bc41b4");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Semver()❰
    Dependency_Specification spec;
    spec.lib_name = "semver";
    Add_Unilang_Github_Mirror(spec,"semver","e19dee33b26049a85427ad187934f15409b237d0","31057740ff329914961566dc517f17ba431581b9ca01f9e856c1d5fc0bff1539");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀CppConsoleTable()❰
    Dependency_Specification spec;
    spec.lib_name = "cpp_console_table";
    Add_Unilang_Github_Mirror(spec,"CppConsoleTable","958478a211bcb4d2506243c63a34445eb2e13b5d","8e4f9edc7f6fd3f2de3f2020c8ef51098c35c365e5f4a3670ee279065b96f93b");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Tweeny()❰
    Dependency_Specification spec;
    spec.lib_name = "tweeny";
    Add_Unilang_Github_Mirror(spec,"tweeny","07afa4d71627030b25b470fff545516d5fc59c47","449f62da783bc47b2ebe91912183f022967f4f7bf1ccfdebe47ace3528f8c2e7");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Mustache()❰
    Dependency_Specification spec;
    spec.lib_name = "Mustache";
    Add_Unilang_Github_Mirror(spec,"Mustache","c34f602c8014677da7e6bec48b8e913e832a6868","cf568d7c56ed17ddcbcf40664a8303a24ba868c30b8916d3490bec5af77e33f8");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀LevenShtein()❰
    Dependency_Specification spec;
    spec.lib_name = "levenshtein";
    Add_Unilang_Github_Mirror(spec,"levenshtein.c","2091be3b96fdd093062ebccdb5518bbdfdf4d7ad","f60d78239d7dce4e2e32943295044b459fe17af06fdfcf8f2b429b4c1969ad0f");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Rang()❰
    Dependency_Specification spec;
    spec.lib_name = "rang";
    Add_Unilang_Github_Mirror(spec,"rang","cabe04d6d6b05356fa8f9741704924788f0dd762","1f1cdf9016af45fbb37c8992041547c8ccc1edf2fc04d121d86c894c0e45a8b1");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀CrossGuid()❰
    Dependency_Specification spec;
    spec.lib_name = "crossguid";
    Add_Unilang_Github_Mirror(spec,"crossguid","ca1bf4b810e2d188d04cb6286f957008ee1b7681","6be27e0b3a4907f0cd3cfadec255ee1b925569e1bd06e67a4d2f4267299b69c4");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀stduuid()❰
    Dependency_Specification spec;
    spec.lib_name = "stduuid";
    Add_Unilang_Github_Mirror(spec,"stduuid","207f06bd56b5d02b8bf4c4305e91f0da8fedbcb4","116472b411165a57c728a4b293484626a68332d49ed3b6dc980c3de9a14a8a58");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀uuid()❰
    Dependency_Specification spec;
    spec.lib_name = "uuid";
    Add_Unilang_Github_Mirror(spec,"uuid","f895102e2ddaf86387a62c3544abb78c0a5cfbae","9283885688c5ab1c90c9e4072484b14937062a634632400a356ded8972317afd");
    spec.patch.patch_cmds.emplace_back("mv src uuid");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Dtl()❰
    Dependency_Specification spec;
    spec.lib_name = "dtl";
    Add_Unilang_Github_Mirror(spec,"dtl","6b030d6397909e7658cf785f369f647f40c046c1","5ea614993385b986a4d4c2b88f22cc07dfbd92ce725cfafdbf63e6f4bb8e8a0e");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Fluxcapacitor()❰
    Dependency_Specification spec;
    spec.lib_name = "fluxcapacitor";
    Add_Unilang_Github_Mirror(spec,"fluxcapacitor","f6c7f0775597c1141e718ce32bf79268ac8c33ef","78e396bb58804b5f6728578392abc489048b4ee6d1fb6e351f506ebab451bde1");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Tardis()❰
    Dependency_Specification spec;
    spec.lib_name = "tardis";
    Add_Unilang_Github_Mirror(spec,"TARDIS","53b6143ed70a5657139c2db7f73b93d4674cf163","e34291b8f07926795fe2d1e5a575b7f9a06af44f64e21f4051fc6da5e7a2b6a7");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀PicoSha2()❰
    Dependency_Specification spec;
    spec.lib_name = "picosha2";
    Add_Unilang_Github_Mirror(spec,"PicoSHA2","b699e6c900be6e00152db5a3d123c1db42ea13d0","b2866ef6b22e4562a4cbec6aa2510e74edd34a4889ac952b09c2acfa7bb8f619");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Miniz_Cpp()❰
    Dependency_Specification spec;
    spec.lib_name = "miniz_cpp";
    Add_Unilang_Github_Mirror(spec,"miniz_cpp","052335e4f7773368df07b26d2baedb0e6d4dbd38","6f0994a0ef9fb95ed8cf12aa36ae6fd6e99e087b384a155b6a0344a763424fc5");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Getch()❰
    Dependency_Specification spec;
    spec.lib_name = "getch";
    Add_Unilang_Github_Mirror(spec,"simple-getch","16c0dc6b00c4decb71b82b26ff082ead236a0058","38f05f2e3d7db2440227a9f55ae0e979a983559ae107d8db6392668ebb81b12d");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Xorg_Xinput()❰
    Dependency_Specification spec;
    spec.lib_name = "xorg_xinput";
    Add_Unilang_Github_Mirror(spec,"xorg-xinput","32314d73b811fff16a11c402778869ba4525e59b","e574041f0997511519137ba290cda39884bc490b0e991ce4447d37112d1becdb");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Stmr()❰
    Dependency_Specification spec;
    spec.lib_name = "stmr";
    Add_Unilang_Github_Mirror(spec,"stmr.c","236c5862e534f3426177267da76ea507bc872c9c","90e134d6de671de0faa0a261f3f32945779f612ef0a8294236dcc2d88f00c9a9");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀sndio()❰
    Dependency_Specification spec;
    spec.lib_name = "sndio";
    Add_Unilang_Github_Mirror(spec,"sndio","4ac8a8cae7585ce9f7eb5bf8cbaa85b0c7939fb1","340c194ac170c256917741d56d019b21b4d0d3405747155fc514d14521cf3887");
    return spec;
❱

◀private: static▶ Dependency_Specification ☀Openal_Soft()❰
    Dependency_Specification spec;
    spec.lib_name = "openal_soft";
    Add_Unilang_Github_Mirror(spec,"openal-soft","024d5d900aa7f9e3435459b0a8cfe354dc8e21fd","0234a10ea8c593d3b362ccc9a0b98c86723f455ea3ddb10175a78712ac713ac0");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀openal()❰
    Dependency_Specification spec;
    spec.lib_name = "openal";
    Add_Unilang_Github_Mirror(spec,"OpenAL","631ad459dda5f5598863f7efc21070347aed757d","992d88ffb89a9a8fd2ed42936caaca20fb3cee3f23ac8a07de568087e37cae88");
    spec.patch.patch_cmds.emplace_back("sed -i '/HAVE_IEEEFP_H/d'  OpenAL32/Include/config.h");
    
    
    return spec;
❱

◀private: static▶ Dependency_Specification ☀Soloud()❰
    Dependency_Specification spec;
    spec.lib_name = "soloud";
    Add_Unilang_Github_Mirror(spec,"soloud","6ee8ffb91a02764c7b8f331ee2177096d46bdd7c","3b87374dfa5da58a6ebca6a23280fa5519728b7fb2607e4037988cabe7dbdb2c");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀LibMagic()❰
    Dependency_Specification spec;
    spec.lib_name = "libmagic";
    Add_Unilang_Github_Mirror(spec,"libmagic","f3f079e766b5dceea1850b55bcc59ea6249a94f1","cd8133c5f38b8c91c1e4d49aa9ef23f14f15d5f8986a3616c7516532d670ac1f");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Chinese_Syllable_Sounds()❰
    Dependency_Specification spec;
    spec.lib_name = "chinese_syllable_sounds";
    Add_Unilang_Github_Mirror(spec,"chinese_syllable_sounds","042305a69752a5beef8e6e0f66942edc370f7dcc","52849b2317e897ba333a9ae0dd55f7187a7198619fab74e555e9919c750942a0");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Scrabble_Words()❰
    Dependency_Specification spec;
    spec.lib_name = "scrabble_words";
    Add_Unilang_Github_Mirror(spec,"scrabble_words","28a758a38c44baa5cd299d857dc3955bb0dbb9bf","42514a4e7d409e8ed45fbfb13539a7d1d87693e4e1d78c92531e4f24766c42c4");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀GloVe()❰
    Dependency_Specification spec;
    spec.lib_name = "GloVe";
    Add_Unilang_Github_Mirror(spec,"GloVe","afd83fbf62b676d339c93639af1312b1b7626b53","795ea4dcf4a3baf23947fbb0623ae1c0a763f43e9a974e33be4326ce92a5ead4");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀word2vec()❰
    Dependency_Specification spec;
    spec.lib_name = "word2vec";
    Add_Unilang_Github_Mirror(spec,"word2vec","9b8b58001ba5d58babe1c62327a8501b62cd6179","0f62348fc0db2719a6a668e1f6bd15f412b2d30f2fa3e09f2d560a5ca4fc1849");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Fonts()❰
    Dependency_Specification spec;
    spec.lib_name = "fonts";
    Add_Unilang_Github_Mirror(spec,"fonts","321745a0b69c45b8568d9ac84e887032ad844b25","61e27b6ab94c4dad458134213bdfc6b6220b5dd27c6a1e8595b904c2eb8c3ffe");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀PuyoPuyo()❰
    Dependency_Specification spec;
    spec.lib_name = "PuyoPuyoAssets";
    Add_Unilang_Github_Mirror(spec,"PuyoPuyoAssets","c44e7bf9cff612fb63948fa96c51ff13a2ac8e41","8acfbf5b95c0520df76370d481d2898e9c7f0e2233232694c5105f12644a572b");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀EnglishSounds()❰
    Dependency_Specification spec;
    spec.lib_name = "english_sounds";
    Add_Unilang_Github_Mirror(spec,"english_sounds","0fdbe05b76b93732c97573148412a2bfbc4bd7fa","b30fd69cbcbf9afef6b6bb92d7729eb9f809f3436b558cfff38689a263053335");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀PlayingCardAssets()❰
    Dependency_Specification spec;
    spec.lib_name = "playing_card_assets";
    Add_Unilang_Github_Mirror(spec,"playing_card_assets","30d8e60a198cc2673ff2bbdef754796e1317e79b","b827856be082322b5c1499c9db7895b3819860d9a6782b98a97776b75da4340f");
    return spec;
❱

◀private: static▶ Dependency_Specification ☀olcPixelGameEngine()❰
    Dependency_Specification spec;
    spec.lib_name = "olcPixelGameEngine";
    Add_Unilang_Github_Mirror(spec,"olcPixelGameEngine","8418b7d616c417ea46129d981380046004804fb3","ab65c698e5254ce12217d817750d1b1aa0a3720abb7178ed06419ee8cf7df25e");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀asciiArt()❰
    Dependency_Specification spec;
    spec.lib_name = "ascii_art";
    Add_Unilang_Github_Mirror(spec,"ascii_art","fede354e511b5be12726a67abaa3d561ffc763db","f9c39de719465379496a44f02e2886074af962a3d2497bb0a9d2fbb91af935cd");
    spec.build_defs.raw_starlark = 
R"RAW_STRING(
package(default_visibility = ["//visibility:public"],)

cc_library(
    name = "lib",
    srcs = ["ascii_art.c"],
    hdrs = ["ascii_art.h"],
)

cc_binary(
    name = "sample",
    srcs = ["sample.c"],
    deps = ["lib"],
)
)RAW_STRING";

    return spec;
❱
◀private: static▶ Dependency_Specification ☀InfoWare()❰
    Dependency_Specification spec;
    spec.lib_name = "infoware";
    Add_Unilang_Github_Mirror(spec,"infoware","ea69ce1b25c3cec40424cc1b065fc6e820e6fa9","74f5851e80eee1a14d57fe9b153b17db2aa26e3e99e72896b0062c991f90a325");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Frozen()❰
    Dependency_Specification spec;
    spec.lib_name = "frozen";
    Add_Unilang_Github_Mirror(spec,"frozen","c5bfadab02a484c23794bc47fad9b0a811071ccb","b43a413ccc71af0dc39bdc5e76a07718ea308e387b1e72e4188f6596bc1d8da6");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀stxxl()❰
    Dependency_Specification spec;
    spec.lib_name = "stxxl";
    Add_Unilang_Github_Mirror(spec,"stxxl","b9e44f0ecba7d7111fbb33f3330c3e53f2b75236","5350eba594f7899f125e607217662e4027b0c3cb78541b3964e02b9ac36e410f");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀bitset2()❰
    Dependency_Specification spec;
    spec.lib_name = "bitset2";
    Add_Unilang_Github_Mirror(spec,"bitset2","d61e4b0222aced39f7eb5860fb213d5f34ad7607","d92003fe37b64bf85ea1ad578590d29c2bfe9a498abbabe2ade1dd26ad2ae247");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀magnum()❰
    Dependency_Specification spec;
    spec.lib_name = "magnum";
    Add_Unilang_Github_Mirror(spec,"magnum","6053cc6fc6761d8e7110d889f01924188106bef8","95cde5b70c1eceee047e9c263ca4dc9e5b8c8316b20f03aa2053b5c9a901f890");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀dbus()❰
    Dependency_Specification spec;
    spec.lib_name = "dbus";
    Add_Unilang_Github_Mirror(spec,"dbus","5c0575850fe17177bc1b82ff2fe1a1e4dc4e9261","2e44543b27364868ceb02b3aed734c142253d447f13c2ec87dff5d1a2909e9fb");
    spec.patch.patch_files.emplace_back("config");
    spec.patch.patch_files.emplace_back("arch_deps");
    spec.patch.patch_args.emplace_back("-p1");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀libglvnd()❰
    Dependency_Specification spec;
    spec.lib_name = "libglvnd";
    Add_Unilang_Github_Mirror(spec,"libglvnd","3e8684a739dffe1d5441362679b4ee149425e6d6","bf6c8774d7fcd6ef2372325cafe2d780ccd48a62b0b5c4abc973c4597a196ace");
    spec.patch.patch_files.emplace_back("p1");
    spec.patch.patch_args.emplace_back("-p1");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀glproto()❰
    Dependency_Specification spec;
    spec.lib_name = "glproto";
    Add_Unilang_Github_Mirror(spec,"glproto","bd3d751e1eb17efb39f65093271bb4ac071aa9e0","385191351a376ea5b398fb0722a6cef1f23f75bff43a6d02170073a2f40c9cc7");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀painless()❰
    Dependency_Specification spec;
    spec.lib_name = "painless";
    Add_Unilang_Github_Mirror(spec,"painless","4ab94066f73379389c08cd53cecb2545d7c52486","173dbc4bdeb113c3a78fed58807bd5ca4b94abfd304edc8b902f2711e8b35cef");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀dbg_macro()❰
    Dependency_Specification spec;
    spec.lib_name = "dbg-macro";
    Add_Unilang_Github_Mirror(spec,"dbg-macro","4f7a7a5555ccc3ef2bd41b8fba6acbfa9af701a8","570e0720c6c10583b85f7bc25f72f7c8a9cf4637456be2e5a835a598d8cb96a6");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀AudioFile()❰
    Dependency_Specification spec;
    spec.lib_name = "AudioFile";
    Add_Unilang_Github_Mirror(spec,"AudioFile","1c77de76f4f396f1019088f3cd9da5141148ee76","aa893a464546b686dd4d2555eafe2a0e9f4a96713328cf6e37603d7e9af02348");
    spec.build_defs.raw_starlark = 
R"RAW_STRING(
package(default_visibility = ["//visibility:public"],)

cc_library(
    name = "lib",
    hdrs = ["AudioFile.h"],
)
)RAW_STRING";

    return spec;
❱
◀private: static▶ Dependency_Specification ☀Wave()❰
    Dependency_Specification spec;
    spec.lib_name = "wave";
    Add_Unilang_Github_Mirror(spec,"wave","a782663d90b5a199e51ef59fc64bbe5a4aa02c38","ac7be574beaef4e08a1c050f46ebcc7c185722d6d8d0d75bfeaf952221500afb");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀vorbis()❰
    Dependency_Specification spec;
    spec.lib_name = "vorbis";
    Add_Unilang_Github_Mirror(spec,"vorbis","0a4beb1d04f802c48016b11fb939690e24173168","5dc382c4c00de0742e9d1433e9b332cd1c28cdce5145d02961614083d955f1dd");
    spec.patch.patch_files.emplace_back("p1");
    spec.patch.patch_args.emplace_back("-p1");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀ogg()❰
    Dependency_Specification spec;
    spec.lib_name = "ogg";
    Add_Unilang_Github_Mirror(spec,"ogg","0bbcba4e7cf32324170470569c4527ffd0002870","727861aa1796ec1c630477d736856dabb438b04dca31a8a74a9f426e22eef029");
    spec.patch.patch_files.emplace_back("p1");
    spec.patch.patch_args.emplace_back("-p1");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀flac()❰
    Dependency_Specification spec;
    spec.lib_name = "flac";
    Add_Unilang_Github_Mirror(spec,"flac","ce6dd6b5732e319ef60716d9cc9af6a836a4011a","96a46aba218bb65826a8a650eb2d4f3b4c207543d10fe2b5248d91a77ab10e18");
    spec.patch.patch_files.emplace_back("p1");
    spec.patch.patch_args.emplace_back("-p1");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀plantuml()❰
    Dependency_Specification spec;
    spec.lib_name = "plantuml";
    Add_Unilang_Github_Mirror(spec,"plantuml","9ba7d08d5247cac5ec47a5f0052da3aaad0e8479","684149be1def4fcb1c146ca07cfad0d0baec68014dc689dc32212d0b29db2949");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀tomlplusplus()❰
    Dependency_Specification spec;
    spec.lib_name = "tomlplusplus";
    Add_Unilang_Github_Mirror(spec,"tomlplusplus","983e22978e8792f6248695047ad7cb892c112e18","a522eaa80a33d8c457a0b9cb3509f2e7c7a61d8e102f3c14696d5a7606a4e874");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀visit_struct()❰
    Dependency_Specification spec;
    spec.lib_name = "visit_struct";
    Add_Unilang_Github_Mirror(spec,"visit_struct","8c91d2283c7050593df5b692a13cb0ea99ba81d5","ded2088b102ec566ba6db1b444e1ff823960d901d8bfd38156ef0211a5da38ea");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀msgpack_c()❰
    Dependency_Specification spec;
    spec.lib_name = "msgpack";
    Add_Unilang_Github_Mirror(spec,"msgpack-c","4f59b98185cc2bdc8be330aef587fdbe853dd175","8a546aba0b833eda0bb4ae7dd8bdd1fd5cea7ad5424de0e90282f6819cb2d3fb");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀pugixml()❰
    Dependency_Specification spec;
    spec.lib_name = "pugixml";
    Add_Unilang_Github_Mirror(spec,"pugixml","c4bae8d8185858435bdf22cd98ba7e58e67d9041","d5558cd419c8d46bdc958064cb97f963d1ea793866414c025906ec15033512ed");
    return spec;
❱

◀private: static▶ Dependency_Specification ☀Monocypher()❰
    Dependency_Specification spec;
    spec.lib_name = "monocypher";
    Add_Unilang_Github_Mirror(spec,"monocypher","45524e41fc84054b0e15304195fa5d3b61e816b5","7b57f854379a7743c21f8a0836081cf05dd2b126f285f576921f2044dd13d4ad");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀secp256k1()❰
    Dependency_Specification spec;
    spec.lib_name = "secp256k1";
    Add_Unilang_Github_Mirror(spec,"secp256k1","3dc8c072b6d84845820c1483a2ee21094fb87cc3","85d571a698011159666fa596907028511fc98b6ac73505cf34a4656dba7bd8e5");
    spec.patch.patch_files.emplace_back("p1");
    spec.patch.patch_args.emplace_back("-p1");
    
    
    spec.build_defs.raw_starlark = 
R"RAW_STRING(
package(default_visibility = ["//visibility:public"])

#build headers
hdrs = glob(
    include = [
        "include/**/*.h",
        "include/**/*.hpp",
        "src/**/*.hpp",
        "src/**/*.h",
        "src/**/*.c",
    ],
    exclude = [
    ],
)

cc_library(
    name = "hdrs",
    hdrs = hdrs,
    includes = [
        "include",
        "src",
    ],
)

#build srcs
srcs = glob(
    include = [
        "src/**/*.c"
    ],
    exclude = [
        "src/valgrind_ctime_test.c",
        "src/tests.c",
        "src/bench_ecmult.c",
        "src/bench_ecdh.c",
        "src/bench_internal.c",
        "src/bench_verify.c",
        "src/tests_exhaustive.c",
        "src/bench_recover.c",
        "src/gen_context.c",
        "src/bench_sign.c",
        "src/bench_schnorrsig.c",
        "src/bench_recover.c",
    ],
)

cc_library(
    name = "lib",
    srcs = srcs,
    copts = [
        "-DECMULT_WINDOW_SIZE=2",
        "-DECMULT_GEN_PREC_BITS=4"
    ],
    includes = [
        "include",
        "src",
    ],
    deps = [
        ":hdrs",
    ],
)
)RAW_STRING";
    return spec;
❱

◀private: static▶ Dependency_Specification ☀libbase58()❰
    Dependency_Specification spec;
    spec.lib_name = "libbase58";
    Add_Unilang_Github_Mirror(spec,"libbase58","b1dd03fa8d1be4be076bb6152325c6b5cf64f678","73b4c9bbb2002f781df6b92e40a5ed2b38ef74dfbf90ce83dc6e18af52e7a4b8");
    // spec.patch.patch_files.emplace_back("p1");
    // spec.patch.patch_args.emplace_back("-p1");
    
    
    spec.build_defs.raw_starlark = 
R"RAW_STRING(
package(default_visibility = ["//visibility:public"])

#build headers
hdrs = glob(
    include = [
        "libbase58.h"
    ],
    exclude = [
    ],
)

cc_library(
    name = "hdrs",
    hdrs = hdrs,
    includes = [
    ],
)

#build srcs
srcs = glob(
    include = [
        "base58.c"
    ],
    exclude = [
    ],
)

cc_library(
    name = "lib",
    srcs = srcs,
    copts = [
    ],
    includes = [
        "include",
        "src",
    ],
    deps = [
        ":hdrs",
    ],
)
)RAW_STRING";
    return spec;
❱


◀private: static▶ Dependency_Specification ☀Tabulator()❰
    Dependency_Specification spec;
    spec.lib_name = "tabulator";
    Add_Unilang_Github_Mirror(spec,"tabulator","b294a53bf39ba082420a3d1d9d913b744e9dea1d","da365ae0eae5321705411b9b936baa9cd7cd40e2b27b1f3679af57696541a507");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀uftrace()❰
    Dependency_Specification spec;
    spec.lib_name = "uftrace";
    Add_Unilang_Github_Mirror(spec,"uftrace","a7f87b7a086b1f1829d084c21044ebb7709ef7b6","dc0ac80fdadb950886654317c11d4df08763d713aee91c8bcd0028a22d742a37");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀ibus()❰
    Dependency_Specification spec;
    spec.lib_name = "ibus";
    Add_Unilang_Github_Mirror(spec,"ibus","f591381e3c892947ecaffe9131b9039ab9014498","d2fee505277e2d168678ad49eaf91f57203cb4ef68c843981faca7f15e67500c");
    spec.patch.patch_files.emplace_back("config");
    spec.patch.patch_files.emplace_back("src_gen");
    spec.patch.patch_files.emplace_back("marshalers");
    spec.patch.patch_files.emplace_back("srcs");
    spec.patch.patch_args.emplace_back("-p1");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀libevent()❰
    Dependency_Specification spec;
    spec.lib_name = "libevent";
    Add_Unilang_Github_Mirror(spec,"libevent","eee26deed38fc7a6b6780b54628b007a2810efcd","9b436b404793be621c6e01cea573e1a06b5db26dad25a11c6a8c6f8526ed264c");
    spec.patch.patch_files.emplace_back("p1");
    spec.patch.patch_args.emplace_back("-p1");
    spec.patch.patch_cmds.emplace_back("find . -type f -name '*.c' -exec sed -i 's/#include <stdlib.h>/#include <stdlib.h>\\n#include <stdint.h>\\n/g' {} \\;");
    
    return spec;
❱
◀private: static▶ Dependency_Specification ☀glib()❰
    Dependency_Specification spec;
    spec.lib_name = "glib";
    Add_Unilang_Github_Mirror(spec,"glib","2ba0f14b5298f49dcc3b376d2bdf6505b2c32bd3","80753e02bd0baddfa03807dccc6da4e063f272026f07fd0e05e17c6e5353b07e");
    spec.patch.patch_files.emplace_back("glib_config");
    spec.patch.patch_files.emplace_back("glib_config2");
    spec.patch.patch_files.emplace_back("glib_enums");
    spec.patch.patch_files.emplace_back("gio_enums");
    spec.patch.patch_files.emplace_back("gnetworking");
    spec.patch.patch_files.emplace_back("xdp_dbus");
    spec.patch.patch_files.emplace_back("gdbus_daemon");
    spec.patch.patch_files.emplace_back("gmoduleconf");
    spec.patch.patch_files.emplace_back("gconstructor");
    spec.patch.patch_args.emplace_back("-p1");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀glibc()❰
    Dependency_Specification spec;
    spec.lib_name = "glibc";
    Add_Unilang_Github_Mirror(spec,"glibc","146fea07640387c78e334933de24b6353e1f0eba","4f73cc1025bb8d8a26151d75748bb5325e9f5501a9809ed3edcb193e1876232d");
    return spec;
❱

◀private: static▶ Dependency_Specification ☀utilsLinux()❰
    Dependency_Specification spec;
    spec.lib_name = "utilsLinux";
    Add_Unilang_Github_Mirror(spec,"util-linux","2eb527722af2093038bf38d4554c086d20df79c9","902dba36dfcf50d15e86d0d3cdbb513e57cd455231c3c9a08ac563c6e23e66a8");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀systemd()❰
    Dependency_Specification spec;
    spec.lib_name = "systemd";
    Add_Unilang_Github_Mirror(spec,"systemd","2233c2703c91325f8c742daf2d37c1343f35998e","6f273444c068c047b6f339832944b1aadfcb9229889f2ae24f1af36440994e73");
    spec.patch.patch_files.emplace_back("p1");
    spec.patch.patch_args.emplace_back("-p1");
    return spec;
❱

◀private: static▶ Dependency_Specification ☀google_or_tools()❰
    Dependency_Specification spec;
    spec.lib_name = "google_or_tools";
    Add_Unilang_Github_Mirror(spec,"or-tools","45770b833997f827d322e929b1ed4781c4e60d44","d3d21797b8ba3cac5ecc652845fbe509a42b6fb282e08cb240bebaeb956845a8");
    spec.build_content_in_dependency=true;
    spec.repo_mapping.emplace_back("com_google_absl","abseil");
    spec.repo_mapping.emplace_back("com_github_glog_glog","glog");
    spec.repo_mapping.emplace_back("com_github_gflags_gflags","gflags");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀gflags()❰
    Dependency_Specification spec;
    spec.lib_name = "gflags";
    Add_Unilang_Github_Mirror(spec,"gflags","f7388c6655e699f777a5a74a3c9880b9cfaabe59","ed82ef64389409e378fc6ae55b8b60f11a0b4bbb7e004d5ef9e791f40af19a6e");
    spec.build_content_in_dependency=true;
    return spec;
❱


◀private: static▶ Dependency_Specification ☀Co_Vsco_Bazel_Toolchains()❰
    Dependency_Specification spec;
    spec.lib_name = "co_vsco_bazel_toolchains";
    Add_Unilang_Github_Mirror(spec,"bazel-toolchains","519efd0b3275e4cf1ffa03f3c3fb80c7d8f7c60d","f5c0fdbcb32dc5a276789312d0b3c6b86f8c769177e6778c134fd2bc55057e42");
    spec.build_content_in_dependency=true;
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Grail_Bazel_Toolchain()❰
    Dependency_Specification spec;
    spec.lib_name = "com_grail_bazel_toolchain";
    Add_Unilang_Github_Mirror(spec,"bazel-toolchain","f2d1ba2c9d713b2aa6e7063f6d11dd3d64aa402a","6bf2b30c8ab190eee44e1843f0cff457a5379250ad8239155dcf5bd38e4cc70f");
    spec.build_content_in_dependency=true;
    
    spec.workspace.priority = 2;
    spec.workspace.raw_starlark = 
R"RAW_STRING(
load("@com_grail_bazel_toolchain//toolchain:deps.bzl", "bazel_toolchain_dependencies")

bazel_toolchain_dependencies()

load("@com_grail_bazel_toolchain//toolchain:rules.bzl", "llvm_toolchain")

llvm_toolchain(
    name = "llvm_toolchain",
    llvm_version = "11.0.0",

    # this sysroot was stolen from the grail_bazel_toolchain discussion.
    # I think its related to the chromium project?  or google somehow?
    # sysroot = {
    #     "linux": "@debian_stretch_amd64_sysroot//:sysroot",
    #     "darwin": "@debian_stretch_amd64_sysroot//:sysroot",
    # },

    # This is a custom built sysroot using a Dockerfile to build
    # needed compiler files
    #sysroot = {
    #    "linux": "@ubuntu_14_04_clang_10_sysroot//:sysroot",
    #    "darwin": "@ubuntu_14_04_clang_10_sysroot//:sysroot",
    #},

    # This is a custom built sysroot using a Dockerfile to build
    # needed compiler files
    sysroot = {
        "linux": "@ubuntu_20_04_clang_11_sysroot//:sysroot",
        "darwin": "@ubuntu_20_04_clang_11_sysroot//:sysroot",
    },
)

load("@llvm_toolchain//:toolchains.bzl", "llvm_register_toolchains")

llvm_register_toolchains()
)RAW_STRING";
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Io_Bazel_Rules_M4()❰
    Dependency_Specification spec;
    spec.lib_name = "rules_m4";
    Add_Unilang_Github_Mirror(spec,"rules_m4","2bf69df77dfb6b3ba6b7fc95c304b0dc279375bc","7860c2465427860129efd90093fcc1c7d837739f44ff8f586597f1b4a7c52e7d");
    spec.build_content_in_dependency=true;
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Io_Bazel_Rules_Go()❰
    Dependency_Specification spec;
    spec.lib_name = "io_bazel_rules_go";
    Add_Unilang_Github_Mirror(spec,"rules_go","64bfa14993c7841aaefbbe1f1aecaad72f302974","693542a4d8ed25eda1ebb3cae03330210ede99401b490dded05a0d47b8402baa");
    spec.build_content_in_dependency=true;
    
    spec.workspace.priority = 3;
    spec.workspace.raw_starlark = 
R"RAW_STRING(
load("@io_bazel_rules_go//go:deps.bzl", "go_register_toolchains", "go_rules_dependencies")
go_rules_dependencies()
go_register_toolchains()
)RAW_STRING";
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Bazel_Gazelle()❰
    Dependency_Specification spec;
    spec.lib_name = "bazel_gazelle";
    Add_Unilang_Github_Mirror(spec,"bazel-gazelle","2f9261b27f1d2660e2952bc9a0e79e4e81691afe","079e615ddbbcd53a0a730341dfe5d52dcc06771bcf782254eb6fd581ec20b102");
    spec.build_content_in_dependency=true;
    
    spec.workspace.priority = 4;
    spec.workspace.raw_starlark = 
R"RAW_STRING(
load("@bazel_gazelle//:deps.bzl", "gazelle_dependencies")
gazelle_dependencies()
)RAW_STRING";
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Io_Bazel_Rules_Docker()❰
    Dependency_Specification spec;
    spec.lib_name = "io_bazel_rules_docker";
    //Add_Unilang_Github_Mirror(spec,"rules_docker","708e6c7c2d611c546b62fb21fbd2945fd8dc1cdb","1a8c205254a75d9affd745b9ff9bdc359e9173fb420cce92b5bf1276887cc0c1");
    Add_Unilang_Github_Mirror(spec,"rules_docker","454981e65fa100d37b19210ee85fedb2f7af9626","b6dc35134f1563b95db4fcfffd9c2e8673709c0b6b3b4a112b1b5bdbd843caa4");
    spec.build_content_in_dependency=true;
    spec.workspace.priority = 12;
    spec.workspace.raw_starlark = 
R"RAW_STRING(
load(
    "@io_bazel_rules_docker//repositories:repositories.bzl",
    container_repositories = "repositories",
)

container_repositories()

load("@io_bazel_rules_docker//repositories:deps.bzl", container_deps = "deps")

container_deps()

load(
    "@io_bazel_rules_docker//container:container.bzl",
    "container_pull",
)

container_pull(
    name = "java_base",
    digest = "sha256:deadbeef",
    registry = "gcr.io",
    repository = "distroless/java",
)

load(
    "@io_bazel_rules_docker//cc:image.bzl",
    _cc_image_repos = "repositories",
)

_cc_image_repos()
)RAW_STRING";
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Rules_Swift()❰
    Dependency_Specification spec;
    spec.lib_name = "build_bazel_rules_swift";
    Add_Unilang_Github_Mirror(spec,"rules_swift","b7a269355fc9852a885c5becbdeb1497cf787164","f443f39617ad489a6e91e577f79ad831425d84b53287e254ac68b576eccf1e18");
    spec.build_content_in_dependency=true;
    spec.workspace.priority = 5;
    spec.workspace.raw_starlark = 
R"RAW_STRING(
load("@build_bazel_rules_swift//swift:repositories.bzl","swift_rules_dependencies")
swift_rules_dependencies()
)RAW_STRING";
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Rules_Rust()❰
    Dependency_Specification spec;
    spec.lib_name = "io_bazel_rules_rust";
    Add_Unilang_Github_Mirror(spec,"rules_rust","df18ddbece5b68f86e63414ea4b50d691923039a","8e1bae501e0df40e8feb2497ebab37c84930bf00b332f8f55315dfc08d85c30a");
    spec.build_content_in_dependency=true;
    spec.workspace.priority = 6;
    spec.workspace.raw_starlark = 
R"RAW_STRING(
load("@io_bazel_rules_rust//rust:repositories.bzl", "rust_repositories")
rust_repositories()
)RAW_STRING";
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Rules_Fuzzing()❰
    Dependency_Specification spec;
    spec.lib_name = "rules_fuzzing";
    Add_Unilang_Github_Mirror(spec,"rules_fuzzing","ce7b85c762cbb8ff2697b053ae7b7c9e43dd4a99","d6cd2fda74ddf25a066585b7af378cfcbdb7ddcca783480432cb0debfbce6907");
    spec.build_content_in_dependency=true;
    
    spec.workspace.priority = 1;
    spec.workspace.raw_starlark = 
R"RAW_STRING(
load("@rules_fuzzing//fuzzing:repositories.bzl", "rules_fuzzing_dependencies")

# Pass jazzer = True to rules_fuzzing_dependencies for Java fuzzing support.
rules_fuzzing_dependencies(jazzer = True)

load("@rules_fuzzing//fuzzing:init.bzl", "rules_fuzzing_init")

rules_fuzzing_init()

#For Java fuzzing support, uncomment the following lines.
load("@jazzer//:repositories.bzl", "jazzer_dependencies")
jazzer_dependencies()
load("@jazzer//:init.bzl", "jazzer_init")
jazzer_init()
)RAW_STRING";
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Rules_Python()❰
    Dependency_Specification spec;
    spec.lib_name = "rules_python";
    Add_Unilang_Github_Mirror(spec,"rules_python","f1b6b742254ec11f9e7bd6bff19ad2b327107a45","56bae84082f326c5d51fe63a0929a825ae6f415ff7e3e49df20ba799dca62a7f");
    spec.build_content_in_dependency=true;
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Apple_Rules_Lint()❰
    Dependency_Specification spec;
    spec.lib_name = "apple_rules_lint";
    Add_Unilang_Github_Mirror(spec,"apple_rules_lint","6e8162187add0469842ac2ca37f624966448bd84","d6c602129ec5f27b2fb98db444ab8c4d5cd607946750cbcc60166828c8db02a6");
    spec.build_content_in_dependency=true;
    return spec;
❱


◀private: static▶ Dependency_Specification ☀Rules_Pkg()❰
    Dependency_Specification spec;
    spec.lib_name = "rules_pkg";
    Add_Unilang_Github_Mirror(spec,"rules_pkg","a2752f79380fd68b557c4b248dc1faedfc3756d4","451c17a9694c4cf0acc833f097eac0abb41fc6e7e25d203817cdb1d1b4dab596");
    spec.build_content_in_dependency=true;
    return spec;
❱


◀private: static▶ Dependency_Specification ☀gecode()❰
    Dependency_Specification spec;
    spec.lib_name = "gecode";
    Add_Unilang_Github_Mirror(spec,"gecode","027c57889d66dd26ad8e1a419c2cda22ab0cf305","21b00fb7aade37d57051c3eed4fb9bbcd76f8a28fae5dfbf32e385df4c7a8ad6");
    return spec;
❱

◀private: static▶ Dependency_Specification ☀gkrellm()❰
    Dependency_Specification spec;
    spec.lib_name = "gkrellm";
    Add_Unilang_Github_Mirror(spec,"gkrellm","daaa09fc20140bb1dc57773925fd7c808c09edda","d5558cd419c8d46bdc958064cb97f963d1ea793866414c025906ec15033512ed");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀osdialog()❰
    Dependency_Specification spec;
    spec.lib_name = "osdialog";
    Add_Unilang_Github_Mirror(spec,"osdialog","a3ca84070c620b186f475ea17b86e65efab5ce57","3fc6dabcf1fcfdca5fd87f2474a113e17212da4211b3fa3deecd263a6a59dc26");
    return spec;
❱

◀private: static▶ Dependency_Specification ☀libgpg_error()❰
    Dependency_Specification spec;
    spec.lib_name = "libgpg-error";
    Add_Unilang_Github_Mirror(spec,"libgpg-error","8047ca99858a7ee812ef11ed3bd2868e920ac1b7","46d749c769008a225c26d140632303f15c699f4b903f57920e55560c63eeb868");
    spec.patch.patch_files.emplace_back("p1");
    spec.patch.patch_args.emplace_back("-p1");
    return spec;
❱

◀private: static▶ Dependency_Specification ☀libgcrypt()❰
    Dependency_Specification spec;
    spec.lib_name = "libgcrypt";
    Add_Unilang_Github_Mirror(spec,"libgcrypt","1a83df98b198902ee6d71549231a3af37088d452","2c45f8573db60156926bcaf8601032029a1e82afef5baac949c0911ba4631f97");
    spec.patch.patch_files.emplace_back("p1");
    spec.patch.patch_args.emplace_back("-p1");
    return spec;
❱

◀private: static▶ Dependency_Specification ☀glob()❰
    Dependency_Specification spec;
    spec.lib_name = "glob";
    Add_Unilang_Github_Mirror(spec,"glob","8634dd350f3095da66f144b823b7c2b9d53ecacf","fcde93b8005012051480484a8d5a3374b866f50a1e2572fb28e676a339f43c34");
    return spec;
❱



◀private: static▶ void ☀Add_Unilang_Github_Mirror(Dependency_Specification & spec, std::string const& repo, std::string const& commit, std::string const& sha256)❰
    Dependency_Location location;
    location.owner_name = "Unilang";
    location.repo_name = repo;
    location.at_commit = commit;
    location.sha256 = sha256;
    spec.locations.emplace_back(location);
❱

◀private: static▶ void ☀Add_Original_Github_Mirror(Dependency_Specification & spec, std::string const& name, std::string const& repo, std::string const& commit, std::string const& sha256)❰
    Dependency_Location location;
    location.owner_name = name;
    location.repo_name = repo;
    location.at_commit = commit;
    location.sha256 = sha256;
    spec.locations.emplace_back(location);
❱