class
❪vector❫
❪string❫
⚯

⚞⚟


//ironically, integrating a bazel repository with another bazel repository has been really difficult
//workspace files and BUILD from the 3rd party repo are often incompatible when brought in.
//Even if I point to my own BUILD file, the build files in the third party repos are still detected and conflict and cause issues.
//I don't understand how people integrate other bazel repos.  You just throw a million things in your workspace file??  Even that rarely works for me,  and none of it can be pinned,
//so you pull from all sorts of hosts indirectly you don't own. It would break all the time.
//For now,  I'll just delete all the BUILD/WORSPACE files for particular bazel third party repos that I want to integrate and re-implement the BUILD rules myself.
//sad, I know.  But eventually I'll find better techniques for leveraging self-hosted bazel rules
◀public: static▶ std::vector<std::string> ☀Remove_Bazel_Stuff()❰
    std::vector<std::string> x;
    x.emplace_back("find . -name 'WORKSPACE' -type f -delete");
    x.emplace_back("find . -name 'BUILD' -type f -delete");
    x.emplace_back("find ./* -mindepth 1 -name 'BUILD.bazel' -type f -delete");
    return x;
❱

//sometimes the buildfiles from other repos are good and we want to try to utilize them,
//but the workspace file brings in all kinds of other stuff that causes issues.
◀public: static▶ std::vector<std::string> ☀Remove_Bazel_Workspace()❰
    std::vector<std::string> x;
    x.emplace_back("find . -name 'WORKSPACE' -type f -delete");
    return x;
❱