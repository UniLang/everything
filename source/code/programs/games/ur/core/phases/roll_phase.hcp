class
❪string❫
❪iostream❫
❪vector❫
❪thread❫
❪algorithm❫
❪"code/programs/games/ur/assets/assets"❫
❪"code/programs/games/ur/state/game_state"❫
❪SFML/Window.hpp❫
❪SFML/Window/Joystick.hpp❫
❪SFML/Graphics.hpp❫
❪SFML/Graphics/Transformable.hpp❫
❪"code/utilities/formats/json/converters/lib"❫
❪"code/utilities/math/math"❫
❪"code/utilities/types/vectors/observers/lib"❫
❪"code/utilities/peripheral/keyboard/F310_gamepad/data/f310_events"❫
⚯
❪"code/utilities/peripheral/keyboard/joycons/joystick_rotating_checker"❫
❪"code/utilities/types/vectors/transformers/lib"❫
❪"code/utilities/types/strings/observers/converting/lib"❫
❪"code/utilities/types/map/lib"❫
❪"code/utilities/types/vectors/observers/size_frequency_counter"❫
❪"code/utilities/linguistics/speak/word_speaker"❫
❪"code/utilities/colors/converters/converters"❫
❪"code/utilities/colors/transformers/color_transitioner"❫
❪"code/utilities/peripheral/keyboard/F310_gamepad/functions/f310_event_synthesizer"❫
❪"code/utilities/games/ur/ur_logic"❫
❪"code/utilities/random/dice/ur/ur_dice"❫
⚞⚟

◀public: static▶ void ☀Run(Game_State & state, Ur_Player_State & pstate, std::vector<F310_Event> const& events) ❰
    Handle_Roll_Phase(state,pstate,events);
❱

◀private: static▶ void ☀Handle_Roll_Phase(Game_State & state, Ur_Player_State & pstate, std::vector<F310_Event> const& events) ❰

    if (In_Vector(events,F310_Event::BUTTONS_RIGHT_CLICKED)){
        Roll_Player_Dice(state,pstate);
    }
❱

◀private: static▶ void ☀Roll_Player_Dice(Game_State & state, Ur_Player_State & pstate) ❰

    //roll the 4 dice of the game
    pstate.dice = Ur_Dice::Roll();
    
    //calculate the total
    pstate.roll = 0;
    if (pstate.dice[0] == 0 || pstate.dice[0] == 1){
        pstate.roll++;
    }
    if (pstate.dice[1] == 0 || pstate.dice[1] == 1){
        pstate.roll++;
    }
    if (pstate.dice[2] == 0 || pstate.dice[2] == 1){
        pstate.roll++;
    }
    if (pstate.dice[3] == 0 || pstate.dice[3] == 1){
        pstate.roll++;
    }
    
    //indicate that the dice has been rolled
    pstate.phase = Player_Phase::CHOOSE;
    pstate.possible_selections = Ur_Logic::Player_Piece_Choices(state.ur_state,pstate.roll);
❱