class
❪string❫
❪iostream❫
❪memory❫
❪utility❫
❪memory❫
❪"code/programs/games/ur/assets/assets"❫
❪"code/programs/games/ur/state/game_state"❫
❪SFML/Window.hpp❫
❪SFML/Audio.hpp❫
⚯
❪"code/utilities/peripheral/sound/sfml/sound_loader"❫
❪"code/utilities/fonts/font_files/droid_sans_mono"❫
❪"code/utilities/graphics/sfml/sprite/textured_sprite_loader"❫
❪"code/utilities/fonts/font_files/droid_sans_mono"❫
❪"code/utilities/fonts/sfml/font_loader"❫
⚞⚟

◀public: static▶ Assets ☀Load(Game_State const& state) ❰
    Assets x;
    
    
    Font_Loader::Load_Font(x.main_font,Droid_Sans_Mono::Get());
    
   x.game_state.setFont(x.main_font);
   x.game_state.setCharacterSize(40);
   x.game_state.setPosition(10,10);
   //x.game_state.setFillColor(sf::Color(0,0,0,255));
   
   
    x.piece_selector = sf::CircleShape(20, 3);
    x.piece_selector.setFillColor(sf::Color(166, 71, 114,255));
    x.piece_selector.setPosition(-100,-100);
    x.piece_selector.rotate(180);
   
    
    
    
    
    x.main_bg.sprite.setPosition(0,0);
    Textured_Sprite_Loader::Load_Textured_Sprite(x.main_bg,"/home/laptop/Desktop/forrest_bg.jpg");
    
    x.spots = Build_Typical_Board_Spots();
    
    Set_Player_Sprites(x,state);
    
    
    
    return x;
❱

◀private: static▶ void ☀Set_Player_Sprites(Assets & x, Game_State const& state) ❰

    //generic rec
    sf::RectangleShape rec;
    auto spot_size = sf::Vector2f(100, 100);
    auto p1_color = sf::Color(166, 71, 114,255);
    auto p2_color = sf::Color(94, 128, 196,255);
    rec.setPosition(100,100);
    rec.setSize(spot_size);
    
    rec.setFillColor(p1_color);
    for (auto const& it: state.ur_state.players[0].pieces){
        x.p1_pieces.emplace_back(rec);
    }
    
    rec.setFillColor(p2_color);
    for (auto const& it: state.ur_state.players[1].pieces){
        x.p2_pieces.emplace_back(rec);
    }
    
❱

◀private: static▶ Named_Rectangles ☀Build_Typical_Board_Spots() ❰

    auto spot_size = sf::Vector2f(200, 200);
    
    auto fill_color = sf::Color(72, 163, 133,100);
    auto start_fill_color = sf::Color(157, 212, 171,0);
    auto end_fill_color = sf::Color(157, 212, 171,0);
    
    
    auto border_color = sf::Color(255,255,255);
    auto start_border_color = sf::Color(255,255,255,0);
    auto end_border_color = sf::Color(255,255,255,0);
    
    Named_Rectangles x;
    Named_Rectangle rectangle;
    rectangle.shape.setSize(spot_size);
    rectangle.shape.setPosition(150,210);
    rectangle.shape.setFillColor(fill_color);
    rectangle.shape.setOutlineColor(border_color);
    rectangle.shape.setOutlineThickness(3);
    
    rectangle.name = "p2_4";
    x.shapes.emplace_back(rectangle);
    
    rectangle.name = "shared_1";
    Full_Move_Down(rectangle.shape);
    x.shapes.emplace_back(rectangle);
    
    rectangle.name = "p1_4";
    Full_Move_Down(rectangle.shape);
    x.shapes.emplace_back(rectangle);
    
    rectangle.name = "p1_3";
    Full_Move_Right(rectangle.shape);
    x.shapes.emplace_back(rectangle);
    
    rectangle.name = "p1_2";
    Full_Move_Right(rectangle.shape);
    x.shapes.emplace_back(rectangle);
    
    rectangle.name = "p1_1";
    Full_Move_Right(rectangle.shape);
    x.shapes.emplace_back(rectangle);
    
    rectangle.name = "shared_4";
    Full_Move_Up(rectangle.shape);
    x.shapes.emplace_back(rectangle);
    
    rectangle.name = "p2_1";
    Full_Move_Up(rectangle.shape);
    x.shapes.emplace_back(rectangle);
    
    rectangle.name = "p2_2";
    Full_Move_Left(rectangle.shape);
    x.shapes.emplace_back(rectangle);
    
    rectangle.name = "shared_3";
    Full_Move_Down(rectangle.shape);
    x.shapes.emplace_back(rectangle);
    
    rectangle.name = "shared_2";
    Full_Move_Left(rectangle.shape);
    x.shapes.emplace_back(rectangle);
    
    rectangle.name = "p2_3";
    Full_Move_Up(rectangle.shape);
    x.shapes.emplace_back(rectangle);
    
    rectangle.name = "shared_5";
    Full_Move_Down(rectangle.shape);
    Full_Move_Right(rectangle.shape);
    Full_Move_Right(rectangle.shape);
    Full_Move_Right(rectangle.shape);
    x.shapes.emplace_back(rectangle);
    
    rectangle.name = "shared_6";
    Full_Move_Right(rectangle.shape);
    x.shapes.emplace_back(rectangle);
    
    rectangle.name = "shared_7";
    Full_Move_Right(rectangle.shape);
    x.shapes.emplace_back(rectangle);
    
    rectangle.name = "shared_8";
    Full_Move_Right(rectangle.shape);
    x.shapes.emplace_back(rectangle);
    
    rectangle.name = "p2_end_1";
    Full_Move_Up(rectangle.shape);
    x.shapes.emplace_back(rectangle);
    
    rectangle.name = "p2_end_2";
    Full_Move_Left(rectangle.shape);
    x.shapes.emplace_back(rectangle);
    
    rectangle.name = "p1_end_2";
    Full_Move_Down(rectangle.shape);
    Full_Move_Down(rectangle.shape);
    x.shapes.emplace_back(rectangle);
    
    rectangle.name = "p1_end_1";
    Full_Move_Right(rectangle.shape);
    x.shapes.emplace_back(rectangle);
    
    //set end parts
    rectangle.shape.setFillColor(end_fill_color);
    rectangle.shape.setOutlineColor(end_border_color);
    rectangle.name = "p1_end_3";
    Full_Move_Left(rectangle.shape);
    Full_Move_Left(rectangle.shape);
    x.shapes.emplace_back(rectangle);
    
    rectangle.name = "p2_end_3";
    Full_Move_Up(rectangle.shape);
    Full_Move_Up(rectangle.shape);
    x.shapes.emplace_back(rectangle);
    
    //set start parts
    rectangle.name = "p2_start";
    rectangle.shape.setFillColor(start_fill_color);
    rectangle.shape.setOutlineColor(start_border_color);
    Full_Move_Left(rectangle.shape);
    x.shapes.emplace_back(rectangle);
    
    rectangle.name = "p1_start";
    Full_Move_Down(rectangle.shape);
    Full_Move_Down(rectangle.shape);
    x.shapes.emplace_back(rectangle);
    
    
    return x;
❱







//todo: put into library
◀private: static▶ void ☀Full_Move_Down(sf::RectangleShape & x) ❰
    auto size = x.getSize();
    auto outline_thickness = x.getOutlineThickness();
    x.move(0,size.x + outline_thickness);
❱
◀private: static▶ void ☀Full_Move_Up(sf::RectangleShape & x) ❰
    auto size = x.getSize();
    auto outline_thickness = x.getOutlineThickness();
    x.move(0,(size.x + outline_thickness) * -1);
❱
◀private: static▶ void ☀Full_Move_Right(sf::RectangleShape & x) ❰
    auto size = x.getSize();
    auto outline_thickness = x.getOutlineThickness();
    x.move(size.x + outline_thickness,0);
❱
◀private: static▶ void ☀Full_Move_Left(sf::RectangleShape & x) ❰
    auto size = x.getSize();
    auto outline_thickness = x.getOutlineThickness();
    x.move((size.x + outline_thickness) * -1,0);
❱

