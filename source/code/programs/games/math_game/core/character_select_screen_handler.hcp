class
❪string❫
❪iostream❫
❪vector❫
❪"code/programs/games/math_game/assets/assets"❫
❪SFML/Window.hpp❫
❪SFML/Window/Joystick.hpp❫
❪SFML/Graphics.hpp❫
❪SFML/Graphics/Transformable.hpp❫
❪"code/utilities/peripheral/keyboard/joycons/joycon_state_getter"❫
❪"code/utilities/formats/json/converters/lib"❫
❪"code/programs/games/math_game/assets/assets_loader"❫
❪"code/programs/games/math_game/state/game_state"❫
❪"code/utilities/time/timer_transition"❫
❪"code/utilities/types/vectors/observers/lib"❫
⚯
⚞⚟

◀public: static▶ void ☀Handle(sf::RenderWindow & window, Game_State & state, Assets & assets)❰

    Player_Hits_Back(window,state,assets);
    Players_Want_To_Change_Character(window,state,assets);
    Player_Hits_Accept(window,state,assets);
    Players_Are_Ready_To_Play(window,state,assets);
❱

◀private: static▶ void ☀Player_Hits_Back(sf::RenderWindow & window, Game_State & state, Assets & assets)❰

    //one of the players wants to go back a page
    if (state.joycons_current.left.left && !state.player1_ready){
        state.screen = Current_Screen::MAIN;
    }
    if (state.joycons_current.right.left && !state.player2_ready){
        state.screen = Current_Screen::MAIN;
    }
❱
◀private: static▶ void ☀Player_Hits_Accept(sf::RenderWindow & window, Game_State & state, Assets & assets)❰
❱
◀private: static▶ void ☀Players_Are_Ready_To_Play(sf::RenderWindow & window, Game_State & state, Assets & assets)❰

    //decide whether to leave main screen
    if (state.player1_ready && state.player2_ready){
        
        Timer_Transition::Handle_Transition(state.transition_clock,[&](){
            state.player1_ready = false;
            state.player2_ready = false;
            state.screen = Current_Screen::GAME_SELECT;
            assets.snd_lets_go_fast.sound.play();
        });
    }
❱

◀private: static▶ void ☀Players_Want_To_Change_Character(sf::RenderWindow & window, Game_State & state, Assets & assets)❰

    //player 1 wants to see the next player
    if (state.joycons_current.left.joystick.right && !state.joycons_previous.left.joystick.right){
        
        //switch their character
        Set_Next_Index_In_Round_Robin(assets.characters,state.player1_selected_character);
        Show_Player1_Character_Change(state,assets);
        
    }
    
    //player 1 wants to see the previous player
    if (state.joycons_current.left.joystick.left && !state.joycons_previous.left.joystick.left){

        //switch their character
        Set_Previous_Index_In_Round_Robin(assets.characters,state.player1_selected_character);
        Show_Player1_Character_Change(state,assets);
    }
    
    //player 2 wants to see the next player
    if (state.joycons_current.right.joystick.right && !state.joycons_previous.right.joystick.right){
        
        Set_Next_Index_In_Round_Robin(assets.characters,state.player2_selected_character);
        Show_Player2_Character_Change(state,assets);
        
    }
    
    //player 2 wants to see the previous player
    if (state.joycons_current.right.joystick.left && !state.joycons_previous.right.joystick.left){
        
        
        Set_Previous_Index_In_Round_Robin(assets.characters,state.player2_selected_character);
        Show_Player2_Character_Change(state,assets);
    }
❱


◀private: static▶ void ☀Show_Player1_Character_Change(Game_State & state, Assets & assets)❰
        assets.character_selection.player1_character_title.setString(assets.characters[state.player1_selected_character].name);
        assets.character_selection.player1_character_selection = assets.characters[state.player1_selected_character].normal.sprite;
❱
◀private: static▶ void ☀Show_Player2_Character_Change(Game_State & state, Assets & assets)❰
        assets.character_selection.player2_character_title.setString(assets.characters[state.player2_selected_character].name);
        assets.character_selection.player2_character_selection = assets.characters[state.player2_selected_character].normal.sprite;
❱