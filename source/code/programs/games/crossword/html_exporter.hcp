class
❪string❫
❪"code/programs/games/crossword/settings/crossword_puzzle_settings"❫
❪"code/utilities/colors/defaults/color_palettes"❫
❪"code/utilities/language_basic/std_hackery/std_aliases"❫
⚯
❪iostream❫
❪"code/utilities/types/vectors/creators/lib"❫
❪"code/utilities/types/vectors/observers/lib"❫
❪"code/utilities/filesystem/files/creating/lib"❫
❪"code/utilities/types/strings/transformers/appending/lib"❫
❪"code/utilities/random/lib"❫
❪"code/utilities/formats/html/basic_html_template_getter"❫
⚞⚟

◀public: static▶ void ☀Export(string_grids const& grids, Crossword_Puzzle_Settings const& settings, std::string const& file_name)❰

    //create artifact
    auto str = As_Html_Format(grids,settings);
    Write_To_File(file_name,str);
❱

◀private: static▶ std::string ☀As_Html_Format(string_grids const& grids, Crossword_Puzzle_Settings const& settings)❰
    
    
    
    //build css
    std::string css;
    Append_With_Newline(css,"table { ");
    //Append_With_Newline(css,"border: 0px solid black; ");
    Append_With_Newline(css,"font-size: 32px; ");
    Append_With_Newline(css,"}");
    
    Append_With_Newline(css,"th, td { ");
    //Append_With_Newline(css,"border: 1px solid black; ");
    Append_With_Newline(css,"font-size: 20px; ");
    Append_With_Newline(css,"}");
    
    Append_With_Newline(css,"table { ");
    Append_With_Newline(css,"width: 25%; ");
    Append_With_Newline(css,"}");
    
    //Append_With_Newline(css,"table { padding-bottom: 60px; }");
    Append_With_Newline(css,"tr { text-align: center; }");
    
    //build body
    std::string body;
    Append_With_Newline(body,Get_Title(grids,settings));
    
    //puzzle box and word bank
    
    for (auto const& grid: grids){
        Append_With_Newline(body,As_Html_Table(grid,settings.letter_colors));
    }
    Append_With_Newline(body,As_Html_Table(settings.words,settings.words_per_row));
    
    
    
    
    //build html
    std::string html = Basic_Html_Template_Getter::Get("Crossword",css,body);
    return html;
❱

◀private: static▶ std::string ☀Get_Title(string_grids const& grids, Crossword_Puzzle_Settings const& settings)❰
    
    
    //TODO: move
    bool print_size = true;
    bool print_number_of_words = false;
    
    std::string x;
    Append(x,"<strong>");
    Append_With_Newline(x,settings.title);
    
    
    //print size
    for (auto const& grid: grids){
        if (print_size){
            Append(x,"(");
            Append_With_Newline(x,std::to_string(grid.size()) + "x" + std::to_string(grid[0].size()));
            Append(x,")");
            Append(x," ");
        }
    }
    
    //print number of words
    if (print_number_of_words){
        Append(x,"(");
        Append_With_Newline(x,std::to_string(settings.words.size()) + " words");
        Append(x,")");
    }
    
    
    Append_With_Newline(x,"</strong>");
    return x;
❱


◀private: static▶ std::string ☀As_Html_Table(std::vector<std::vector<std::string>> const& grid, std::vector<Rgb_Color> const& colors)❰

    std::string x;
    Append_With_Newline(x,"<table>");
    for (auto const& a: grid){
        Append_With_Newline(x,"<tr>");
        for (auto const& b: a){
            Append(x,"<td ");
            if (b == "A" || b == "E" || b == "I" || b == "O" || b == "U" || b == "Y"){
                std::vector<Rgb_Color> colors2;
                Rgb_Color rgb;
                rgb.r = 0;
                rgb.g = 117;
                rgb.b = 163;
                colors2.emplace_back(rgb);
                Append(x,Css_Style_Property_For_Random_Color(colors2));
            }
            else{
                Append(x,Css_Style_Property_For_Random_Color(colors));
            }
            Append_With_Newline(x,">");
            Append_With_Newline(x,b);
            Append_With_Newline(x,"</td>");
        }
        Append_With_Newline(x,"</tr>");
    }
    Append_With_Newline(x,"</table>");
    return x;
❱

◀private: static▶ std::string ☀Css_Style_Property_For_Random_Color(std::vector<Rgb_Color> const& colors)❰
    auto rcolor = Get_Random_Element(colors);
    std::string x = "style=\"";
    Append(x,"color:rgb(");
    Append(x,std::to_string(rcolor.r));
    Append(x,",");
    Append(x,std::to_string(rcolor.g));
    Append(x,",");
    Append(x,std::to_string(rcolor.b));
    Append(x,");\"");
    return x;
❱


◀private: static▶ std::string ☀As_Html_Table(std::vector<std::string> const& words, int per_row)❰

    std::string x;
    Append_With_Newline(x,"<table>");
    int count = 0;
    Append_With_Newline(x,"<tr>");
    for (auto const& word: words){
        if (count == per_row){
            count = 0;
            Append_With_Newline(x,"</tr>");
            Append_With_Newline(x,"<tr>");
        }
        
            Append_With_Newline(x,"<td>");
            Append_With_Newline(x,word);
            Append_With_Newline(x,"</td>");
        
        ++count;
    }
    Append_With_Newline(x,"</tr>");
    Append_With_Newline(x,"</table>");
    return x;
❱