class
❪string❫
❪iostream❫
❪algorithm❫
❪"include/crow.h"❫
❪"code/utilities/program/call/lib.hpp"❫
❪"code/utilities/data_structures/playing_card"❫
⚯
❪"code/utilities/formats/html/basic_html_template_getter"❫
❪"code/utilities/assets/playing_card_assets"❫
❪"code/utilities/image/data_uri_getter"❫
⚞⚟

◀public: static▶ void ☀Run()❰
 
    
    crow::SimpleApp app;
    
    auto cards = Playing_Card_all_enums();

    CROW_ROUTE(app, "/")([&](){
        return "Board";
    });
    
    CROW_ROUTE(app, "/player1")([&](){
        
        return Player1_Draw(cards);
    });
    
    CROW_ROUTE(app, "/player2")([&](){
        
        return Player2_Draw(cards);
    });
    
    
    app.port(18080).multithreaded().run();
❱


◀private: static▶ std::string ☀Player1_Draw(std::vector<Playing_Card> & cards)❰


    std::random_shuffle(cards.begin(),cards.end());

    std::string title = "title";
    std::string css;
    //css += "img { display: block; }";
    css +=  "img { vertical-align: bottom; }";
    std::string body;

    int counter = 0;
    for (auto const& card: cards) {
        body += Data_Uri_Getter::Get_Img_Tag(Playing_Card_Assets::Get(card));
        counter++;
        
        if (counter == 6) {
            counter = 0;
            body += "<br>";
        }
    }


    
    body += Data_Uri_Getter::Get_Img_Tag(Playing_Card_Assets::Get("card_1_clover.png"));
    // body += Data_Uri_Getter::Get_Img_Tag(Playing_Card_Assets::Get("card_2_clover.png"));
    // body += "<br>";
    // body += Data_Uri_Getter::Get_Img_Tag(Playing_Card_Assets::Get("card_1_clover.png"));
    // body += Data_Uri_Getter::Get_Img_Tag(Playing_Card_Assets::Get("card_2_clover.png"));
    
    return Basic_Html_Template_Getter::Get(title,css,body);
❱

◀private: static▶ std::string ☀Player2_Draw(std::vector<Playing_Card> & cards)❰

    std::string title = "title";
    std::string css = "";
    std::string body = "hello world";
    return Basic_Html_Template_Getter::Get(title,css,body);
❱