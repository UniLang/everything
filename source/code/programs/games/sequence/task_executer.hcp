class
❪string❫
❪iostream❫
❪algorithm❫
❪random❫
❪"include/crow.h"❫
❪"code/utilities/program/call/lib.hpp"❫
❪"code/utilities/data_structures/playing_card"❫
⚯
❪"code/utilities/formats/html/basic_html_template_getter"❫
❪"code/utilities/assets/playing_card_assets"❫
❪"code/utilities/image/data_uri_getter"❫
❪"code/utilities/types/vectors/transformers/lib"❫
⚞⚟

◀public: static▶ void ☀Run()❰
 
    
    crow::SimpleApp app;
    
    //get standard 52 deck
    auto cards = Get_Board_Deck();

    CROW_ROUTE(app, "/")([&](){
        return "Board";
    });
    
    CROW_ROUTE(app, "/player1")([&](){
        
        return Player1_Draw(cards);
    });
    
    CROW_ROUTE(app, "/player1_pick<int>")([&](int i){
        
        return "";
    });
    
    CROW_ROUTE(app, "/player2_pick<int>")([&](int i){
        
        return "";
    });
    
    
    app.port(18080).multithreaded().run();
❱

◀private: static▶ std::vector<Playing_Card>  ☀Get_Board_Deck()❰

    //get standard 52 deck
    auto cards = Playing_Card_all_enums();
    
    std::cout << cards.size() << std::endl;
    
    //shuffle
    std::random_device rd;
    std::mt19937 g(rd());
    std::shuffle(cards.begin(),cards.end(),g);
    
    //remove the jacks
    Remove_Element(cards,Playing_Card::CARD_11_CLOVER);
    Remove_Element(cards,Playing_Card::CARD_11_DIAMOND);
    Remove_Element(cards,Playing_Card::CARD_11_HEART);
    Remove_Element(cards,Playing_Card::CARD_11_SPADE);
    
    std::cout << cards.size() << std::endl;
    
    return cards;
    
❱



◀private: static▶ std::string ☀Player1_Draw(std::vector<Playing_Card> & cards)❰


    cards = Get_Board_Deck();

    std::string title = "title";
    std::string css;
    //css += "img { display: block; }";
    css +=  "img {  vertical-align: bottom; width: 50px; }";
    
    
    css +=  "div { display: flex; }";
    std::string body;

    int counter = 1;
    body += "<div>";
    for (auto const& card: cards) {
        body += "<a href='myfile.htm'>";
        body += Data_Uri_Getter::Get_Img_Tag(Playing_Card_Assets::Get(card));
        body += "</a>";
        
        if (counter == 6) {
            counter = 0;
            body += "</div>";
            body += "<div>";
            //body += "<br>";
        }
        
        counter++;
    }


    
    
    return Basic_Html_Template_Getter::Get(title,css,body);
❱

◀private: static▶ std::string ☀Player2_Draw(std::vector<Playing_Card> & cards)❰

    std::string title = "title";
    std::string css = "";
    std::string body = "hello world";
    return Basic_Html_Template_Getter::Get(title,css,body);
❱