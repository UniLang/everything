class
❪string❫
❪iostream❫
❪vector❫
❪"code/programs/games/ily3000/assets/assets"❫
❪SFML/Window.hpp❫
❪SFML/Window/Joystick.hpp❫
❪SFML/Graphics.hpp❫
❪SFML/Graphics/Transformable.hpp❫
❪"code/utilities/peripheral/keyboard/joycons/joycon_state_getter"❫
❪"code/utilities/formats/json/converters/lib"❫
❪"code/programs/games/ily3000/assets/assets_loader"❫
❪"code/programs/games/ily3000/state/game_state"❫
❪"code/utilities/math/math"❫
⚯
❪"code/utilities/peripheral/keyboard/joycons/joystick_rotating_checker"❫
⚞⚟

◀public: static▶ void ☀Run_Frame_Logic(sf::RenderWindow & window, sf::Time const& TimePerFrame, Game_State & state, Assets & assets) ❰
    
    //make decisions based on user action
    state.joycons_current = Joycon_State_Getter::Get();
    
    Handle_Score_Change(window,state,assets);
    
    state.joycons_previous = state.joycons_current;
❱

◀private: static▶ void ☀Handle_Score_Change(sf::RenderWindow & window, Game_State & state, Assets & assets)❰


    //level 1
    if (state.score < 100){
        if (!state.joycons_previous.left.right && state.joycons_current.left.right){
            ++state.score;
        }
        if (!state.joycons_previous.right.right && state.joycons_current.right.right){
            ++state.score;
        }
    }

    //level 2
    if (state.score >= 100 && state.score < 350){
        if (Joystick_Rotating_Checker::Is_Rotated_Clockwise(state.joycons_previous.left,state.joycons_current.left)){
            ++state.score;
        }
        if (Joystick_Rotating_Checker::Is_Rotated_Clockwise(state.joycons_previous.right,state.joycons_current.right)){
            ++state.score;
        }
    }
    
    //level 3
    if (state.score >= 350 && state.score < 999){
        if (state.joycons_current.left.up){
            ++state.score;
        }
        if (state.joycons_current.right.up){
            ++state.score;
        }
    }
    
    //level 4
    if (state.score >= 999 && state.score < 1350){
        if (Joystick_Rotating_Checker::Is_Rotated_CounterClockwise(state.joycons_previous.left,state.joycons_current.left)){
            ++state.score;
        }
        if (Joystick_Rotating_Checker::Is_Rotated_CounterClockwise(state.joycons_previous.right,state.joycons_current.right)){
            ++state.score;
        }
    }
    
    //level 5
    if (state.score >= 1350 && state.score < 2000){
        if (state.joycons_current.left.up && state.joycons_current.left.down && state.joycons_current.left.left && state.joycons_current.left.right){
            state.score += 4;
        }
        if (state.joycons_current.right.up && state.joycons_current.right.down && state.joycons_current.right.left && state.joycons_current.right.right){
            state.score += 4;
        }
    }
    
    //level 6
    if (state.score >= 2000 && state.score < 2999){
        
        if (state.joycons_current.left.side_z || state.joycons_current.right.side_z){
            state.score += 20;
            if (state.score > 2999){
                state.score = 2999;
            }
        }
    }
    
    //level 7
    if (state.score >= 2999){
        if (state.joycons_current.left.joystick.button){
            ++state.score;
        }
        if (state.joycons_current.right.joystick.button){
            ++state.score;
        }
    }
    
    assets.score.setString(std::to_string(state.score));
    
    if (state.score >= 3000){
        state.score = 3000;
        assets.score.setString("YOU WIN!");
    }
    
    
    auto new_title_size = Math::map_value_across_range(state.score,0,3000,1,400);
    state.color.r = Math::map_value_across_range(state.score,0,3000,0,117);
    state.color.g = Math::map_value_across_range(state.score,0,3000,0,38);
    state.color.b = Math::map_value_across_range(state.score,0,3000,0,85);
    
    assets.title_text.setCharacterSize(new_title_size);
    //Center_Text(assets.title_text);
❱












