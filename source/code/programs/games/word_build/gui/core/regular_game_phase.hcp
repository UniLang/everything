class
❪string❫
❪iostream❫
❪vector❫
❪thread❫
❪algorithm❫
❪"code/programs/games/word_build/gui/assets/assets"❫
❪SFML/Window.hpp❫
❪SFML/Window/Joystick.hpp❫
❪SFML/Graphics.hpp❫
❪SFML/Graphics/Transformable.hpp❫
❪"code/utilities/peripheral/keyboard/joycons/joycon_state_getter"❫
❪"code/utilities/peripheral/keyboard/F310_gamepad/functions/f310_gamepads_state_getter"❫
❪"code/utilities/formats/json/converters/lib"❫
❪"code/programs/games/word_build/gui/assets/assets_loader"❫
❪"code/programs/games/word_build/gui/state/game_state"❫
❪"code/utilities/math/math"❫
❪"code/utilities/types/vectors/observers/lib"❫
❪"code/utilities/peripheral/keyboard/F310_gamepad/data/f310_events"❫
❪"code/programs/games/word_build/gui/core/regular_actions/regular_action"❫
⚯
❪"code/utilities/peripheral/keyboard/joycons/joystick_rotating_checker"❫
❪"code/utilities/linguistics/build_word/game/puzzle_builder"❫
❪"code/utilities/types/vectors/observers/lib"❫
❪"code/utilities/types/vectors/transformers/lib"❫
❪"code/utilities/types/strings/observers/converting/lib"❫
❪"code/utilities/types/map/lib"❫
❪"code/utilities/types/vectors/observers/size_frequency_counter"❫
❪"code/utilities/linguistics/speak/word_speaker"❫
❪"code/utilities/colors/converters/converters"❫
❪"code/utilities/colors/transformers/color_transitioner"❫
❪"code/programs/games/word_build/gui/core/regular_actions/regular_actions_getter"❫
⚞⚟

◀public: static▶ void ☀Run_Phase(F310_Events const& events, Game_State & state, Assets & assets) ❰

    //handle user input
    Handle_Player_Input(state,assets);

    Update_Game_State(state,assets);
❱


◀private: static▶ void ☀Handle_Player_Input(Game_State & state, Assets & assets)❰

    //get player actions
    auto p1_choice = Regular_Actions_Getter::Get(state.controller.left);
    auto p2_choice = Regular_Actions_Getter::Get(state.controller.right);
    
    //record these actions
    if (p1_choice != Regular_Action::NONE){
        state.p1_state.moves.emplace_back(p1_choice);
    }
    if (p2_choice != Regular_Action::NONE){
        state.p2_state.moves.emplace_back(p2_choice);
    }
    
    Handle_Player_Selections(state,p1_choice,state.p1_state,assets.p1);
    Handle_Player_Selections(state,p2_choice,state.p2_state,assets.p2);
    
    Player_Match_Check(state.p1_state,assets.p1,state,assets);
    Player_Match_Check(state.p2_state,assets.p2,state,assets);
    
    Handle_Player_Game_Changes(state,p1_choice,assets);
    Handle_Player_Game_Changes(state,p2_choice,assets);
    
    
❱


◀private: static▶ void ☀Handle_Player_Game_Changes(Game_State & state, Regular_Action const& action, Assets & assets)❰

    //restart the game
    if (action == Regular_Action::RESTART_GAME){
        state.phase = Game_Phase::STARTING_GAME;
    }
    
    //end the game and show all the answers
    if (action == Regular_Action::END_GAME){
        state.phase = Game_Phase::END_GAME;
        Skipped_End_Game_Changes(state,assets);
    }
    
    //back to menu
    if (action == Regular_Action::GO_TO_MENU){
        state.phase = Game_Phase::MAIN_MENU;
    }
❱


◀private: static▶ void ☀Handle_Player_Selections(Game_State & state, Regular_Action const& action, User_State & player_state, User_Assets & assets)❰

    //set player pointer
    if (action == Regular_Action::MOVE_LEFT){
        Set_Previous_Index_In_Round_Robin(state.puzzle.letters,player_state.current_letter_selection);
        
        //was it a drag select?
        // if (phases.current.buttons.right){
        //     Make_Selection(state,phases,player_state,assets);
        // }
    }
    if (action == Regular_Action::MOVE_RIGHT){
        Set_Next_Index_In_Round_Robin(state.puzzle.letters,player_state.current_letter_selection);
        
        //was it a drag select?
        // if (phases.current.buttons.right){
        //     Make_Selection(state,phases,player_state,assets);
        // }
    }
    assets.pointer.setPosition((player_state.current_letter_selection*100) + assets.pointer_x_offset,assets.pointer_y_offset);
    
    //set player selection
    if (action == Regular_Action::SELECT){
        Make_Selection(state,player_state,assets);
    }
    
    //drop player selection
    if (action == Regular_Action::CLEAR){
        if (!player_state.selected_letters.empty()){
            Actually_Clear_Player_Selections(player_state,assets);
        }
        else {
            Revive_Player_Selections(player_state,assets);
        }
    }
    
    //backspace selection
    if (action == Regular_Action::BACKSPACE){
        Safe_Pop_Back(player_state.selected_letters);
        Safe_Pop_Back(assets.selections);
    }
❱

◀private: static▶ void ☀Actually_Clear_Player_Selections(User_State & player_state, User_Assets & assets)❰
        player_state.last_selected_letters_before_clear = player_state.selected_letters;
        player_state.selected_letters.clear();
        assets.selections.clear();
❱

◀private: static▶ void ☀Revive_Player_Selections(User_State & player_state, User_Assets & assets)❰
    player_state.selected_letters = player_state.last_selected_letters_before_clear;
    
    for (auto const& it: player_state.selected_letters){
        sf::RectangleShape rectangle(sf::Vector2f(80, 5));
        rectangle.setPosition(205 + (100 * it),assets.selection_y_offset);
        rectangle.setFillColor(player_state.color);
        assets.selections.emplace_back(rectangle);
    }
❱

◀private: static▶ void ☀Make_Selection(Game_State & state, User_State & player_state, User_Assets & assets)❰
    if (!In_Vector(player_state.selected_letters,player_state.current_letter_selection)){
        player_state.selected_letters.emplace_back(player_state.current_letter_selection);
        
        sf::RectangleShape rectangle(sf::Vector2f(80, 5));
        rectangle.setPosition(205 + (100 * player_state.current_letter_selection),assets.selection_y_offset);
        rectangle.setFillColor(player_state.color);
        assets.selections.emplace_back(rectangle);
    }
❱

◀private: static▶ void ☀Player_Match_Check(User_State & user, User_Assets & user_assets, Game_State & state, Assets & assets)❰


    auto current_word = Get_Current_Word_From_Selected_Letters(user,state);
    
    auto found_index = Get_Index_Of_Element_If_Exists(state.puzzle.words,current_word);
    if (found_index != -1){
        if (No_User_Has_Found_Word(found_index,assets,state)){
            Player_Found_Answer(state,user,user_assets,assets,found_index);
            state.no_action_countdown.restart();
        }
        else if (User_Did_Not_Find_Word_First(found_index,user,assets,state)){
            Player_Found_Other_Players_Answer(state,user,user_assets,assets,found_index);
        }
    }
❱

◀private: static▶ std::string ☀Get_Current_Word_From_Selected_Letters(User_State & user, Game_State & state)❰
    std::string current_word;
    for (auto const& it: user.selected_letters){
        current_word += state.puzzle.letters[it];
    }
    return current_word;
❱


◀private: static▶ bool ☀No_User_Has_Found_Word(int found_index, Assets & assets, Game_State & state)❰
    if (assets.answers[found_index].getFillColor() == state.bg_color){
        return true;
    }
    return false;
❱

◀private: static▶ bool ☀User_Did_Not_Find_Word_First(int found_index, User_State & user, Assets & assets, Game_State & state)❰
    if (assets.answers[found_index].getFillColor() != state.bg_color && assets.answers[found_index].getFillColor() != user.color){
        return true;
    }
    return false;
❱


◀private: static▶ int ☀Words_Blocked_By_P1(Assets & assets, Game_State & state)❰

    int results = 0;
    for (auto const& it: assets.answers){
        if (it.getFillColor() == state.p1_state.color && it.getOutlineColor() == state.p2_state.color){
            results++;
        }
    }
    return results;
❱
◀private: static▶ int ☀Words_Blocked_By_P2(Assets & assets, Game_State & state)❰

    int results = 0;
    for (auto const& it: assets.answers){
        if (it.getFillColor() == state.p2_state.color && it.getOutlineColor() == state.p1_state.color){
            results++;
        }
    }
    return results;
❱


◀private: static▶ void ☀Player_Found_Other_Players_Answer(Game_State & state, User_State & user, User_Assets & user_assets, Assets & assets, size_t index)❰
    assets.answers[index].setOutlineColor(user.color);
    assets.answers[index].setOutlineThickness(2);
❱

◀private: static▶ void ☀Player_Found_Answer(Game_State & state, User_State & user, User_Assets & user_assets, Assets & assets, size_t index)❰

    // set the color
    assets.answers[index].setFillColor(user.color);
    Add_Game_Answer(user,assets,index);
    
    //increment the player's score
    user_assets.score.setString(std::to_string(as_signed(user_assets.score.getString()) + 1));
    
    
    //color the letter words of the user's just gotten combination
    //currently we do this just for fun.
    //its helps show which letters are hot by which users.
    for (auto const& it: user.selected_letters){
        
        //but how do we colors them?
        //lets slowly transition them from where they are
        
        //the transition from its current color to the player's color
        Rgb_Color_Transition transition;
        transition.from = Converters::From_SFML(assets.letters[it].getFillColor());
        transition.to = Converters::From_SFML(user.color);
        
        //the granularity of the transition (take a step in that conversion)
        auto transition_color = Color_Transitioner::Transition_Colors(transition,10)[1];
        
        //convert
        assets.letters[it].setFillColor(Converters::To_SFML(transition_color));
    }
    
    //clear the player's selection
    Actually_Clear_Player_Selections(user,user_assets);
    
    Handle_User_Combo_Behaviour(user,user_assets);
    
    
    //say the word (fire and forget style)
    //we take things by copy because the scope is about to end.
    // auto word_to_say = assets.answers[index].getString().toAnsiString();
    // std::thread([=](){ 
    //     Word_Speaker::Speak(word_to_say);
    // }).detach();
❱

◀private: static▶ void ☀Add_Game_Answer(User_State & user, Assets & assets, size_t index) ❰

    sf::Text temp;
    temp.setFont(assets.main_font);
    temp.setCharacterSize(25);
    temp.setFillColor(user.color);
    
    int width = 1260;
    int height = 100;
    
    //modify width/height based on number of already gotten words
    auto columns = assets.game_answers.size() / 24;
    width += (columns * 180);
    height += ((assets.game_answers.size() - (columns * 24)) * 40);
    
    temp.setPosition(width,height);
    temp.setString(assets.answers[index].getString());
    assets.game_answers.emplace_back(temp);
    
    
❱

◀private: static▶ void ☀Handle_User_Combo_Behaviour(User_State & user, User_Assets & user_assets)❰



    //adjust the user's current combo based on current combo meter
    sf::Time elapsed_time = user.combo_countdown.getElapsedTime();
    long since_last_combo = elapsed_time.asMilliseconds();
    if (since_last_combo <= user.current_combo_timeout_ms){
        ++user.current_combo;
        user_assets.combo_number.setString(std::to_string(user.current_combo));
        Adjust_Current_Combo_Timeout_By_Current_Combo(user);
    }
    else{
        user.current_combo = 1;
        user_assets.combo_number.setString("1");
    }
    user.combo_countdown.restart();
    
    
    bool play_combo_sfx = true;
    bool play_combo_dialogue = false;
    
    if (play_combo_sfx){
        Play_Combo_Sfx(user,user_assets);
    }
    
    if (play_combo_dialogue){
        Play_Combo_Dialogue(user,user_assets);
    }
❱

◀private: static▶ void ☀Play_Combo_Sfx(User_State & user, User_Assets & user_assets)❰

        auto index = Adjust_Index_Capped(user_assets.goodMove,user.current_combo-1);
        user_assets.goodMove[index].sound.play();
❱
◀private: static▶ void ☀Play_Combo_Dialogue(User_State & user, User_Assets & user_assets)❰

    //play sound based on current combo
    if (user.current_combo == 1){
        user_assets.combo1.sound.play();
    }
    else if (user.current_combo == 2){
        user_assets.combo2.sound.play();
    }
    else if (user.current_combo == 3){
        user_assets.combo3.sound.play();
    }
    else if (user.current_combo == 4){
        user_assets.combo4.sound.play();
    }
    else if (user.current_combo == 5){
        user_assets.combo5.sound.play();
    }
    else if (user.current_combo == 6){
        user_assets.combo6.sound.play();
    }
    else if (user.current_combo == 7){
        user_assets.combo7.sound.play();
    }
    else if (user.current_combo == 8){
        user_assets.combo8.sound.play();
    }
    else if (user.current_combo == 9){
        user_assets.combo9.sound.play();
    }
    else if (user.current_combo == 10){
        user_assets.combo10.sound.play();
    }
    else if (user.current_combo == 11){
        user_assets.combo11.sound.play();
    }
    else {
        user_assets.combo11.sound.play();
    }
❱

◀private: static▶ void ☀Adjust_Current_Combo_Timeout_By_Current_Combo(User_State & user)❰
    auto added_ms = user.current_combo * 1000;
    user.current_combo_timeout_ms = user.start_combo_timeout_ms + added_ms;
❱

◀private: static▶ void ☀Update_Game_State(Game_State & state, Assets & assets) ❰
    
    Update_Main_Timer_And_Game_End(state,assets);
    Update_No_Action_Timer_And_Game_End(state,assets);
    
    //update score
    std::string score = std::to_string(state.puzzle.words.size());
    assets.score.setString("=" + score);
    
    auto frac_per_str = Get_Fraction_And_Percentage(state,assets);
    assets.percentage.setString(frac_per_str);
    assets.end_percentage.setString(frac_per_str);
    
    //update the combo bars
    Update_Player_Combo_Bar(state.p1_state,assets.p1);
    Update_Player_Combo_Bar(state.p2_state,assets.p2);

❱

◀private: static▶ void ☀Update_Main_Timer_And_Game_End(Game_State & state, Assets & assets) ❰

    //update timer
    sf::Time elapsed_time = state.countdown.getElapsedTime();
    long time_left = state.total_round_time_s - elapsed_time.asSeconds();
    assets.countdown.setString(std::to_string(time_left));
    
    //end the game if the time has run out
    if (time_left <= 0){
        assets.countdown.setString("0");
        
        End_Game_Changes(state,assets);
        
        state.phase = Game_Phase::END_GAME;
    }
❱

◀private: static▶ void ☀Update_No_Action_Timer_And_Game_End(Game_State & state, Assets & assets) ❰

    //update timer
    sf::Time elapsed_time = state.no_action_countdown.getElapsedTime();
    long time_left = state.no_action_duration_end_game_early_s - elapsed_time.asSeconds();
    assets.no_action_countdown.setString(std::to_string(time_left));
    
    //end the game if the time has run out
    if (time_left <= 0){
        assets.no_action_countdown.setString("0");
        
        End_Game_Changes(state,assets);
        
        state.phase = Game_Phase::END_GAME;
    }
❱

◀private: static▶ std::string ☀Get_Fraction_And_Percentage(Game_State & state, Assets & assets) ❰

    int combined_total = assets.game_answers.size();
    float percentage = static_cast<float>(combined_total)/static_cast<float>(state.puzzle.words.size());
    percentage *= 100;
    auto fraction_percentage_str = std::to_string(combined_total) + " / " + std::to_string(static_cast<int>(percentage)) + "%";
    return fraction_percentage_str;
❱

◀private: static▶ void ☀Update_Player_Combo_Bar(User_State const& state, User_Assets & asset) ❰

    if (state.current_combo != 0){
        sf::Time elapsed_time = state.combo_countdown.getElapsedTime();
        long since_last_combo = elapsed_time.asMilliseconds();
        auto bar_width = Math::map_value_across_range(since_last_combo,0,state.current_combo_timeout_ms,600,0);
        auto current_size = asset.combo_bar.getSize();
        
        //the bar has run out
        if (current_size.x != 0 && bar_width == 0){
            asset.combo_out.sound.play();
            asset.combo_number.setString("");
        }
        
        //resize the bar
        current_size.x = bar_width;
        asset.combo_bar.setSize(current_size);
        
        auto combo_number_pos = asset.combo_number.getPosition();
        combo_number_pos.x = bar_width + 330;
        asset.combo_number.setPosition(combo_number_pos);
    }
❱

◀private: static▶ void ☀End_Game_Changes(Game_State & state, Assets & assets) ❰

    auto p1_words = Get_P1_Words(state,assets);
    auto p2_words = Get_P2_Words(state,assets);
    
    //adjust total victories
    if (p1_words.size() > p2_words.size()){
        state.p1_state.total_wins++;
        Get_Random_Element(assets.p1.winGame).sound.play();
    }
    else if (p1_words.size() < p2_words.size()){
        state.p2_state.total_wins++;
        Get_Random_Element(assets.p2.winGame).sound.play();
    }
    
    Show_All_The_Answers(state,assets);
    Show_More_Stats(state,assets,p1_words,p2_words);
❱

◀private: static▶ void ☀Skipped_End_Game_Changes(Game_State & state, Assets & assets) ❰

    auto p1_words = Get_P1_Words(state,assets);
    auto p2_words = Get_P2_Words(state,assets);
    
    Show_All_The_Answers(state,assets);
    Show_More_Stats(state,assets,p1_words,p2_words);
❱

◀private: static▶ void ☀Show_All_The_Answers(Game_State & state, Assets & assets) ❰
    for (auto & it: assets.answers){
        if (it.getFillColor() == state.bg_color){
            it.setFillColor(state.base_color);
        }
        it.move(-600,0);
    }
❱

◀private: static▶ int ☀Unhidden_Answers(Game_State & state, Assets & assets) ❰
    int x = 0;
    for (auto & it: assets.answers){
        if (it.getFillColor() != state.bg_color){
            ++x;
        }
    }
    return x;
❱


◀private: static▶ void ☀Show_More_Stats(Game_State & state, Assets & assets, std::vector<std::string> const& p1_words, std::vector<std::string> const& p2_words) ❰

    
    std::vector<std::vector<std::string>> p1_freq_str;
    std::vector<std::vector<std::string>> p2_freq_str;
    
    
    //show wins
    Add_Row(p1_freq_str, "wins: ", std::to_string(state.p1_state.total_wins));
    Add_Row(p2_freq_str, "wins: ", std::to_string(state.p2_state.total_wins));
    
    //show score
    auto p1_blocks = Words_Blocked_By_P1(assets,state);
    auto p2_blocks = Words_Blocked_By_P2(assets,state);
    Add_Row(p1_freq_str, "score: ", std::to_string(as_signed(assets.p1.score.getString())));
    Add_Row(p2_freq_str, "score: ", std::to_string(as_signed(assets.p2.score.getString())));
    
    //show blocks
    Add_Row(p1_freq_str, "too late: ", std::to_string(p2_blocks));
    Add_Row(p2_freq_str, "too late: ", std::to_string(p1_blocks));
    
    //show total moves
    Add_Row(p1_freq_str, "moves: ", std::to_string(state.p1_state.moves.size()));
    Add_Row(p2_freq_str, "moves: ", std::to_string(state.p2_state.moves.size()));
    
    //convert to nice looking table
    auto p1_str = Table_As_Column_Aligned(p1_freq_str);
    auto p2_str = Table_As_Column_Aligned(p2_freq_str);
    
    
    //show p1 and p2 frequencies at the end of table
    auto p1_freq = Size_Frequency_Counter::Get(p1_words);
    auto p2_freq = Size_Frequency_Counter::Get(p2_words);
    p1_str += To_String(p1_freq);
    p2_str += To_String(p2_freq);
    
    //set label
    assets.p1.stats.setString(p1_str);
    assets.p2.stats.setString(p2_str);
❱

◀private: static▶ void ☀Add_Row(std::vector<std::vector<std::string>> & table, std::string const& s1, std::string const& s2)❰
    std::vector<std::string> tmp;
    tmp.emplace_back(s1);
    tmp.emplace_back(s2);
    table.emplace_back(tmp);
❱

◀private: static▶ std::vector<std::string> ☀Get_P1_Words(Game_State & state, Assets & assets) ❰
    std::vector<std::string> p1_words;
    for (auto & it: assets.answers){
        if (it.getFillColor() == state.p1_state.color){
            p1_words.emplace_back(it.getString());
        }
    }
    return p1_words;
❱

◀private: static▶ std::vector<std::string> ☀Get_P2_Words(Game_State & state, Assets & assets) ❰
    std::vector<std::string> p2_words;
    for (auto & it: assets.answers){
        if (it.getFillColor() == state.p2_state.color){
            p2_words.emplace_back(it.getString());
        }
    }
    return p2_words;
❱



