class
❪string❫
❪iostream❫
❪vector❫
❪SFML/Window.hpp❫
❪SFML/Window/Joystick.hpp❫
❪SFML/Graphics.hpp❫
❪SFML/Graphics/Transformable.hpp❫
❪"code/utilities/peripheral/keyboard/joycons/joycon_state_getter"❫
❪"code/utilities/formats/json/converters/lib"❫
❪"code/programs/games/word_build/gui/state/game_state"❫
❪"code/programs/games/word_build/gui/assets/assets"❫
⚯
⚞⚟

◀public: static▶ void ☀Run_Frame_Render(sf::RenderWindow & window, Game_State & state, Assets & assets) ❰
    window.clear(sf::Color(state.bg_color.r, state.bg_color.g, state.bg_color.b));
    
    
    
    if (state.phase == Game_Phase::MAIN_MENU){
        Render_Title_Sequence(window,state,assets);
    }
    else if (state.phase == Game_Phase::STARTING_GAME){
        //show nothing
    }
    else if(state.phase == Game_Phase::PLAYING_GAME){
        Render_Active_Game(window,state,assets);
    }
    else if(state.phase == Game_Phase::END_GAME){
        Render_Game_Over(window,state,assets);
    }
    
    
    window.display();
❱


◀private: static▶ void ☀Render_Title_Sequence(sf::RenderWindow & window, Game_State & state, Assets & assets) ❰

    for (auto const& it: assets.floating_p1_letters){
        window.draw(it.text);
    }
    for (auto const& it: assets.floating_p2_letters){
        window.draw(it.text);
    }
    window.draw(assets.title_sequence);
❱


◀private: static▶ void ☀Render_Active_Game(sf::RenderWindow & window, Game_State & state, Assets & assets) ❰

    for (auto const& it: assets.letters){
        window.draw(it);
    }
    
    window.draw(assets.p1.pointer);
    window.draw(assets.p2.pointer);
    window.draw(assets.countdown);
    window.draw(assets.no_action_countdown);
    window.draw(assets.score);
    window.draw(assets.percentage);
    window.draw(assets.p1.stats);
    window.draw(assets.p2.stats);
    
    for (auto const& it: assets.game_answers){
        window.draw(it);
    }
    
    for (auto const& it: assets.p1.selections){
        window.draw(it);
    }
    for (auto const& it: assets.p2.selections){
        window.draw(it);
    }
    
    window.draw(assets.p1.score);
    window.draw(assets.p2.score);
    
    window.draw(assets.p1.combo_bar);
    window.draw(assets.p2.combo_bar);
    
    window.draw(assets.p1.combo_number);
    window.draw(assets.p2.combo_number);
    
❱

◀private: static▶ void ☀Render_Game_Over(sf::RenderWindow & window, Game_State & state, Assets & assets) ❰

    
    window.draw(assets.p1.stats);
    window.draw(assets.p2.stats);
    
    for (auto const& it: assets.answers){
        window.draw(it);
    }
    
    window.draw(assets.end_percentage);
    
❱