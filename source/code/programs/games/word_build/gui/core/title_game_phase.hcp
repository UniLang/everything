class
❪string❫
❪iostream❫
❪vector❫
❪thread❫
❪algorithm❫
❪"code/programs/games/word_build/gui/assets/assets"❫
❪SFML/Window.hpp❫
❪SFML/Window/Joystick.hpp❫
❪SFML/Graphics.hpp❫
❪"code/programs/games/word_build/gui/state/game_state"❫
❪"code/utilities/math/math"❫
❪"code/utilities/types/vectors/observers/lib"❫
❪"code/utilities/peripheral/keyboard/F310_gamepad/data/f310_events"❫
⚯
❪"code/utilities/types/strings/sfml/sfml_text"❫
❪"code/utilities/types/vectors/transformers/lib"❫
❪"code/utilities/types/char/lib"❫
❪"code/utilities/random/lib"❫
❪"code/utilities/colors/transformers/screen_position_to_rgb"❫
❪"code/utilities/colors/transformers/screen_position_to_rgb"❫
❪"code/utilities/colors/converters/converters"❫
❪"code/utilities/math/math"❫
⚞⚟

◀public: static▶ void ☀Run_Phase(F310_Events const& events, sf::Time const& TimePerFrame, Game_State & state, Assets & assets) ❰
    
    Handle_Player_Input(state,assets);
    
    //Handle_Floating_Letters(state,assets);
    
    Handle_Sliding_Letters(state,TimePerFrame,assets);
❱

◀private: static▶ void ☀Handle_Player_Input(Game_State & state, Assets & assets) ❰

    Possibly_Start_Game(state,assets);
    
    Handle_Color_Changes(state,assets);
    
    //Adjust_Floating_User_Letter_Speed(state.controller.left.current,assets.floating_p1_letters);
    //Adjust_Floating_User_Letter_Speed(state.controller.right.current,assets.floating_p2_letters);
    
    
❱

◀private: static▶ void ☀Adjust_Floating_User_Letter_Speed(F310_Gamepad const& pad, std::vector<Moving_Text> & floating_letters) ❰

    auto speed_up = pad.top.rt + 100;
    auto speed_down = (pad.top.lt + 100) * -1;
    auto speed_change = speed_up + speed_down;

    if (speed_change != 0){
        for (auto & it: floating_letters){
            if (it.x_change > 0){
                it.x_change += Math::map_value_across_range(speed_change,-200,200,-8,8);
            }
            else{
                it.x_change -= Math::map_value_across_range(speed_change,-200,200,-8,8);
            }
            if (it.y_change > 0){
                it.y_change += Math::map_value_across_range(speed_change,-200,200,-8,8);
            }
            else{
                it.y_change -= Math::map_value_across_range(speed_change,-200,200,-8,8);
            }
        }
    }
❱


◀private: static▶ void ☀Possibly_Start_Game(Game_State & state, Assets & assets) ❰

    //restart the game when user is ready
    if (!state.controller.left.previous.center.center && state.controller.left.current.center.center){
        state.phase = Game_Phase::STARTING_GAME;
    }
    if (!state.controller.right.previous.center.center && state.controller.right.current.center.center){
        state.phase = Game_Phase::STARTING_GAME;
    }
    
    //developer control
    if (sf::Keyboard::isKeyPressed(sf::Keyboard::Space)){
        state.phase = Game_Phase::STARTING_GAME;
    }
❱

◀private: static▶ void ☀Handle_Color_Changes(Game_State & state, Assets & assets) ❰
    
    if (!state.controller.left.previous.left_joystick.clicked && state.controller.left.current.left_joystick.clicked){
        Toggle_Colors(state,assets);
    }
    if (!state.controller.right.previous.left_joystick.clicked && state.controller.right.current.left_joystick.clicked){
        Toggle_Colors(state,assets);
    }
    
    //adjust player colors
    //I don't like this color selection.  TODO: make better.
    Handle_Player_Color_Change(state.p1_state,state.controller.left,assets,assets.floating_p1_letters);
    Handle_Player_Color_Change(state.p2_state,state.controller.right,assets,assets.floating_p2_letters);
❱

◀private: static▶ void ☀Handle_Player_Color_Change(User_State & state, F310_Gamepad_Phases const& phases, Assets & assets, std::vector<Moving_Text> & floating_letters) ❰

    int color_speed_change = 10;
    int joystick_stength = 60;
    auto new_color = state.color;
    if (phases.previous.left_joystick.vertical_axis < joystick_stength*-1){
        state.color_position.y +=color_speed_change;
        Cap_Position(state.color_position);
        new_color = Converters::To_SFML(Screen_Position_To_Rgb::Convert_Through_Hsv_Mapping(state.color_position));

    }
    if (phases.previous.left_joystick.vertical_axis > joystick_stength){
        state.color_position.y -=color_speed_change;
        Cap_Position(state.color_position);
        new_color = Converters::To_SFML(Screen_Position_To_Rgb::Convert_Through_Hsv_Mapping(state.color_position));

    }
    if (phases.previous.left_joystick.horizontal_axis < joystick_stength*-1){
        state.color_position.x -=color_speed_change;
        Cap_Position(state.color_position);
        new_color = Converters::To_SFML(Screen_Position_To_Rgb::Convert_Through_Hsv_Mapping(state.color_position));

    }
    if (phases.previous.left_joystick.horizontal_axis > joystick_stength){
        state.color_position.x +=color_speed_change;
        Cap_Position(state.color_position);
        new_color = Converters::To_SFML(Screen_Position_To_Rgb::Convert_Through_Hsv_Mapping(state.color_position));
    }
    
    //color has changed.  change all the letters too
    if (new_color != state.color){
        for (auto & it: floating_letters){
            it.text.setFillColor(new_color);
        }
        state.color = new_color;
    }
    
❱

◀private: static▶ void ☀Cap_Position(Position & pos) ❰
    
    int x_dim = 1920;
    int y_dim = 1080;
    
    //pacman style instead of direct capping so its more smooth and colors are always changing when holding stick
    if (pos.x < 0){ pos.x = x_dim;}
    if (pos.x > x_dim){ pos.x = 0;}
    if (pos.y < 0){ pos.y = y_dim;}
    if (pos.y > y_dim){ pos.y = 0;}
❱

◀private: static▶ void ☀Toggle_Colors(Game_State & state, Assets & assets) ❰

    if (state.bg_color == sf::Color(0,0,0)){
        state.bg_color = sf::Color(255, 255, 255);
    }
    else if (state.bg_color == sf::Color(255, 255, 255)){
        state.bg_color = sf::Color(0,0,0);
    }
    
    if (state.letter_color == sf::Color(0,0,0)){
        state.letter_color = sf::Color(255, 255, 255);
    }
    else if (state.letter_color == sf::Color(255, 255, 255)){
        state.letter_color = sf::Color(0,0,0);
    }
❱


◀private: static▶ void ☀Handle_Floating_Letters(Game_State & state, sf::Time const& TimePerFrame, Assets & assets) ❰

    Add_Random_Player_Letters(state,TimePerFrame,assets,assets.floating_p1_letters,state.p1_state.color);
    Add_Random_Player_Letters(state,TimePerFrame,assets,assets.floating_p2_letters,state.p2_state.color);
❱


◀private: static▶ void ☀Handle_Sliding_Letters(Game_State & state, sf::Time const& TimePerFrame, Assets & assets) ❰

    Add_Sliding_Player_Letter(state,TimePerFrame,assets,assets.floating_p1_letters,state.p1_state.color);
    Add_Sliding_Player_Letter(state,TimePerFrame,assets,assets.floating_p2_letters,state.p2_state.color);
❱

◀private: static▶ void ☀Add_Sliding_Player_Letter(Game_State & state, sf::Time const& TimePerFrame, Assets & assets, std::vector<Moving_Text> & floating_letters,sf::Color const& color) ❰

    int total_alive_letters = 200;
    
    //add a sliding letter
    if (floating_letters.size() < total_alive_letters){
        
        if (floating_letters.empty()){
            Moving_Text temp = Get_Sliding_Letter_A(state,assets,color);
            floating_letters.emplace_back(temp);
        }
        else{
            auto last_letter = floating_letters[floating_letters.size()-1];
            Moving_Text temp = Get_Next_Sliding_Letter(state,assets,color,last_letter);
            floating_letters.emplace_back(temp);
        }
    }
    
    Move_And_Expire_Letters(floating_letters,TimePerFrame);
❱

◀private: static▶ void ☀Add_Random_Player_Letters(Game_State & state, sf::Time const& TimePerFrame, Assets & assets, std::vector<Moving_Text> & floating_letters,sf::Color const& color) ❰

    int total_alive_letters = 100;
    
    //add a floating letter
    if (floating_letters.size() < total_alive_letters){
        Moving_Text temp = Get_Random_Moving_Text(state,assets,color);
        floating_letters.emplace_back(temp);
    }
    
    Move_And_Expire_Letters(floating_letters,TimePerFrame);
❱

◀private: static▶ void ☀Move_And_Expire_Letters(std::vector<Moving_Text> & floating_letters, sf::Time const& TimePerFrame)❰

    for (auto & it: floating_letters){
        auto cur_pos = it.text.getPosition();
        cur_pos.x += (it.x_change * TimePerFrame.asSeconds());
        cur_pos.y += (it.y_change * TimePerFrame.asSeconds());
        it.text.setPosition(cur_pos);
    }
    
    //delete expired letters
    Remove_If(floating_letters,[&](Moving_Text const& it){
        auto cur_pos = it.text.getPosition();
        return Is_Position_Significantly_Outside_View(cur_pos);
    });
❱

◀private: static▶ bool ☀Is_Position_Significantly_Outside_View(sf::Vector2<float> const& cur_pos) ❰

        if (cur_pos.x > 1920 + 200){
            return true;
        }
        if (cur_pos.x < -200){
            return true;
        }
        if (cur_pos.y > 1080 + 200){
            return true;
        }
        if (cur_pos.y < -200){
            return true;
        }
        return false;
❱

◀private: static▶ Moving_Text ☀Get_Sliding_Letter_A(Game_State & state, Assets & assets, sf::Color const& color)❰

    Moving_Text temp;
    temp.text.setFont(assets.main_font);
    temp.text.setCharacterSize(100);
    temp.text.setFillColor(color);
    temp.text.setString("A");
    
    
    if (color != state.p1_state.color){
        temp.text.setPosition(500,100);
    }
    else{
        temp.text.setPosition(500,820);
    }
    temp.x_change = -250;
    temp.y_change = 0;
    
    return temp;
❱

◀private: static▶ Moving_Text ☀Get_Next_Sliding_Letter(Game_State & state, Assets & assets, sf::Color const& color, Moving_Text const& last_letter)❰

    Moving_Text temp;
    temp.text.setFont(assets.main_font);
    temp.text.setCharacterSize(100);
    temp.text.setFillColor(color);
    
    std::string new_str;
    new_str += Get_Next_Capital_Letter(last_letter.text.getString()[0]);
    temp.text.setString(new_str);
    
    auto new_pos = last_letter.text.getPosition();
    new_pos.x += 80;
    temp.text.setPosition(new_pos);
    temp.x_change = -250;
    temp.y_change = 0;
    
    return temp;
❱

◀private: static▶ Moving_Text ☀Get_Random_Moving_Text(Game_State & state, Assets & assets, sf::Color const& color)❰

    Moving_Text temp;
    temp.text.setFont(assets.main_font);
    temp.text.setCharacterSize(100);
    temp.text.setFillColor(color);
    temp.text.setString(Random_Uppercase_Letter());
    
    auto side = RandomIntFromRange(1,4);
    
    int buffer = 50;
    int x_res = 1920;
    int y_res = 1080;
    
    //top
    if (side == 1){
        temp.text.setPosition(RandomIntFromRange(-100,x_res+100),buffer*-1);
    }
    
    //left
    else if (side == 2){
        temp.text.setPosition(buffer*-1,RandomIntFromRange(-100,y_res+100));
    }
    
    //bottom
    else if (side == 3){
        temp.text.setPosition(RandomIntFromRange(-100,x_res+100),y_res+buffer);
    }
    
    //right
    else if (side == 4){
        temp.text.setPosition(x_res+buffer,RandomIntFromRange(-100,y_res+100));
    }
    
    
    //get a random directional velocity, but they can't both be zero (no movement)
    temp.x_change = RandomIntFromRange(0,8);
    temp.y_change = RandomIntFromRange(0,8);
    while (temp.x_change == 0 && temp.y_change == 0){
        temp.x_change = RandomIntFromRange(0,8);
        temp.y_change = RandomIntFromRange(0,8);
    }
    
    
    if (Random_Bool()){
        temp.x_change *= -1;
    }
    temp.y_change = RandomIntFromRange(1,8);
    if (Random_Bool()){
        temp.y_change *= -1;
    }
    return temp;
❱