class
❪string❫
❪iostream❫
❪vector❫
❪thread❫
❪algorithm❫
❪"code/programs/games/word_build/gui/assets/assets"❫
❪SFML/Window.hpp❫
❪SFML/Window/Joystick.hpp❫
❪SFML/Graphics.hpp❫
❪"code/programs/games/word_build/gui/state/game_state"❫
❪"code/utilities/math/math"❫
❪"code/utilities/types/vectors/observers/lib"❫
❪"code/utilities/peripheral/keyboard/F310_gamepad/data/f310_events"❫
❪"code/utilities/data_structures/graph/unique_str_vertex_graph/lib"❫
⚯
❪"code/utilities/linguistics/build_word/game/puzzle_builder"❫
❪"code/utilities/program/wrappers/graphviz/graphviz_image_maker"❫
⚞⚟

◀public: static▶ void ☀Run_Phase(F310_Events const& events, Game_State & state, Assets & assets) ❰

    //generate a new puzzle
    state.puzzle = Puzzle_Builder::Create_Puzzles(state.puzzle_build_settings)[0];
    
    //auto word_graph = Build_Word_Graph(state.puzzle);
    
    
    //recolor if needed
    assets.p1.pointer.setFillColor(state.p1_state.color);
    assets.p2.pointer.setFillColor(state.p2_state.color);
    assets.p1.stats.setFillColor(state.p1_state.color);
    assets.p2.stats.setFillColor(state.p2_state.color);
    assets.p1.combo_bar.setFillColor(state.p1_state.color);
    assets.p2.combo_bar.setFillColor(state.p2_state.color);
    assets.p1.combo_number.setFillColor(state.p1_state.color);
    assets.p2.combo_number.setFillColor(state.p2_state.color);
    
    //turn the new puzzle into assets
    assets.letters.clear();
    sf::Text temp;
    temp.setFont(assets.main_font);
    temp.setCharacterSize(150);
    for (auto const& letter: state.puzzle.letters){

        temp.setString(letter);
        temp.setFillColor(state.letter_color);
        
        temp.setOutlineColor(sf::Color(0,0,0));
        temp.setOutlineThickness(6);
        assets.letters.emplace_back(temp);
    }
    
    int width = 200;
    for (auto & it: assets.letters){
        it.setPosition(width,300);
        width += 100;
    }
    
    //position the score
    assets.score.setPosition(width,335);
    assets.percentage.setPosition(width+5,430);
    
    //position the end game answers
    width += 250;
    assets.answers.clear();
    temp.setCharacterSize(25);
    temp.setFillColor(state.bg_color);
    auto parts = Split_Every_N(state.puzzle.words,24);
    for (auto const& row: parts){
        
        int height = 40;
        for (auto const& col: row){
            temp.setPosition(width,height);
            temp.setString(col);
            assets.answers.emplace_back(temp);
            height += 40;
        }
        width += 180;
    }
    //position the end game percentage
    
    
    width = ((state.puzzle.words.size() / 24) * 180) + 250 + 540;
    int height = 40;
    assets.end_percentage.setPosition(width,height);
    
    
    //clear the game answers
    assets.game_answers.clear();
    
    assets.p1.stats.setString("");
    assets.p2.stats.setString("");
    assets.p1.stats.setPosition(200,500);
    assets.p2.stats.setPosition(200,10);
    
    
    //reset the game timer
    state.countdown.restart();
    state.no_action_countdown.restart();
    
    //reset the user state
    state.p1_state.current_letter_selection = 0;
    state.p1_state.selected_letters.clear();
    assets.p1.selections.clear();
    assets.p1.score.setString("0");
    state.p1_state.combo_countdown.restart();
    state.p1_state.current_combo = 0;
    state.p1_state.current_combo_timeout_ms = state.p1_state.start_combo_timeout_ms;
    
    state.p2_state.current_letter_selection = 0;
    state.p2_state.selected_letters.clear();
    assets.p2.selections.clear();
    assets.p2.score.setString("0");
    state.p2_state.combo_countdown.restart();
    state.p2_state.current_combo = 0;
    state.p2_state.current_combo_timeout_ms = state.p1_state.start_combo_timeout_ms;
    
    
    assets.p1.combo_bar.setSize(sf::Vector2f(0, 20));
    assets.p2.combo_bar.setSize(sf::Vector2f(0, 20));
    
    assets.p1.combo_number.setString("");
    assets.p2.combo_number.setString("");
    
    assets.new_round.sound.play();
    
    state.p1_state.found_words.clear();
    state.p2_state.found_words.clear();
    
    state.p1_state.moves.clear();
    state.p2_state.moves.clear();
    
❱






//experimental
◀public: static▶ Unique_Str_Vertex_Graph ☀Build_Word_Graph(Build_Word_Puzzle const& puzzle)❰

    Unique_Str_Vertex_Graph x;
    
    //add all nodes as unique indexed letters
    for (auto const& word: puzzle.words){
        for (size_t i = 0; i < word.size(); ++i){
            std::string str = Build_Char_Node(word[i],i);
            x.Add(str);
        }
    }
    
    //connect by earliest next letter
    for (auto const& word: puzzle.words){
        for (size_t i = 0; i < word.size() -1; ++i){
            
            //from
            std::string from = Build_Char_Node(word[i],i);
            
            //to
            char to_letter = word[i+1];
            
            
            //eventually we'll find an attempt that fits
            int c = i;
            auto attempt = Build_Char_Node(to_letter,c);
            while (!x.Exists(attempt)){
                ++c;
                attempt = Build_Char_Node(to_letter,c);
            }
            x.Connect(from,attempt);
        }
    }
    
    std::cout << x.As_Graphviz() << std::endl;
    
    Graphviz_Image_Maker::Make(x.As_Graphviz(),"/home/luxe/Desktop","word_graph");
    
    
    return x;
❱

◀private: static▶ std::string ☀Build_Char_Node(char c, int index)❰
    std::string str;
    str += c;
    str += std::to_string(index);
    return str;
❱

