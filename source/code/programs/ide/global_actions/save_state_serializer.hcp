class
❪"code/programs/ide/settings/ide_settings"❫
❪"code/programs/ide/global_actions/global_action"❫
❪"SDL.h"❫
⚯
❪"code/utilities/graphics/sdl/sdl_fullscreener"❫
❪"code/programs/ide/global_actions/global_action_decider"❫
❪"code/utilities/program/wrappers/zenity/file_selector/file_selector"❫
❪"code/utilities/formats/json/converters/lib"❫
❪"code/utilities/code/concept_string_tree_parser"❫
❪"code/utilities/formats/json/converters/lib"❫
❪"code/utilities/data_structures/graphics/objects/buildable_schema_faced_tree/buildable_schema_faced_tree_tokenizer"❫
❪"code/utilities/formats/json/converters/json_file_io"❫
❪"code/utilities/code/save/save_state_loader"❫
❪"code/utilities/code/save/save_state_saver"❫
❪"code/programs/ide/frame/apply_schema_to_elements"❫
⚞⚟


◀public: static▶ void ☀Save(Ide_Settings & settings)❰
    Save_State_Saver::Save(settings.elements,settings.desktop.save.file_name);
❱
◀public: static▶ void ☀Load(Ide_Settings & settings)❰
    settings.elements = Save_State_Loader::Load(settings.desktop.save.file_name);
    Apply_Load_Adjustments(settings);
❱

◀private: static▶ void ☀Apply_Load_Adjustments(Ide_Settings & settings)❰

    //fix the schema in case it changed
    for (auto & it: settings.elements.types){
        Apply_Schema_To_Elements::Apply(it);
    }
❱