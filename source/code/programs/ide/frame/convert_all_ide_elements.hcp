class
❪"code/programs/ide/settings/data/ide_settings"❫
❪"code/utilities/data_structures/graphics/objects/frame_elements"❫
❪"code/utilities/peripheral/mouse/state/mouse_state"❫
❪"code/utilities/peripheral/pc/pc_input_state"❫
❪"code/utilities/graphics/imgui/loop/mechanics"❫
⚯
❪"code/utilities/data_structures/graphics/objects/mouse/draw/mouse_selection_drawer"❫
❪"code/utilities/peripheral/mouse/state/mouse_position_getter"❫
❪"code/utilities/data_structures/graphics/objects/mouse/events/mouse_events_checker"❫
❪"code/utilities/graphics/imgui/window/window_position_finder"❫
❪"code/utilities/data_structures/graphics/objects/label/label_drawer"❫
❪"code/utilities/data_structures/graphics/objects/cursor/label_cursor_action_doer"❫
❪"code/utilities/types/vectors/operators/lib"❫
❪"code/utilities/data_structures/graphics/objects/mouse/draw/mouse_frame_getter"❫
❪"code/utilities/data_structures/graphics/objects/faced_grid/grid_label_drawer"❫
❪"code/utilities/data_structures/graphics/objects/faced_tree/tree_label_drawer"❫
❪"code/utilities/data_structures/graphics/objects/buttoned_faced_tree/button_face_tree_drawer"❫
❪"code/utilities/data_structures/graphics/objects/buildable_faced_tree/buildable_face_tree_drawer"❫
❪"code/utilities/data_structures/graphics/objects/buildable_faced_tree/buildable_face_tree_is_mouse_over"❫
❪"code/utilities/data_structures/graphics/objects/cursor/cursor_drawer"❫
❪"code/utilities/data_structures/graphics/objects/slider/slider_drawer"❫
❪"code/utilities/data_structures/graphics/objects/buildable_schema_faced_tree/buildable_schema_face_tree_drawer"❫
❪"code/utilities/types/variant/lib"❫
❪"code/utilities/data_structures/graphics/image/positioned_texture"❫
⚞⚟

◀public: static▶ Frame_Elements ☀Convert(Ide_Elements & e, Ide_Settings const& settings, Pc_Input_State const& pc_input)❰

    Frame_Elements elements;
    for (auto & it: e.types){
        std::visit(overloaded {
            [&](Positioned_Buildable_Face_Tree & x) {
                elements.types += Buildable_Face_Tree_Drawer::Draw(settings.desktop.unilang_font_lookup,x,pc_input).types;
            },
            [&](Positioned_Buildable_Schema_Faced_Tree & x) {
                elements.types += Buildable_Schema_Face_Tree_Drawer::Draw(settings.desktop.unilang_font_lookup,x,pc_input).types;
            },
            [&](Positioned_Image_Data & x) {
                
                elements.types.emplace_back(Convert_To_Texture(x));
            },
            [&](Positioned_Animated_Image_Data & x) {
                
                //animate
                x.frame += 1;
                if (x.frame > x.texture.size()){
                    x.frame = 0;
                }
                
                elements.types.emplace_back(Convert_To_Texture(x));
            }
        }, it.element);
    }
    return elements;
❱

◀private: static▶ Positioned_Texture ☀Convert_To_Texture(Positioned_Image_Data const& img)❰

    Positioned_Texture tex;
    tex.pos = img.pos;
    tex.id = img.texture;
    tex.width = img.width;
    tex.height = img.height;
    return tex;
❱
◀private: static▶ Positioned_Texture ☀Convert_To_Texture(Positioned_Animated_Image_Data const& img)❰

    Positioned_Texture tex;
    tex.pos = img.pos;
    tex.id = img.texture[img.frame];
    tex.width = img.width;
    tex.height = img.height;
    return tex;
❱