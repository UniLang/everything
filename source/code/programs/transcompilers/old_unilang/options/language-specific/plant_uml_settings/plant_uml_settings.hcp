class

❪string❫
❪"code/utilities/types/strings/transformers/casing/case_format_style"❫
⚯

⚞⚟


◀
public:

    std::string file_extension = "plant-uml";
    std::string image_file_extension = ".png";
    std::string program_name = "/usr/bin/plantuml";
    
    //symbols (defining visibility)
    //these can be used for data members or methods
    std::string public_symbol = "+";
    std::string protected_symbol = "#";
    std::string private_symbol = "-";
    std::string package_private = "~";
    
    //0 turns them into regular text
    bool set_visibility_icon_size = true;
    int visibility_icon_size = 1;
    std::string set_visibility_icon_size_str = "skinparam classAttributeIconSize ";
    
    //settings that make plant uml what it is.
    //changing these probably doesn't make any sense.
    //I'm still putting them here to separate out data from implementation.
    //It could be useful for code-reuse later, if there are variant uml languages similar to plant.
    //or if plantuml makes a language adjustment somewhere.
    std::string start_plant_uml_language_tag = "@startuml";
    std::string end_plant_uml_language_tag = "@enduml";
    std::string class_keyword = "class";
    Case_Format_Style data_member_identifier_casing = Case_Format_Style::LOWER_CASE_WITH_UNDERSCORES;
    Case_Format_Style data_member_type_casing = Case_Format_Style::LOWER_CASE_WITH_UNDERSCORES;
    std::string start_class_body_symbol = "{";
    std::string end_class_body_symbol = "}";
    std::string identifier_type_seperator = " : ";
    
    
    std::string enum_keyword = "enum";
    Case_Format_Style enum_identifier_casing = Case_Format_Style::LOWER_CASE_WITH_UNDERSCORES;
    Case_Format_Style enum_identifier_arg_casing = Case_Format_Style::LOWER_CASE_WITH_UNDERSCORES;
    std::string start_enum_body_symbol = "{";
    std::string end_enum_body_symbol = "}";
    
    //LINES / CONNECTORS
    //class diagram relationships between classes
    //we'll assume we only express them from left to right
    //I see no reason to need to express them in a different direction
    std::string extension_arrow = "--|>";
    std::string composition_arrow = "--*";
    std::string aggregation_arrow = "--o";
    std::string dotted_extension_arrow = "..|>";
    std::string dotted_composition_arrow = "..*";
    std::string dotted_aggregation_arrow = "..o";
    std::string dotted_line = "..";
    std::string straight_line = "--";
    
    //shape
    std::string square_line = "--#";
    std::string x_line = "--x";
    std::string fork_line = "--}";
    std::string plus_line = "--+";
    std::string big_arrow_line = "--^";
    std::string dotted_square_line = "..#";
    std::string dotted_x_line = "..x";
    std::string dotted_fork_line = "..}";
    std::string dotted_plus_line = "..+";
    std::string dotted_big_arrow_line = "..^";
    
    //TODO: we can mix end points also
    //i.e. have symbols on both sides of the line
    //for the time being, I don't see a need for this.
    
    //labels
    bool show_from_label = true;
    bool show_to_label = true;
    bool show_middle_label = true;
    std::string label_arrow_left = "<";
    std::string label_arrow_right = ">";
    
    //Abstract and Static
    std::string type_static_keyword = "{static}";
    std::string type_abstract_keyword = "{abstract}";
    
    //Fields and methods
    std::string field_keyword = "{field}";
    std::string method_keyword = "{method}";
    
    //Advanced class body
    
        //class dividers
        std::string class_divider_dotted = "..";
        std::string class_divider_double = "==";
        std::string class_divider_solid = "--";
        
        //what to show
        Description_Section_Settings description_section;
        
    //Notes and stereotypes
    std::string stereotype_start = "<<";
    std::string stereotype_end = ">>";
    
    //skin param related
    Skin_Param_Settings skin_param;
    Show_Hide_Settings show_hide;
    
    
    Struct_Manipulation_Settings manipulations;

▶
