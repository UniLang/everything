class
❪vector❫
❪string❫
⚯

⚞⚟


◀
public:

    //headers that we force to be system headers even though they may not be illustrated that way in the code:  
    std::vector<std::string> force_to_be_system_imports;

    //headers that we force to be local headers even though they may not be illustrated that way in the code:  
    std::vector<std::string> force_to_be_local_imports;

    //rename headers.  I've had some people fly though the entire codebase replacing a header file with another header file.
    //The old header file being one that the new header file now includes indirectly.
    std::vector<std::pair<std::string,std::string>> header_renames;


    //TODO: could be more generic. force any name(str) to have an extension(str)
    //headers specified here will be forced to have .h
    //(even if they weren't specified that way in the code)
    //keep in mind, that other headers can still gain a ".h" if they are local and lacking in the code.
    //this was mainly added so that the local headers that get forced to be system headers can still have a .h as well
    //a little hackish, but I can't think of a much better solution right now.  I suspect overtime, this idea may get a bit
    //cleaner and more structured.  The problem is that C++ system headers don't normally have a .h, but all the system headers in C do.  
    //I'm trying to make this language agnostic, and provide the utility of leaving out the file extension and having it derived based
    //on the name of the file.  I suppose that maybe the name of the file is important since other extensions may or may not exist.
    //it's really just a part of the header's file name.  I still think this OK for now.  The more options the better.
    std::vector<std::string> force_header_to_have_a_dot_h;
    std::vector<std::string> force_header_to_not_have_a_dot_h;

    //the file extension to use when adding missing file extensions
    std::string file_extension = ".asd";
▶
