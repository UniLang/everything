class


⚯
❪"code/utilities/types/vectors/observers/lib"❫
❪"code/utilities/streams/filestreams/lib"❫
❪"code/utilities/types/converters/lib"❫
❪"code/utilities/types/strings/transformers/casing/lib"❫
⚞⚟

◀public: static▶ void ☀Print_Wrapper_Constructor(std::string file_name, std::wofstream & out, Method_Item const& method, C_Export_Settings const& options, std::vector<Data_Member_Item> const& data_members)❰
    Print_To_Stream(out,"Initialize" + As_Capital_And_Pushed_Together(file_name));
    Print_To_Stream(out,"(&o");
                    
    if (!method.function_arguments.empty()){
        Print_To_Stream(out,",");
        Methods_Printer::Print_Function_Argument_Call(out,method.function_arguments,options);
    }
    Print_To_Stream_With_Newline(out,");");
    Print_To_Stream_With_Newline(out,"");
    Test_Wrapper_Method_Shared::Possibly_Destructure_The_Observables(out,data_members);
❱

◀public: static▶ void ☀Print_Wrapper_Destructor(std::string file_name, std::wofstream & out, Method_Item const& method, C_Export_Settings const& options, std::vector<Data_Member_Item> const& data_members)❰
    
    //we add the T so we can bind to TypeInformationT (function pointers for lifetime management)
    //basically, the suffix of the function must match the type, because we have macros deducing the functions based on the type
    Print_To_Stream(out,"Destruct" + As_Capital_And_Pushed_Together(file_name) + "T");
    Print_To_Stream(out,"(&o");
    Print_To_Stream_With_Newline(out,");");
    Print_To_Stream_With_Newline(out,"");
    //might as well in case we want to observe the state after a destruction
    Test_Wrapper_Method_Shared::Possibly_Destructure_The_Observables(out,data_members);
❱

◀public: static▶ void ☀Print_Wrapper_Copy_Constructor(std::string file_name, std::wofstream & out, Method_Item const& method, C_Export_Settings const& options, std::vector<Data_Member_Item> const& data_members)❰
    
    //we add the T so we can bind to TypeInformationT (function pointers for lifetime management)
    //basically, the suffix of the function must match the type, because we have macros deducing the functions based on the type
    Print_To_Stream(out,"CopyInitialize" + As_Capital_And_Pushed_Together(file_name) + "T");
    Print_To_Stream(out,"(&o,&x.o");
    Print_To_Stream_With_Newline(out,");");
    Print_To_Stream_With_Newline(out,"");
    Test_Wrapper_Method_Shared::Possibly_Destructure_The_Observables(out,data_members);
❱




//copy constructor exceptions
◀public: static▶ void ☀Print_Copy_Constrct_Def(std::string file_name, std::wofstream & out, Method_Item const& method, C_Export_Settings const& options)❰
  Print_To_Stream(out,As_Capital_And_Pushed_Together(file_name) + "::" + As_Capital_And_Pushed_Together(file_name));
  Print_To_Stream(out,"(");
  //this needs to be const& one day, but we don't generate the implicit first parameter to be const protected because we
  //don't if the function is a transform or an observer
  //I once had a token for this, but removed it, under the impression that it would be derivable
  //same comment ^ for the function below
  Print_To_Stream(out,As_Capital_And_Pushed_Together(file_name) + " & x");
  Print_To_Stream(out,")");
❱
◀public: static▶ void ☀Print_Copy_Constrct_Decl(std::string file_name, std::wofstream & out, Method_Item const& method, C_Export_Settings const& options)❰
  Print_To_Stream(out,As_Capital_And_Pushed_Together(file_name));
  Print_To_Stream(out,"(");
  Print_To_Stream(out,As_Capital_And_Pushed_Together(file_name) + " & x");
  Print_To_Stream(out,")");
❱
◀public: static▶ void ☀Print_Destructor_Decl(std::string file_name, std::wofstream & out, Method_Item const& method, C_Export_Settings const& options)❰
  Print_To_Stream(out,"~" + As_Capital_And_Pushed_Together(file_name));
  Print_To_Stream(out,"()");
❱
◀public: static▶ void ☀Print_Destructor_Def(std::string file_name, std::wofstream & out, Method_Item const& method, C_Export_Settings const& options)❰
  Print_To_Stream(out,As_Capital_And_Pushed_Together(file_name) + "::");
  Print_To_Stream(out,"~" + As_Capital_And_Pushed_Together(file_name));
  Print_To_Stream(out,"()");
❱