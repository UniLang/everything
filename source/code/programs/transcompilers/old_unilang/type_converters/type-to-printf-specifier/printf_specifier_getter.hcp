class


⚯
❪"code/utilities/linguistics/computer/types/generic/unilang_type_to_language_type_converter"❫
❪"code/utilities/types/converters/lib"❫
⚞⚟

◀public: static▶ std::string ☀Get(C_Language_Version const& version, Printf_Specifier_Settings const& settings, std::string base_type)❰
    
    auto stripped_type_detail = Type_Qualifier_Stripper::Strip_To_Base_Unilang_Type(as_string(base_type),false);
    auto language_type = Unilang_Type_To_Language_Type_Converter::Convert_To_Language_Type(stripped_type_detail.base_type, Source_Language::C);
    
    std::string specifier;
    specifier = Pull_Out_Specifier_Based_On_Table(version,settings.lookup_table,language_type.name);
    
    return specifier;
❱



◀private: static▶ std::string ☀Pull_Out_Specifier_Based_On_Table(C_Language_Version const& version, std::unordered_multimap<std::string,Printf_Specifier> const& lookup_table, std::string const& base_type)❰

    auto found = lookup_table.find(base_type);
    if (found != lookup_table.end()){
        auto spec = found->second;
        switch(version){
          case C_Language_Version::C89: return spec.c89;
          case C_Language_Version::C99: return spec.c99;
          case C_Language_Version::C11: return spec.c11;
        }
    }
    return "";
❱
