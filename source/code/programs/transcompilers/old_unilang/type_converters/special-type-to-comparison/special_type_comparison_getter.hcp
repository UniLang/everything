class


⚯
❪"code/utilities/linguistics/computer/types/generic/unilang_type_to_language_type_converter"❫
❪"code/utilities/language_basic/relational-operator/relational_operator_converter"❫
❪"code/utilities/types/converters/lib"❫
❪"code/utilities/types/strings/transformers/casing/lib"❫
⚞⚟

◀public: static▶ Special_Comparison_Type ☀Get(Special_Comparison_Settings const& settings, std::string base_type, bool & found)❰
    
    found=false;
    auto stripped_type_detail = Type_Qualifier_Stripper::Strip_To_Base_Unilang_Type(as_string(base_type),false);
    auto language_type = Unilang_Type_To_Language_Type_Converter::Convert_To_Language_Type(stripped_type_detail.base_type, Source_Language::C);
    
    Special_Comparison_Type code;
    code = Pull_Out_Code_Based_On_Table(settings.lookup_table,language_type.name,found);
    
    return code;
❱



◀private: static▶ Special_Comparison_Type ☀Pull_Out_Code_Based_On_Table(std::unordered_multimap<std::string,Special_Comparison_Type> const& lookup_table, std::string const& base_type, bool & found)❰

    Special_Comparison_Type code;
    auto got_it = lookup_table.find(base_type);
    if (got_it != lookup_table.end()){
        code = got_it->second;
        found = true;
    }

	if (!found){
		Use_Default_Assumed(code,base_type);
	}
    return code;
❱

◀private: static▶ void ☀Use_Default_Assumed(Special_Comparison_Type & code,std::string const& base_type)❰


	Special_Comparison_Functions functions;
	
    
    //build assumed name
    Relational_Operator_Print_Settings op_settings;
	functions.equals =         As_Last_Char_Removed(base_type) + " " + Relational_Operator_Converter::As_Word(Relational_Operator::EQUAL,op_settings);
	functions.not_equals =     As_Last_Char_Removed(base_type) + " " + Relational_Operator_Converter::As_Word(Relational_Operator::NOT_EQUAL,op_settings);
	functions.less =           As_Last_Char_Removed(base_type) + " " + Relational_Operator_Converter::As_Word(Relational_Operator::LESS,op_settings);
	functions.less_equals =    As_Last_Char_Removed(base_type) + " " + Relational_Operator_Converter::As_Word(Relational_Operator::LESS_EQUAL,op_settings);
	functions.greater =        As_Last_Char_Removed(base_type) + " " + Relational_Operator_Converter::As_Word(Relational_Operator::GREATER,op_settings);
	functions.greater_equals = As_Last_Char_Removed(base_type) + " " + Relational_Operator_Converter::As_Word(Relational_Operator::GREATER_EQUAL,op_settings);

	functions.equals = As_Capital_And_Pushed_Together(functions.equals);
	functions.not_equals = As_Capital_And_Pushed_Together(functions.not_equals);
	functions.less = As_Capital_And_Pushed_Together(functions.less);
	functions.less_equals = As_Capital_And_Pushed_Together(functions.less_equals);
	functions.greater = As_Capital_And_Pushed_Together(functions.greater);
	functions.greater_equals = As_Capital_And_Pushed_Together(functions.greater_equals);

	code = Special_Type_Comparison_Builder::Build_Based_On_Functions(functions);
❱
