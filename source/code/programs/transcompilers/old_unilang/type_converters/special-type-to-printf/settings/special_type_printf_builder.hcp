class


⚯
❪"code/utilities/types/converters/lib"❫
❪"code/utilities/types/vectors/operators/lib"❫
⚞⚟

◀public: static▶ Special_Printf_Type ☀Bool()❰

  const std::string what_to_use_for_true = "TRUE";
  const std::string what_to_use_for_false = "FALSE";
  Special_Printf_Type code;
  
  //derives specifier
  code.unilang_type_name += "bool";
  
  //token value
  Body_Token_Value t;

  //PRINT:
  
  t.name = Body_Token_Name::SELF_DATA_MEMBER;
  //t.value = filled in automatically
  code.body.push_back(t);
    
  t.name = Body_Token_Name::REGULAR;
  t.value =  L"?\"" + as_wstring(what_to_use_for_true) + L"\":\"" + as_wstring(what_to_use_for_false) + L"\"";
  code.body.push_back(t);

	//TRANSITION:

	t.name = Body_Token_Name::BODY_PARAMETER;
	t.value =  as_wstring("before");
	code.transition_body.push_back(t);

	t.name = Body_Token_Name::REGULAR;
	t.value =  as_wstring("->");
	code.transition_body.push_back(t);

	t.name = Body_Token_Name::SELF_DATA_MEMBER_WITHOUT_OBJ;
	//t.value = filled in automatically
	code.transition_body.push_back(t);

	t.name = Body_Token_Name::REGULAR;
	t.value =  L"?\"" + as_wstring(what_to_use_for_true) + L"\":\"" + as_wstring(what_to_use_for_false) + L"\"";
	code.transition_body.push_back(t);

	t.name = Body_Token_Name::REGULAR;
	t.value =  as_wstring(",");
	code.transition_body.push_back(t);

	code.transition_body += code.body;


  
  return code;
❱

◀public: static▶ Special_Printf_Type ☀AsciiString()❰
  Special_Printf_Type code;
  
  //derives specifier
  code.unilang_type_name += "ascii_string";
  
  //token value
  Body_Token_Value t;

  //PRINT:
  t.name = Body_Token_Name::REGULAR;
  t.value =  L"AsciiStringCStr(&";
  code.body.push_back(t);
  
  //self data member value will be filled automatically
  t.name = Body_Token_Name::SELF_DATA_MEMBER;
  code.body.push_back(t);
  
  t.name = Body_Token_Name::REGULAR;
  t.value =  L")";
  code.body.push_back(t);

	//TRANSITION:
	code.transition_body = code.body;

	t.name = Body_Token_Name::REGULAR;
	t.value =  L"AsciiStringCStr(&";
	code.transition_body.push_back(t);
  
	t.name = Body_Token_Name::BODY_PARAMETER;
	t.value =  as_wstring("before");
	code.transition_body.push_back(t);

	t.name = Body_Token_Name::REGULAR;
	t.value =  as_wstring("->");
	code.transition_body.push_back(t);

	t.name = Body_Token_Name::SELF_DATA_MEMBER_WITHOUT_OBJ;
	//t.value = filled in automatically
	code.transition_body.push_back(t);
  
	t.name = Body_Token_Name::REGULAR;
	t.value =  L")";
	code.transition_body.push_back(t);

	t.name = Body_Token_Name::REGULAR;
	t.value =  as_wstring(",");
	code.transition_body.push_back(t);

	code.transition_body += code.body;

  
  return code;
❱

◀public: static▶ Special_Printf_Type ☀Vector()❰
  Special_Printf_Type code;
  
  //derives specifier
  code.unilang_type_name += "size";
  
  //token value
  Body_Token_Value t;
  
  //PRINT:
  t.name = Body_Token_Name::REGULAR;
  t.value =  L"VectorSize(&";
  code.body.push_back(t);
  
  //self data member value will be filled automatically
  t.name = Body_Token_Name::SELF_DATA_MEMBER;
  code.body.push_back(t);
  
  t.name = Body_Token_Name::REGULAR;
  t.value =  L")";
  code.body.push_back(t);

  //TRANSITION:
  code.transition_body = code.body;

	t.name = Body_Token_Name::REGULAR;
	t.value =  L"VectorSize(&";
	code.transition_body.push_back(t);
  
	t.name = Body_Token_Name::BODY_PARAMETER;
	t.value =  as_wstring("before");
	code.transition_body.push_back(t);

	t.name = Body_Token_Name::REGULAR;
	t.value =  as_wstring("->");
	code.transition_body.push_back(t);

	t.name = Body_Token_Name::SELF_DATA_MEMBER_WITHOUT_OBJ;
	//t.value = filled in automatically
	code.transition_body.push_back(t);
  
	t.name = Body_Token_Name::REGULAR;
	t.value =  L")";
	code.transition_body.push_back(t);

	t.name = Body_Token_Name::REGULAR;
	t.value =  as_wstring(",");
	code.transition_body.push_back(t);

	code.transition_body += code.body;
  
  return code;
❱
