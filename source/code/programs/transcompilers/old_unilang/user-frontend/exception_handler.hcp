class

❪iostream❫
⚯
❪"code/utilities/language_basic/std_hackery/lib"❫
❪"code/utilities/colors/lib"❫
⚞⚟

//should be a template function instead
//they should all inherit from from std::exception?
◀public: static▶ void ☀Handle_Exceptions()❰
    try{throw;}
    catch(Filename_Exception const& e)               {Report_Filename_Error                   (e);}
    catch(Tokenizer_Exception const& e)              {Report_Tokenizing_Error                 (e);}
    catch(Token_Stream_Validation_Exception const& e){Report_Token_Stream_Validation_Error    (e);}
    catch(std::string const& e                      ){Report_Error_Mesage_With_No_Extra_Data  (e);}
    catch(const char* e                             ){Report_Error_Mesage_With_No_Extra_Data  (e);}
    catch(...)                                       {Report_Unknown_Error                    ( );}

❱


◀private: static▶ void ☀Report_Filename_Error(Filename_Exception const& e)❰
    std::string error_message = "Filename_Validator: ";
    for (auto it: e.Problems()){
        error_message += it + "\n";
    }
    Red_Error_Message(error_message);
❱
◀private: static▶ void ☀Report_Tokenizing_Error(Tokenizer_Exception const& e)❰
    Red_Error_Message("Failed to tokenize");
    //here's why...
❱
◀private: static▶ void ☀Report_Token_Stream_Validation_Error(Token_Stream_Validation_Exception const& e)❰

    std::cerr << "Error while validating token stream\n";
    std::cerr << Get_Formatted_Line_Number(e.Token().location.start);
    std::cerr << " ";
    
    Red_Error_Message(e.Error_Message());
    
❱
◀private: static▶ void ☀Report_Error_Mesage_With_No_Extra_Data(std::string const& e)❰
    Red_Error_Message(e);
❱

◀private: static▶ void ☀Report_Unknown_Error()❰
    Red_Error_Message("Unknown exception thrown. This should not happen.\nYou found a bug in the software.\nPlease report this.");
❱


//utility
◀private: static▶ std::string ☀Get_Formatted_Line_Number(File_Marker const& marker)❰
	return std::to_string(marker.row) + ":" + std::to_string(marker.column);
❱
