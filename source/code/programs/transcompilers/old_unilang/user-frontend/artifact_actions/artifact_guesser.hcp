class
❪string❫
❪vector❫
❪"code/utilities/formats/artifact/artifact_type"❫
⚯
❪"code/utilities/types/vectors/operators/lib"❫

⚞⚟


//if you didn't provide which languages/artifacts to go to, that's fine.
//we'll figure out based on some kind of context.
//this way we can run a single shell command (unilang (without any flags)) that does everything,
//Then we don't have to worry about about any complicated cli, or big config files.  
//don't get me wrong, you can still override all the default deduction through those other methods.
//but usually I'm not jumping around to too many repos, so I can just specify a context and allow these helpful deductions.

//TODO(thickey): pretty much all the languages this impl chooses,
//is based on the context of the company/repo I'm working in.
//we need configs for that context.  context being like company_name or something.
//we can probably leverage or mirror the --exporter property.

//TODO(thickey): we may want to do a language bundle pack.  
//i.e. cpp,cpp_test,cpp_benchmark, etc are all in the cpp_full_pack.
//eh, right now I don't see that as a very big deal
◀public: static▶ Artifact_Actions ☀Guess(Structure const& structure)❰

    //todo(thickey): dispatch for other exporters
    auto settings = Uber_Guess_Settings();
    return Perform_Guess(structure,settings);
❱

◀public: static▶ Artifact_Actions ☀Guess(std::vector<Code_Graph> const& code_graphs)❰

    //todo(thickey): dispatch for other exporters
    auto settings = Uber_Guess_Settings();
    return Perform_Guess(code_graphs,settings);
❱

◀private: static▶ Artifact_Guess_Settings ☀Uber_Guess_Settings()❰
    
    Artifact_Guess_Settings settings;
    
    //eh, its just data and no methods?
    //do you want to do something a bit more language agnostic?
    //some kind of IDL? Uber might switch to protobuf in the future.
    //Considering HIDL dead for new development
    settings.has_data_members_and_no_methods.emplace_back(Artifact_Type::PROTOBUF);
    
    //its got methods?  ok, its probably actual code then.
    //what language do we use these days?  let's transcompile to that.
    settings.has_methods.emplace_back(Artifact_Type::CPP);
    settings.has_methods.emplace_back(Artifact_Type::CPP_TEST);
    settings.has_methods.emplace_back(Artifact_Type::CPP_BENCHMARK);
    
    // we may want to export temporal data so the generation remains deterministic
    // I woke up the day after new years and saw that unilang was generating different code.
    // sure enough this had to do with the date in a copyright comment.
    //settings.always.emplace_back(Artifact_Type::DATE);
    
    //do we need to generate any files for the collective group of unilang files?
    //we do this for the build files.
    settings.group.emplace_back(Artifact_Type::BAZEL);

    //we may also want to do this for collective documentation
    //TODO(thickey): ...
    
    return settings;
❱




◀private: static▶ Artifact_Actions ☀Perform_Guess(Structure const& structure, Artifact_Guess_Settings const& settings)❰
    
    Artifact_Actions x;
    
    //get some properties about the structure
    bool has_data_members = !structure.data_members.data_members.empty();
    bool has_methods = !structure.methods.methods.empty();
    
    //decide which artifact actions to apply to it
    x.artifacts += settings.always;
    
    if (has_data_members){
        x.artifacts += settings.has_data_members;
    }
    
    if (has_data_members && !has_methods){
        x.artifacts += settings.has_data_members_and_no_methods;
    }
    
    if (has_methods){
        x.artifacts += settings.has_methods;
    }
    
    if (has_methods && !has_data_members){
        x.artifacts += settings.has_methods_and_no_data_members;
    }
    
    return x;
❱

◀private: static▶ Artifact_Actions ☀Perform_Guess(std::vector<Code_Graph> const& code_graphs, Artifact_Guess_Settings const& settings)❰

    Artifact_Actions x;
    x.artifacts += settings.group;
    return x;
❱






