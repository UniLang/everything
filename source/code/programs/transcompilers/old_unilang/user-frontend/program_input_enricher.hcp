class
❪vector❫
❪string❫
❪"code/utilities/filesystem/paths/lib"❫
⚯
❪"code/utilities/types/general/lib"❫
❪"code/utilities/filesystem/files/getting/lib"❫
❪"code/utilities/program/common_actions/exits/lib"❫
❪"code/utilities/output/diagnostic/diagnostic_printer"❫
⚞⚟


◀public: static▶ void ☀Enrich(Program_Input & input)❰

    Enrich_Things(input);
    Ensure_Things(input);
❱

◀private: static▶ void ☀Enrich_Things(Program_Input & input)❰

    bool derive_inputs_if_none_were_specified = true;
    bool attempt_to_derive_exporter_if_none_was_specified = true;
    bool attempt_to_adjust_workspace = true;

    //Attempt to enrich empty settings
    if (derive_inputs_if_none_were_specified){
        Decide_What_Files_To_Transcompile(input,input.settings.parser.input_files.expected_file_extension);
    }
    if (attempt_to_derive_exporter_if_none_was_specified){
        Decide_What_Exporter_To_Use(input);
    }
    if (attempt_to_adjust_workspace){
        Decide_The_Workspace_Settings(input);
    }
❱
◀private: static▶ void ☀Ensure_Things(Program_Input const& input)❰

    //Ensure the enrichment phase has properly set things
    Ensure_We_Have_Files_To_Process(input);
    Ensure_We_Have_An_Exporter_Chosen(input);
❱
◀private: static▶ void ☀Decide_What_Files_To_Transcompile(Program_Input & input, std::string const& expected_file_extension)❰
    
    //if no files were passed, get all of the files in the directory
    if (input.options.input_files.empty()){
        input.options.input_files = Get_Everything_At_Path_With_The_File_Extension(expected_file_extension);
    }
❱
◀private: static▶ void ☀Decide_What_Exporter_To_Use(Program_Input & input)❰
    if (input.options.user_chosen_export_settings.exporter == Chosen_Exporter::NONE){
        input.options.user_chosen_export_settings.exporter = input.settings.default_exporter;
    }
❱
◀private: static▶ void ☀Decide_The_Workspace_Settings(Program_Input & input)❰
    // if we didn't choose any languages, assume we are doing a typical workflow
    // of generating and transferring elsewhere.
    // therefore, we will want to be in a different workspace to not clutter the actual unilang repo.
    if (input.options.user_chosen_export_settings.languages.empty()){
        input.settings.workspace.step_into = true;
    }
❱
◀private: static▶ void ☀Ensure_We_Have_Files_To_Process(Program_Input const& input)❰
    if (input.options.input_files.empty()){
        Diagnostic_Printer::Report(input.settings.initial_diags.no_files_to_process);
    }
❱
◀private: static▶ void ☀Ensure_We_Have_An_Exporter_Chosen(Program_Input const& input)❰
    if (input.options.user_chosen_export_settings.exporter == Chosen_Exporter::NONE){
        Diagnostic_Printer::Report(input.settings.initial_diags.no_exporter_chosen);
    }
❱