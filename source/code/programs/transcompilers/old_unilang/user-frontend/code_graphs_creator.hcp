class
❪vector❫
❪string❫
⚯
❪"code/utilities/types/strings/transformers/stripping/lib"❫
⚞⚟

◀public: static▶ std::vector<Code_Graph> ☀Turn_Files_Into_Code_Graphs(Program_Input const& input)❰
    std::vector<Code_Graph> graphs;
    for (auto const& it: input.options.input_files){
        auto g = Parse_File(it,input.settings,input.options);
        graphs.emplace_back(g);
    }
    return graphs;
❱

◀private: static▶ Code_Graph ☀Parse_File(std::string const& path_to_file, Root_Settings const& settings, Composed_Program_Options const& program_options)❰

    //derive filename from the path
    auto file_name = Get_File_Name_From_File_Path(path_to_file);
    
    //check if something is initially wrong with the path and filename sent to the compiler
    //might throw..
    Filename_Validator::Validate_Input_File(settings.file_validation,file_name,settings.parser.input_files.expected_file_extension);
    
    //read in the entire file first so that we have it in memory.
    //This is useful for testing too, where we can pass test strings into the frontend
    //without having to actually create files in unit tests.
    Fully_Read_File file(file_name);
    
    //I would like the backend compiler to return something like 
    //full strings for the files one day.  We would want to write to
    //disk at the very very end.
    auto code_graph = Front_End(file,settings,program_options);
    
    return code_graph;
❱

◀private: static▶ Code_Graph ☀Front_End(Fully_Read_File const& file, Root_Settings const& settings, Composed_Program_Options const& program_options)❰

    //Apart from just parsing the file that needs compiled, 
    //we will also need to compile all of the file's dependencies and store them in a graph data structure
    //create a graph of these classes to handle the dependencies.
    //might throw...
    auto code_graph = Parser::Parse(file,program_options.dependency_paths,settings.parser);
    
    //before compiling the source file,
    //make the necessary code graph transformations automatically
    //this will include actions like:  
    // - specific transformations from settings
    // - inlining structures
    // - deriving import relations
    Code_Graph_Adjuster::Adjust(code_graph,settings,program_options);
    
    if (settings.static_analysis.analyze){
        Structure_Static_Analyzer::Print_Warnings(code_graph.structure,settings.static_analysis);
    }
    
    return code_graph;
❱