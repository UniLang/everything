class
❪string❫
❪vector❫
❪"code/utilities/formats/artifact/artifact_type"❫
⚯

⚞⚟


//if you didn't provide which languages/artifacts to go to, that's fine.
//we'll figure out based on some kind of context.
//this way we can run a single shell command (unilang (without any flags)) that does everything,
//Then we don't have to worry about about any complicated cli, or big config files.  
//don't get me wrong, you can still override all the default deduction through those other methods.
//but usually I'm not jumping around to too many repos, so I can just specify a context and allow these helpful deductions.

//TODO(thickey): pretty much all the languages this impl chooses,
//is based on the context of the company/repo I'm working in.
//we need configs for that context.  context being like company_name or something.
//we can probably leverage or mirror the --exporter property.

//TODO(thickey): we may want to do a language bundle pack.  
//i.e. cpp,cpp_test,cpp_benchmark, etc are all in the cpp_full_pack.
//eh, right now I don't see that as a very big deal

◀public: static▶ std::vector<Artifact_Type> ☀Guess(Structure const& structure)❰

    //todo(thickey): dispatch for other exporters
    return Uber_Guess(structure);
❱


◀public: static▶ std::vector<Artifact_Type> ☀Guess(std::vector<Code_Graph> const& code_graphs)❰

    //todo(thickey): dispatch for other exporters
    return Uber_Guess(code_graphs);
❱









◀public: static▶ std::vector<Artifact_Type> ☀Uber_Guess(Structure const& structure)❰
    std::vector<Artifact_Type> langs;
    
    //eh, its just data-- no methods.
    //do you want to do something a bit more language agnostic?
    //some kind of IDL? Uber might switch to protobuf in the future.
    if (structure.methods.methods.empty() && !structure.data_members.data_members.empty()){
        langs.emplace_back(Artifact_Type::HIDL);
    }
    

    //its got methods?  ok, its probably actual code then.
    //what language do we use these days?  let's transcompile to that.
    if (!structure.methods.methods.empty()){

        langs.emplace_back(Artifact_Type::CPP);
        langs.emplace_back(Artifact_Type::CPP_TEST);
        langs.emplace_back(Artifact_Type::CPP_BENCHMARK);
        
        // we may want to export temporal data so the generation remains deterministic
        // yeah, I woke up the day after new years and saw that unilang was generating different code.
        // sure enough this had to do with the date in a copyright comment.
        langs.emplace_back(Artifact_Type::DATE);
    }
    
    return langs;
❱

◀public: static▶ std::vector<Artifact_Type> ☀Uber_Guess(std::vector<Code_Graph> const& code_graphs)❰

    std::vector<Artifact_Type> langs;

    //do we need to generate any files for the collective group of unilang files?
    //yes, the build files for the current build system.
    langs.emplace_back(Artifact_Type::BAZEL);

    //we may also want to do this for collective documentation
    //TODO(thickey): ...

    return langs;
❱