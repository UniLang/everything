class
❪"code/utilities/streams/filestreams/lib"❫
❪"code/utilities/types/strings/transformers/casing/lib"❫
❪"code/utilities/fonts/bdf/tokens/token_bdf_settings_getter"❫
⚯

⚞⚟

◀public: static▶ All_Language_Tokens ☀Get() ❰

    //might want to do something cleaner to enforce the depth.
    //doesn't matter that much though, because other tools can just
    //export this and show the depth that way.
    All_Language_Tokens all;
    all.tokens.emplace_back(Meta_Code_Type());
    all.tokens.emplace_back(Meta_Brief_Comment());
    all.tokens.emplace_back(Meta_Detail_Comment());
    all.tokens.emplace_back(Meta_Group_Name());
    all.tokens.emplace_back(Meta_Author());
    all.tokens.emplace_back(Meta_Bug());
    all.tokens.emplace_back(Meta_Warning());
        all.tokens.emplace_back(Meta_Subgroup_Name());
        all.tokens.emplace_back(Meta_Subgroup_Description());
        all.tokens.emplace_back(Meta_Specification_File_Path());
        all.tokens.emplace_back(Meta_Specification_File_Description());
        all.tokens.emplace_back(Meta_Forseeable_Change());
        all.tokens.emplace_back(Meta_Forseeable_Change_Reason());
        all.tokens.emplace_back(Meta_Forseeable_Change_Reason_Percentage());
        
        
    all.tokens.emplace_back(Citation_Type());
    all.tokens.emplace_back(Citation_Id());
        all.tokens.emplace_back(Citation_Key());
        all.tokens.emplace_back(Citation_Value());
        
    all.tokens.emplace_back(Literary_Depth());
    all.tokens.emplace_back(Literary_Paragraph_Properties());
    all.tokens.emplace_back(Literary_Title());
        all.tokens.emplace_back(Literary_Outline_Point());
        all.tokens.emplace_back(Literary_Thought_Connection_From());
        all.tokens.emplace_back(Literary_Thought_Connection_Edge());
        all.tokens.emplace_back(Literary_Thought_Connection_To());
        all.tokens.emplace_back(Literary_Sentence_Name());
        all.tokens.emplace_back(Literary_Sentence());
        all.tokens.emplace_back(Literary_Sentence_Author_Note());
            all.tokens.emplace_back(Literary_Sentence_Tag());
            all.tokens.emplace_back(Literary_Image_Path());
            all.tokens.emplace_back(Literary_Image_Alternative_Text());
            all.tokens.emplace_back(Literary_Image_Hover_Text());
            all.tokens.emplace_back(Literary_Image_Width());
            all.tokens.emplace_back(Literary_Sentence_Code_Line());
            all.tokens.emplace_back(Literary_Image_Height());
            all.tokens.emplace_back(Literary_Table_Title());
                all.tokens.emplace_back(Literary_Table_Header());
                all.tokens.emplace_back(Literary_Table_Row());
    all.tokens.emplace_back(Type_Brief_Description());
    all.tokens.emplace_back(Type_Detailed_Description());
    all.tokens.emplace_back(Type_Name());
    all.tokens.emplace_back(Library());
    all.tokens.emplace_back(COPTS());
    all.tokens.emplace_back(LINKOPTS());
    all.tokens.emplace_back(Import_Interface_Specifiers());
    all.tokens.emplace_back(Import_Interface_Name());
    all.tokens.emplace_back(Import_Interface_Comment());
        all.tokens.emplace_back(Import_Interface_Relationship());
        all.tokens.emplace_back(Import_Interface_Related());
    all.tokens.emplace_back(Import_Implementation_Specifiers());
    all.tokens.emplace_back(Import_Implementation_Name());
    all.tokens.emplace_back(Import_Implementation_Comment());
        all.tokens.emplace_back(Import_Implementation_Relationship());
        all.tokens.emplace_back(Import_Implementation_Related());
    all.tokens.emplace_back(Import_Test_Specifiers());
    all.tokens.emplace_back(Import_Test_Name());
    all.tokens.emplace_back(Import_Test_Comment());
        all.tokens.emplace_back(Import_Test_Relationship());
        all.tokens.emplace_back(Import_Test_Related());
    all.tokens.emplace_back(Namespace_Specifiers());
    all.tokens.emplace_back(Namespace_Name());
    all.tokens.emplace_back(Inheritance_Specifiers());
    all.tokens.emplace_back(Inheritance_Type());
    all.tokens.emplace_back(Forward_Declare_Argument());
    all.tokens.emplace_back(Object_Template_Argument_Qualifiers());
    all.tokens.emplace_back(Object_Template_Argument_Type());
    all.tokens.emplace_back(Object_Template_Argument_Identifier());
    all.tokens.emplace_back(Object_Template_Argument_Default());
    all.tokens.emplace_back(Object_Template_Argument_Units());
    all.tokens.emplace_back(Object_Template_Argument_Comment());
        all.tokens.emplace_back(Object_Template_Argument_Type_Concepts());
    all.tokens.emplace_back(Function_Class_Specifiers());
    all.tokens.emplace_back(Function_Subgroup_Name());
    all.tokens.emplace_back(Function_Brief_Description());
    all.tokens.emplace_back(Function_Detailed_Description());
    all.tokens.emplace_back(Function_Detailed_Name());
    all.tokens.emplace_back(Function_Unique_Mangle_Name());
        all.tokens.emplace_back(Function_Alternative_Expression_Name());
        all.tokens.emplace_back(Function_Precondition());
        all.tokens.emplace_back(Function_Precondition_Comment());
        all.tokens.emplace_back(Function_Postcondition());
        all.tokens.emplace_back(Function_Postcondition_Comment());
    all.tokens.emplace_back(Function_Stamp_Name());
        all.tokens.emplace_back(Function_Stamp_Value());
    all.tokens.emplace_back(Function_Template_Argument_Qualifiers());
    all.tokens.emplace_back(Function_Template_Argument_Type());
    all.tokens.emplace_back(Function_Template_Argument_Identifier());
    all.tokens.emplace_back(Function_Template_Argument_Default());
    all.tokens.emplace_back(Function_Template_Argument_Units());
    all.tokens.emplace_back(Function_Template_Argument_Comment());
    all.tokens.emplace_back(Function_Template_Argument_Concepts());
    all.tokens.emplace_back(Function_Argument_Type_Qualifiers());
    all.tokens.emplace_back(Function_Argument_Type());
    all.tokens.emplace_back(Function_Argument_Type_Scope());
    all.tokens.emplace_back(Function_Argument_Type_Specializations());
    all.tokens.emplace_back(Function_Argument_Type_Specializations_Scope());
    all.tokens.emplace_back(Function_Argument_Identifier());
    all.tokens.emplace_back(Function_Argument_Units());
    all.tokens.emplace_back(Function_Argument_Default());
    all.tokens.emplace_back(Function_Argument_Comment());
        all.tokens.emplace_back(Function_Argument_Type_Module_Dependencies());
        all.tokens.emplace_back(Function_Argument_Type_Library_Dependencies());
    all.tokens.emplace_back(Function_Result_Type_Qualifiers());
    all.tokens.emplace_back(Function_Result_Type());
    all.tokens.emplace_back(Function_Result_Type_Identifier());
    all.tokens.emplace_back(Function_Result_Units());
    all.tokens.emplace_back(Function_Result_Default());
    all.tokens.emplace_back(Function_Result_Comment());
        all.tokens.emplace_back(Function_Result_Type_Scope());
        all.tokens.emplace_back(Function_Result_Type_Specializations());
            all.tokens.emplace_back(Function_Result_Type_Specializations_Scope());
        all.tokens.emplace_back(Function_Result_Type_Module_Dependencies());
        all.tokens.emplace_back(Function_Result_Type_Library_Dependencies());
    all.tokens.emplace_back(Function_Except_Expression());
    all.tokens.emplace_back(Function_Except_Comment());
    all.tokens.emplace_back(Function_Body());
    all.tokens.emplace_back(Function_Test_Case_Name());
    all.tokens.emplace_back(Function_Test_Case_Tag());
    all.tokens.emplace_back(Function_Test_Case_Reason_For_Testing());
        all.tokens.emplace_back(Function_Test_Case_Reason_For_Failing());
    all.tokens.emplace_back(Function_Test_Case_Body());
    all.tokens.emplace_back(Function_Benchmark_Case_Name());
    all.tokens.emplace_back(Function_Benchmark_Case_Tag());
    all.tokens.emplace_back(Function_Benchmark_Case_Setup());
    all.tokens.emplace_back(Function_Benchmark_Case_Action());
    all.tokens.emplace_back(Function_Benchmark_Argument_Name());
    all.tokens.emplace_back(Function_Benchmark_Argument_Low());
    all.tokens.emplace_back(Function_Benchmark_Argument_High());
    all.tokens.emplace_back(Function_Benchmark_Argument_Multiplier());
    all.tokens.emplace_back(Typedef_Specifiers());
    all.tokens.emplace_back(Typedef_Brief_Description());
    all.tokens.emplace_back(Typedef_Detailed_Description());
    all.tokens.emplace_back(Typedef_Name());
    all.tokens.emplace_back(Typedef_Return());
    all.tokens.emplace_back(Typedef_Return_Comment());
    all.tokens.emplace_back(Typedef_Argument());
    all.tokens.emplace_back(Typedef_Argument_Comment());
    all.tokens.emplace_back(Data_Member_Brief());
    all.tokens.emplace_back(Data_Member_Detailed());
    all.tokens.emplace_back(Data_Member_Class_Specifiers());
    all.tokens.emplace_back(Data_Member_Type_Qualifiers());
    all.tokens.emplace_back(Data_Member_Identifier());
    all.tokens.emplace_back(Data_Member_Units());
    all.tokens.emplace_back(Data_Member_Default_Value());
    all.tokens.emplace_back(Data_Member_Partial_Pack_Amount());
    all.tokens.emplace_back(Data_Member_Type());
    all.tokens.emplace_back(Data_Member_Indexes_To_Identifier());
        all.tokens.emplace_back(Data_Member_Scope());
        all.tokens.emplace_back(Data_Member_Type_Specializations());
            all.tokens.emplace_back(Data_Member_Type_Specializations_Scope());
        all.tokens.emplace_back(Data_Member_Type_Module_Dependencies());
        all.tokens.emplace_back(Data_Member_Type_Library_Dependencies());
        all.tokens.emplace_back(Data_Member_Parent_Type());
        all.tokens.emplace_back(Data_Member_Pair_Key());
        all.tokens.emplace_back(Data_Member_Pair_Value());
        all.tokens.emplace_back(Data_Member_Constraint_Operation());
        all.tokens.emplace_back(Data_Member_Constraint_Value());
        all.tokens.emplace_back(Data_Member_Broken_Constraint_Meaning());
        all.tokens.emplace_back(Data_Member_Broken_Constraint_Display_Theme());
        all.tokens.emplace_back(Data_Member_Defined_Value_Operation());
        all.tokens.emplace_back(Data_Member_Defined_Value());
        all.tokens.emplace_back(Data_Member_Defined_Value_Meaning());
        all.tokens.emplace_back(Data_Member_Defined_Value_Display_Theme());
        all.tokens.emplace_back(Data_Member_Transition_Before_Operation());
        all.tokens.emplace_back(Data_Member_Transition_Before_Value());
        all.tokens.emplace_back(Data_Member_Transition_After_Operation());
        all.tokens.emplace_back(Data_Member_Transition_After_Value());
        all.tokens.emplace_back(Data_Member_Transition_Meaning());
        all.tokens.emplace_back(Data_Member_Transition_Display_Theme());
    all.tokens.emplace_back(Enum_Brief());
    all.tokens.emplace_back(Enum_Detail());
    all.tokens.emplace_back(Enum_Name());
    all.tokens.emplace_back(Enum_Specifiers());
    all.tokens.emplace_back(Enum_Base_Type());
        all.tokens.emplace_back(Enum_Subgroup_Name());
        all.tokens.emplace_back(Enum_Subgroup_Description());
        all.tokens.emplace_back(Enum_Arg_Name());
        all.tokens.emplace_back(Enum_Arg_Value());
        all.tokens.emplace_back(Enum_Arg_Comment());
            all.tokens.emplace_back(Enum_Arg_Group_Affiliation());
    all.tokens.emplace_back(Macro_Specifiers());
    all.tokens.emplace_back(Macro_Name());
    all.tokens.emplace_back(Macro_Units());
        all.tokens.emplace_back(Macro_Argument_Identifier());
        all.tokens.emplace_back(Macro_Argument_Comment());
        all.tokens.emplace_back(Macro_Brief());
        all.tokens.emplace_back(Macro_Detail());
        all.tokens.emplace_back(Macro_Value());
    all.tokens.emplace_back(File_Wide_Invariant());
    all.tokens.emplace_back(File_Wide_Invariant_Comment());
    all.tokens.emplace_back(Run_Shell_Command());
    all.tokens.emplace_back(Test_Case_Name());
    all.tokens.emplace_back(Test_Case_Tag());
    all.tokens.emplace_back(Test_Case_Body());
    
    
all.body_tokens.emplace_back(Regular_Comment());
all.body_tokens.emplace_back(Todo_Comment());
all.body_tokens.emplace_back(Warning_Comment());
all.body_tokens.emplace_back(Regular_Statement());
all.body_tokens.emplace_back(Return_Statement());
all.body_tokens.emplace_back(Uncaught_Statement());
all.body_tokens.emplace_back(Statement());
all.body_tokens.emplace_back(Body_Parameter());
all.body_tokens.emplace_back(Self_Data_Member());
all.body_tokens.emplace_back(Self_Data_Member_Without_Obj());
all.body_tokens.emplace_back(Local_Data_Member());
all.body_tokens.emplace_back(Sub_Member());
all.body_tokens.emplace_back(Self_Function_Call());
all.body_tokens.emplace_back(Foreign_Function_Call());
all.body_tokens.emplace_back(Return());


//additional depreciations

//do we turn self function call into just "function call"
//or do we separate them and make a new "external function call"?
//both/\ (local/external/have the compiler figure it out)

//deceleration:
//brief
//detail
//type qualifiers
//type
//identifier
//default value
//(C would place these at the top of functions automatically)

//bit packing?
//endianess?
//address size envariances?


//constraints on the value:
//must not exceed 8 (self <= 8)
//could do weird things like 'must be even' (IsEven(self))
    
//network data packing.
//serialization/de-serialization
//We need an attribute language for describing network data packing/unpacking.
//this will apply to data members
//Things to consider:
//address size invariance:
//    DWORD (8 bytes)
//    WORD (4 bytes)
    
//endianess:
//    big / small /middle
    
//bit packing:
//for example: 8 bools packed into a byte
    
//padding and no padding
//use pragmas to prevent struct padding [I added the token already]
    
//oh! we need universal type mapping.
//a set of basic types that I can use in any language, and have a converter available


//------------------
//testing:
//we need to read a few books on unit testing first

//split into 4 separate blocks?
//-arrange
//-assume
//-act
//-assert
//*some people are saying that the assume part is not needed.  
//if you wanted to do something before your act, you would have tests like:
//arrange, empty act, assert.  followed by another test that does arrange, empty act, assert

//this test proves: __
//this test will catch: __
//if the test breaks, it means: __
//----------------------




all.standalone_symbols.CLASS_NAME_CODE_FORM_MACRO = L'􏶐';
all.standalone_symbols.CLASS_NAME_PRINT_FORM_MACRO = L'􏶏';
all.standalone_symbols.TEST_OBJECT_CLASS_NAME = L'􏶍';
all.standalone_symbols.ESCAPE_CHARACTER = L'􏶎';
all.standalone_symbols.NULL_MACRO=L'􏵃';
all.standalone_symbols.TRUE_MACRO = L'􏵱';
all.standalone_symbols.FALSE_MACRO = L'􏵰';
    return all;
❱


◀public: static▶ Token ☀Meta_Code_Type() ❰
    Token t;
    t.name = Token_Name::META_DATA_CODE_TYPE;
    t.start = L'􏶞';
    t.end = L'􏶟';
    t.fg_color = "#45252B";
    t.bg_color = "#000000";
    t.groups.emplace_back(Token_Group::META);
    t.description = "how the UniLang compiler should treat the file when compiling (object type or global type)";
    t.bdf = Token_Bdf_Settings_Getter::Get_Square_Bracket();
    return t;
❱
◀public: static▶ Token ☀Meta_Brief_Comment() ❰
    Token t;
    t.name = Token_Name::META_DATA_BRIEF_DESCRIPTION;
    t.start = L'􏷲';
    t.end = L'􏷱';
    t.fg_color = "#66432A";
    t.bg_color = "#000000";
    t.groups.emplace_back(Token_Group::META);
    t.description = "A brief description of the object or set of functions that make up the file";
    t.bdf = Token_Bdf_Settings_Getter::Get_Square_Bracket();
    return t;
❱
◀public: static▶ Token ☀Meta_Detail_Comment() ❰
    Token t;
    t.name = Token_Name::META_DATA_DETAILED_DESCRIPTION;
    t.start = L'􏷰';
    t.end = L'􏷯';
    t.fg_color = "#66652A";
    t.bg_color = "#000000";
    t.groups.emplace_back(Token_Group::META);
    t.description = "A detailed description of the object or set of functions that make up the file";
    t.bdf = Token_Bdf_Settings_Getter::Get_Square_Bracket();
    return t;
❱
◀public: static▶ Token ☀Meta_Group_Name() ❰
    Token t;
    t.name = Token_Name::META_DATA_GROUP_NAME;
    t.start = L'􏷮';
    t.end = L'􏷭';
    t.fg_color = "#2A662E";
    t.bg_color = "#000000";
    t.groups.emplace_back(Token_Group::META);
    t.description = "A categorical group name to help organize code";
    t.bdf = Token_Bdf_Settings_Getter::Get_Square_Bracket();
    return t;
❱
◀public: static▶ Token ☀Meta_Author() ❰
    Token t;
    t.name = Token_Name::META_DATA_AUTHOR;
    t.start = L'􏷬';
    t.end = L'􏷫';
    t.fg_color = "#2A4866";
    t.bg_color = "#000000";
    t.groups.emplace_back(Token_Group::META);
    t.description = "one of the authors of the files";
    t.bdf = Token_Bdf_Settings_Getter::Get_Square_Bracket();
    return t;
❱
◀public: static▶ Token ☀Meta_Bug() ❰
    Token t;
    t.name = Token_Name::META_DATA_BUG;
    t.start = L'􏷪';
    t.end = L'􏷩';
    t.fg_color = "#623366";
    t.bg_color = "#000000";
    t.groups.emplace_back(Token_Group::META);
    t.description = "a known bug about the object or set of functions";
    t.bdf = Token_Bdf_Settings_Getter::Get_Square_Bracket();
    return t;
❱
◀public: static▶ Token ☀Meta_Warning() ❰
    Token t;
    t.name = Token_Name::META_DATA_WARNING;
    t.start = L'􏷨';
    t.end = L'􏷧';
    t.fg_color = "#922127";
    t.bg_color = "#000000";
    t.groups.emplace_back(Token_Group::META);
    t.description = "a warning about using the object or set of functions";
    t.bdf = Token_Bdf_Settings_Getter::Get_Square_Bracket();
    return t;
❱
◀public: static▶ Token ☀Meta_Depreciation() ❰
    Token t;
    t.name = Token_Name::META_DATA_DEPRECIATION;
    t.start = L'􏷖';
    t.end = L'􏷕';
    t.fg_color = "#876E51";
    t.bg_color = "#000000";
    t.groups.emplace_back(Token_Group::META);
    t.description = "reasons why the object or set of functions are depreciated";
    t.bdf = Token_Bdf_Settings_Getter::Get_Square_Bracket();
    return t;
❱
◀public: static▶ Token ☀Meta_Subgroup_Name() ❰
    Token t;
    t.name = Token_Name::META_SUBGROUP_NAME;
    t.start = L'􏴃';
    t.end = L'􏴄';
    t.fg_color = "#3DFF5D";
    t.bg_color = "#000000";
    t.groups.emplace_back(Token_Group::META);
    t.groups.emplace_back(Token_Group::META_SUBGROUP);
    t.description = "the name of a subgroup that can be used for group documenting methods or data members";
    t.bdf = Token_Bdf_Settings_Getter::Get_Weird_Square();
    return t;
❱
◀public: static▶ Token ☀Meta_Subgroup_Description() ❰
    Token t;
    t.name = Token_Name::META_SUBGROUP_DESCRIPTION;
    t.start = L'􏴁';
    t.end = L'􏴂';
    t.fg_color = "#95F5A4";
    t.bg_color = "#000000";
    t.groups.emplace_back(Token_Group::META);
    t.groups.emplace_back(Token_Group::META_SUBGROUP);
    t.description = "a description of the subgroup that is applied in the documentation grouping";
    t.bdf = Token_Bdf_Settings_Getter::Get_Weird_Square();
    return t;
❱
◀public: static▶ Token ☀Meta_Specification_File_Path() ❰
    Token t;
    t.name = Token_Name::META_SPECIFICATION_FILE_PATH;
    t.start = L'􏵔';
    t.end = L'􏵕';
    t.fg_color = "#CE5D37";
    t.bg_color = "#000000";
    t.groups.emplace_back(Token_Group::META);
    t.groups.emplace_back(Token_Group::META_SPECIFICATION_FILE);
    t.description = "path to specification documents, ICDs, designs, requirements, etc";
    t.bdf = Token_Bdf_Settings_Getter::Get_Square_Bracket();
    return t;
❱
◀public: static▶ Token ☀Meta_Specification_File_Description() ❰
    Token t;
    t.name = Token_Name::META_SPECIFICATION_FILE_DESCRIPTION;
    t.start = L'􏵒';
    t.end = L'􏵓';
    t.fg_color = "#CEAB37";
    t.bg_color = "#000000";
    t.groups.emplace_back(Token_Group::META);
    t.groups.emplace_back(Token_Group::META_SPECIFICATION_FILE);
    t.description = "a brief description of what the specification file is";
    t.bdf = Token_Bdf_Settings_Getter::Get_Square_Bracket();
    return t;
❱
◀public: static▶ Token ☀Meta_Forseeable_Change() ❰
    Token t;
    t.name = Token_Name::META_FORSEEABLE_CHANGE;
    t.start = L'􏴋';
    t.end = L'􏴌';
    t.fg_color = "#CE5D37";
    t.bg_color = "#000000";
    t.groups.emplace_back(Token_Group::META);
    t.groups.emplace_back(Token_Group::META_FORSEEABLE_CHANGE);
    t.description = "something that may change about the whole module of code";
    t.bdf = Token_Bdf_Settings_Getter::Get_Square_Bracket();
    return t;
❱
◀public: static▶ Token ☀Meta_Forseeable_Change_Reason() ❰
    Token t;
    t.name = Token_Name::META_FORSEEABLE_CHANGE_REASON;
    t.start = L'􏴉';
    t.end = L'􏴊';
    t.fg_color = "#CE5D37";
    t.bg_color = "#000000";
    t.groups.emplace_back(Token_Group::META);
    t.groups.emplace_back(Token_Group::META_FORSEEABLE_CHANGE);
    t.description = "the reason this change may happen";
    t.bdf = Token_Bdf_Settings_Getter::Get_Square_Bracket();
    return t;
❱
◀public: static▶ Token ☀Meta_Forseeable_Change_Reason_Percentage() ❰
    Token t;
    t.name = Token_Name::META_FORSEEABLE_REASON_PERCENTAGE;
    t.start = L'􏴇';
    t.end = L'􏴈';
    t.fg_color = "#CE5D37";
    t.bg_color = "#000000";
    t.groups.emplace_back(Token_Group::META);
    t.groups.emplace_back(Token_Group::META_FORSEEABLE_CHANGE);
    t.description = "the likelihood that change may happen";
    t.bdf = Token_Bdf_Settings_Getter::Get_Square_Bracket();
    return t;
❱
◀public: static▶ Token ☀Citation_Type() ❰
    Token t;
    t.name = Token_Name::CITATION_TYPE;
    t.start = L'􏱅';
    t.end = L'􏱆';
    t.fg_color = "#CE5D37";
    t.bg_color = "#000000";
    t.groups.emplace_back(Token_Group::CITATIONS);
    t.description = "the type of the citation";
    t.bdf = Token_Bdf_Settings_Getter::Get_Square_Bracket();
    return t;
❱
◀public: static▶ Token ☀Citation_Id() ❰
    Token t;
    t.name = Token_Name::CITATION_ID;
    t.start = L'􏱃';
    t.end = L'􏱄';
    t.fg_color = "#CE5D37";
    t.bg_color = "#000000";
    t.groups.emplace_back(Token_Group::CITATIONS);
    t.description = "a unique name for the id";
    t.bdf = Token_Bdf_Settings_Getter::Get_Square_Bracket();
    return t;
❱
◀public: static▶ Token ☀Citation_Key() ❰
    Token t;
    t.name = Token_Name::CITATION_KEY;
    t.start = L'􏱁';
    t.end = L'􏱂';
    t.fg_color = "#CE5D37";
    t.bg_color = "#000000";
    t.groups.emplace_back(Token_Group::CITATIONS);
    t.groups.emplace_back(Token_Group::CITATION_ATTRIBUTES);
    t.description = "the key of a citation attribute";
    t.bdf = Token_Bdf_Settings_Getter::Get_Square_Bracket();
    return t;
❱
◀public: static▶ Token ☀Citation_Value() ❰
    Token t;
    t.name = Token_Name::CITATION_VALUE;
    t.start = L'􏰿';
    t.end = L'􏱀';
    t.fg_color = "#CE5D37";
    t.bg_color = "#000000";
    t.groups.emplace_back(Token_Group::CITATIONS);
    t.groups.emplace_back(Token_Group::CITATION_ATTRIBUTES);
    t.description = "the key of a citation attribute";
    t.bdf = Token_Bdf_Settings_Getter::Get_Square_Bracket();
    return t;
❱
◀public: static▶ Token ☀Literary_Depth() ❰
    Token t;
    t.name = Token_Name::LITERARY_DEPTH;
    t.start = L'􏱭';
    t.end = L'􏱮';
    t.fg_color = "#66432A";
    t.bg_color = "#000000";
    t.groups.emplace_back(Token_Group::LITERATURE);
    t.description = "the depth of the particular literature segment";
    t.bdf = Token_Bdf_Settings_Getter::Get_Square_Bracket();
    return t;
❱
◀public: static▶ Token ☀Literary_Paragraph_Properties() ❰
    Token t;
    t.name = Token_Name::LITERARY_SENTENCE_PROPERTIES;
    t.start = L'􏱕';
    t.end = L'􏱖';
    t.fg_color = "#CE5D37";
    t.bg_color = "#000000";
    t.groups.emplace_back(Token_Group::LITERATURE);
    t.description = "properties of the paragraph";
    t.bdf = Token_Bdf_Settings_Getter::Get_Square_Bracket();
    return t;
❱
◀public: static▶ Token ☀Literary_Title() ❰
    Token t;
    t.name = Token_Name::LITERARY_TITLE;
    t.start = L'􏱫';
    t.end = L'􏱬';
    t.fg_color = "#CEAB37";
    t.bg_color = "#000000";
    t.groups.emplace_back(Token_Group::LITERATURE);
    t.description = "the title of the particular literature segment";
    t.bdf = Token_Bdf_Settings_Getter::Get_Square_Bracket();
    return t;
❱
◀public: static▶ Token ☀Literary_Outline_Point() ❰
    Token t;
    t.name = Token_Name::LITERARY_OUTLINE_POINT;
    t.start = L'􏱏';
    t.end = L'􏱐';
    t.fg_color = "#623366";
    t.bg_color = "#000000";
    t.groups.emplace_back(Token_Group::LITERATURE);
    t.groups.emplace_back(Token_Group::LITERATURE_OUTLINE_POINT);
    t.description = "an outline point for the paragraph";
    t.bdf = Token_Bdf_Settings_Getter::Get_Square_Bracket();
    return t;
❱
◀public: static▶ Token ☀Literary_Thought_Connection_From() ❰
    Token t;
    t.name = Token_Name::LITERARY_THOUGHT_CONNECTION_FROM;
    t.start = L'􏱋';
    t.end = L'􏱌';
    t.fg_color = "#66652A";
    t.bg_color = "#000000";
    t.groups.emplace_back(Token_Group::LITERATURE);
    t.groups.emplace_back(Token_Group::LITERATURE_THOUGHT_CONNECTION);
    t.description = "part of a thought connection";
    t.bdf = Token_Bdf_Settings_Getter::Get_Square_Bracket();
    return t;
❱
◀public: static▶ Token ☀Literary_Thought_Connection_Edge() ❰
    Token t;
    t.name = Token_Name::LITERARY_THOUGHT_CONNECTION_EDGE;
    t.start = L'􏱇';
    t.end = L'􏱈';
    t.fg_color = "#66432A";
    t.bg_color = "#000000";
    t.groups.emplace_back(Token_Group::LITERATURE);
    t.groups.emplace_back(Token_Group::LITERATURE_THOUGHT_CONNECTION);
    t.description = "part of a thought connection";
    t.bdf = Token_Bdf_Settings_Getter::Get_Angle_Bracket();
    return t;
❱
◀public: static▶ Token ☀Literary_Thought_Connection_To() ❰
    Token t;
    t.name = Token_Name::LITERARY_THOUGHT_CONNECTION_TO;
    t.start = L'􏱉';
    t.end = L'􏱊';
    t.fg_color = "#66652A";
    t.bg_color = "#000000";
    t.groups.emplace_back(Token_Group::LITERATURE);
    t.groups.emplace_back(Token_Group::LITERATURE_THOUGHT_CONNECTION);
    t.description = "part of a thought connection";
    t.bdf = Token_Bdf_Settings_Getter::Get_Square_Bracket();
    return t;
❱
◀public: static▶ Token ☀Literary_Sentence_Name() ❰
    Token t;
    t.name = Token_Name::LITERARY_SENTENCE_NAME;
    t.start = L'􏱟';
    t.end = L'􏱠';
    t.fg_color = "#623366";
    t.bg_color = "#000000";
    t.groups.emplace_back(Token_Group::LITERATURE);
    t.groups.emplace_back(Token_Group::LITERATURE_SENTENCE);
    t.description = "a name for the sentence";
    t.bdf = Token_Bdf_Settings_Getter::Get_Square_Bracket();
    return t;
❱
◀public: static▶ Token ☀Literary_Sentence() ❰
    Token t;
    t.name = Token_Name::LITERARY_SENTENCE;
    t.start = L'􏱩';
    t.end = L'􏱪';
    t.fg_color = "#8797AF";
    t.bg_color = "#000000";
    t.groups.emplace_back(Token_Group::LITERATURE);
    t.groups.emplace_back(Token_Group::LITERATURE_SENTENCE);
    t.description = "a sentence in the literature segment";
    t.bdf = Token_Bdf_Settings_Getter::Get_Square_Bracket();
    return t;
❱
◀public: static▶ Token ☀Literary_Sentence_Author_Note() ❰
    Token t;
    t.name = Token_Name::LITERARY_SENTENCE_AUTHOR_NOTE;
    t.start = L'􏱧';
    t.end = L'􏱨';
    t.fg_color = "#56667A";
    t.bg_color = "#000000";
    t.groups.emplace_back(Token_Group::LITERATURE);
    t.groups.emplace_back(Token_Group::LITERATURE_SENTENCE);
    t.description = "an author's note about the sentence in the literature segment";
    t.bdf = Token_Bdf_Settings_Getter::Get_Square_Bracket();
    return t;
❱
◀public: static▶ Token ☀Literary_Sentence_Tag() ❰
    Token t;
    t.name = Token_Name::LITERARY_SENTENCE_TAG;
    t.start = L'􏱝';
    t.end = L'􏱞';
    t.fg_color = "#B8D8BA";
    t.bg_color = "#000000";
    t.groups.emplace_back(Token_Group::LITERATURE);
    t.groups.emplace_back(Token_Group::LITERATURE_SENTENCE);
    t.groups.emplace_back(Token_Group::LITERATURE_SENTENCE_TAG);
    t.description = "a tag for the sentence";
    t.bdf = Token_Bdf_Settings_Getter::Get_Square_Bracket();
    return t;
❱
◀public: static▶ Token ☀Literary_Sentence_Code_Line() ❰
    Token t;
    t.name = Token_Name::LITERARY_SENTENCE_CODE_LINE;
    t.start = L'􏱍';
    t.end = L'􏱎';
    t.fg_color = "#B8D8BA";
    t.bg_color = "#000000";
    t.groups.emplace_back(Token_Group::LITERATURE);
    t.groups.emplace_back(Token_Group::LITERATURE_SENTENCE);
    t.groups.emplace_back(Token_Group::LITERATURE_SENTENCE_CODE);
    t.description = "a code line for the sentence";
    t.bdf = Token_Bdf_Settings_Getter::Get_Square_Bracket();
    return t;
❱
◀public: static▶ Token ☀Literary_Image_Path() ❰
    Token t;
    t.name = Token_Name::LITERARY_IMAGE_PATH;
    t.start = L'􏱥';
    t.end = L'􏱦';
    t.fg_color = "#D9DBBC";
    t.bg_color = "#000000";
    t.groups.emplace_back(Token_Group::LITERATURE);
    t.groups.emplace_back(Token_Group::LITERATURE_SENTENCE);
    t.groups.emplace_back(Token_Group::LITERATURE_SENTENCE_IMAGE);
    t.description = "the sentence may preface or describe an image.  this is the path to that image";
    t.bdf = Token_Bdf_Settings_Getter::Get_Square_Bracket();
    return t;
❱
◀public: static▶ Token ☀Literary_Image_Alternative_Text() ❰
    Token t;
    t.name = Token_Name::LITERARY_IMAGE_ALTERNATIVE_TEXT;
    t.start = L'􏱣';
    t.end = L'􏱤';
    t.fg_color = "#FCDDBC";
    t.bg_color = "#000000";
    t.groups.emplace_back(Token_Group::LITERATURE);
    t.groups.emplace_back(Token_Group::LITERATURE_SENTENCE);
    t.groups.emplace_back(Token_Group::LITERATURE_SENTENCE_IMAGE);
    t.description = "alternative text for the image";
    t.bdf = Token_Bdf_Settings_Getter::Get_Square_Bracket();
    return t;
❱
◀public: static▶ Token ☀Literary_Image_Hover_Text() ❰
    Token t;
    t.name = Token_Name::LITERARY_IMAGE_HOVER_TEXT;
    t.start = L'􏱡';
    t.end = L'􏱢';
    t.fg_color = "#69585F";
    t.bg_color = "#000000";
    t.groups.emplace_back(Token_Group::LITERATURE);
    t.groups.emplace_back(Token_Group::LITERATURE_SENTENCE);
    t.groups.emplace_back(Token_Group::LITERATURE_SENTENCE_IMAGE);
    t.description = "hover text for the image";
    t.bdf = Token_Bdf_Settings_Getter::Get_Square_Bracket();
    return t;
❱
◀public: static▶ Token ☀Literary_Image_Width() ❰
    Token t;
    t.name = Token_Name::LITERARY_IMAGE_WIDTH;
    t.start = L'􏱓';
    t.end = L'􏱔';
    t.fg_color = "#D9DBBC";
    t.bg_color = "#000000";
    t.groups.emplace_back(Token_Group::LITERATURE);
    t.groups.emplace_back(Token_Group::LITERATURE_SENTENCE);
    t.groups.emplace_back(Token_Group::LITERATURE_SENTENCE_IMAGE);
    t.description = "the explicit with of the image";
    t.bdf = Token_Bdf_Settings_Getter::Get_Angle_Bracket();
    return t;
❱
◀public: static▶ Token ☀Literary_Image_Height() ❰
    Token t;
    t.name = Token_Name::LITERARY_IMAGE_HEIGHT;
    t.start = L'􏱑';
    t.end = L'􏱒';
    t.fg_color = "#D9DBBC";
    t.bg_color = "#000000";
    t.groups.emplace_back(Token_Group::LITERATURE);
    t.groups.emplace_back(Token_Group::LITERATURE_SENTENCE);
    t.groups.emplace_back(Token_Group::LITERATURE_SENTENCE_IMAGE);
    t.description = "the explicit height of the image";
    t.bdf = Token_Bdf_Settings_Getter::Get_Angle_Bracket();
    return t;
❱
◀public: static▶ Token ☀Literary_Table_Title() ❰
    Token t;
    t.name = Token_Name::LITERARY_SENTENCE_TABLE_TITLE;
    t.start = L'􏱛';
    t.end = L'􏱜';
    t.fg_color = "#546A7B";
    t.bg_color = "#000000";
    t.groups.emplace_back(Token_Group::LITERATURE);
    t.groups.emplace_back(Token_Group::LITERATURE_SENTENCE);
    t.groups.emplace_back(Token_Group::LITERATURE_SENTENCE_TABLE);
    t.description = "";
    t.bdf = Token_Bdf_Settings_Getter::Get_Square_Bracket();
    return t;
❱
◀public: static▶ Token ☀Literary_Table_Header() ❰
    Token t;
    t.name = Token_Name::LITERARY_SENTENCE_TABLE_HEADER;
    t.start = L'􏱙';
    t.end = L'􏱚';
    t.fg_color = "#9EA3B0";
    t.bg_color = "#000000";
    t.groups.emplace_back(Token_Group::LITERATURE);
    t.groups.emplace_back(Token_Group::LITERATURE_SENTENCE);
    t.groups.emplace_back(Token_Group::LITERATURE_SENTENCE_TABLE);
    t.groups.emplace_back(Token_Group::LITERATURE_SENTENCE_TABLE_HEADER);
    t.description = "";
    t.bdf = Token_Bdf_Settings_Getter::Get_Square_Bracket();
    return t;
❱
◀public: static▶ Token ☀Literary_Table_Row() ❰
    Token t;
    t.name = Token_Name::LITERARY_SENTENCE_TABLE_ROW;
    t.start = L'􏱗';
    t.end = L'􏱘';
    t.fg_color = "#E4C3AD";
    t.bg_color = "#000000";
    t.groups.emplace_back(Token_Group::LITERATURE);
    t.groups.emplace_back(Token_Group::LITERATURE_SENTENCE);
    t.groups.emplace_back(Token_Group::LITERATURE_SENTENCE_TABLE);
    t.groups.emplace_back(Token_Group::LITERATURE_SENTENCE_TABLE_ROW);
    t.description = "";
    t.bdf = Token_Bdf_Settings_Getter::Get_Square_Bracket();
    return t;
❱
◀public: static▶ Token ☀Type_Brief_Description() ❰
    Token t;
    t.name = Token_Name::TYPE_BRIEF_DESCRIPTION;
    t.start = L'􏳃';
    t.end = L'􏳄';
    t.fg_color = "#66432A";
    t.bg_color = "#000000";
    t.groups.emplace_back(Token_Group::TYPES);
    t.description = "a brief description of a new type";
    t.bdf = Token_Bdf_Settings_Getter::Get_Square_Bracket();
    return t;
❱
◀public: static▶ Token ☀Type_Detailed_Description() ❰
    Token t;
    t.name = Token_Name::TYPE_DETAILED_DESCRIPTION;
    t.start = L'􏳁';
    t.end = L'􏳂';
    t.fg_color = "#66432A";
    t.bg_color = "#000000";
    t.groups.emplace_back(Token_Group::TYPES);
    t.description = "a detailed description of a new type";
    t.bdf = Token_Bdf_Settings_Getter::Get_Square_Bracket();
    return t;
❱
◀public: static▶ Token ☀Type_Name() ❰
    Token t;
    t.name = Token_Name::TYPE_NAME;
    t.start = L'􏲿';
    t.end = L'􏳀';
    t.fg_color = "#D69125";
    t.bg_color = "#000000";
    t.groups.emplace_back(Token_Group::TYPES);
    t.description = "the name of the new type";
    t.bdf = Token_Bdf_Settings_Getter::Get_Square_Bracket();
    return t;
❱
◀public: static▶ Token ☀Library() ❰
    Token t;
    t.name = Token_Name::LIBRARY;
    t.start = L'􏲟';
    t.end = L'􏲠';
    t.fg_color = "#FFFF00";
    t.bg_color = "#000000";
    t.groups.emplace_back(Token_Group::LIBRARY);
    t.description = "a library include";
    t.bdf = Token_Bdf_Settings_Getter::Get_Exclamation_Point();
    return t;
❱
◀public: static▶ Token ☀COPTS() ❰
    Token t;
    t.name = Token_Name::COPTS;
    t.start = L'􏲃';
    t.end = L'􏲄';
    t.fg_color = "#FFFF00";
    t.bg_color = "#000000";
    t.groups.emplace_back(Token_Group::COPTS);
    t.description = "a copts library";
    t.bdf = Token_Bdf_Settings_Getter::Get_Exclamation_Point();
    return t;
❱
◀public: static▶ Token ☀LINKOPTS() ❰
    Token t;
    t.name = Token_Name::LINKOPTS;
    t.start = L'􏲁';
    t.end = L'􏲂';
    t.fg_color = "#FFFF00";
    t.bg_color = "#000000";
    t.groups.emplace_back(Token_Group::LINKOPTS);
    t.description = "a linkopts library";
    t.bdf = Token_Bdf_Settings_Getter::Get_Exclamation_Point();
    return t;
❱
◀public: static▶ Token ☀Import_Interface_Specifiers() ❰
    Token t;
    t.name = Token_Name::IMPORT_INTERFACE_SPECIFIERS;
    t.start = L'􏷤';
    t.end = L'􏷣';
    t.fg_color = "#1F4B22";
    t.bg_color = "#000000";
    t.groups.emplace_back(Token_Group::IMPORT_INTERFACE);
    t.description = "whether the file is a system file.  whether it is inlined";
    t.bdf = Token_Bdf_Settings_Getter::Get_Square_Bracket();
    return t;
❱
◀public: static▶ Token ☀Import_Interface_Name() ❰
    Token t;
    t.name = Token_Name::IMPORT_INTERFACE_NAME;
    t.start = L'􏷦';
    t.end = L'􏷥';
    t.fg_color = "#2A662E";
    t.bg_color = "#000000";
    t.groups.emplace_back(Token_Group::IMPORT_INTERFACE);
    t.description = "code to import into the interface of this code";
    t.bdf = Token_Bdf_Settings_Getter::Get_Square_Bracket();
    return t;
❱
◀public: static▶ Token ☀Import_Interface_Comment() ❰
    Token t;
    t.name = Token_Name::IMPORT_INTERFACE_COMMENT;
    t.start = L'􏷢';
    t.end = L'􏷡';
    t.fg_color = "#5C5C5C";
    t.bg_color = "#000000";
    t.groups.emplace_back(Token_Group::IMPORT_INTERFACE);
    t.description = "a comment about the code being imported";
    t.bdf = Token_Bdf_Settings_Getter::Get_Square_Bracket();
    return t;
❱
◀public: static▶ Token ☀Import_Interface_Relationship() ❰
    Token t;
    t.name = Token_Name::IMPORT_INTERFACE_RELATIONSHIP;
    t.start = L'􏴓';
    t.end = L'􏴔';
    t.fg_color = "#00ABB2";
    t.bg_color = "#000000";
    t.groups.emplace_back(Token_Group::IMPORT_INTERFACE);
    t.groups.emplace_back(Token_Group::IMPORT_INTERFACE_RELATIONSHIP);
    t.description = "the relationship of something included by the include";
    t.bdf = Token_Bdf_Settings_Getter::Get_Square_Bracket();
    return t;
❱
◀public: static▶ Token ☀Import_Interface_Related() ❰
    Token t;
    t.name = Token_Name::IMPORT_INTERFACE_RELATED;
    t.start = L'􏴑';
    t.end = L'􏴒';
    t.fg_color = "#3FF8FF";
    t.bg_color = "#000000";
    t.groups.emplace_back(Token_Group::IMPORT_INTERFACE);
    t.groups.emplace_back(Token_Group::IMPORT_INTERFACE_RELATIONSHIP);
    t.description = "a related thing being included";
    t.bdf = Token_Bdf_Settings_Getter::Get_Square_Bracket();
    return t;
❱
◀public: static▶ Token ☀Import_Implementation_Specifiers() ❰
    Token t;
    t.name = Token_Name::IMPORT_IMPLEMENTATION_SPECIFIERS;
    t.start = L'􏶔';
    t.end = L'􏶕';
    t.fg_color = "#4D2B13";
    t.bg_color = "#000000";
    t.groups.emplace_back(Token_Group::IMPORT_IMPLEMENTATION);
    t.description = "whether the file is a system file.  whether it is inlined";
    t.bdf = Token_Bdf_Settings_Getter::Get_Square_Bracket();
    return t;
❱
◀public: static▶ Token ☀Import_Implementation_Name() ❰
    Token t;
    t.name = Token_Name::IMPORT_IMPLEMENTATION_NAME;
    t.start = L'􏶒';
    t.end = L'􏶓';
    t.fg_color = "#66432A";
    t.bg_color = "#000000";
    t.groups.emplace_back(Token_Group::IMPORT_IMPLEMENTATION);
    t.description = "code to import into the interface of this code";
    t.bdf = Token_Bdf_Settings_Getter::Get_Square_Bracket();
    return t;
❱
◀public: static▶ Token ☀Import_Implementation_Comment() ❰
    Token t;
    t.name = Token_Name::IMPORT_IMPLEMENTATION_COMMENT;
    t.start = L'􏶖';
    t.end = L'􏶗';
    t.fg_color = "#5C5C5C";
    t.bg_color = "#000000";
    t.groups.emplace_back(Token_Group::IMPORT_IMPLEMENTATION);
    t.description = "a comment about the code being imported";
    t.bdf = Token_Bdf_Settings_Getter::Get_Square_Bracket();
    return t;
❱
◀public: static▶ Token ☀Import_Implementation_Relationship() ❰
    Token t;
    t.name = Token_Name::IMPORT_IMPLEMENTATION_RELATIONSHIP;
    t.start = L'􏴏';
    t.end = L'􏴐';
    t.fg_color = "#00ABB2";
    t.bg_color = "#000000";
    t.groups.emplace_back(Token_Group::IMPORT_IMPLEMENTATION);
    t.groups.emplace_back(Token_Group::IMPORT_IMPLEMENTATION_RELATIONSHIP);
    t.description = "the relationship of something included by the include";
    t.bdf = Token_Bdf_Settings_Getter::Get_Square_Bracket();
    return t;
❱
◀public: static▶ Token ☀Import_Implementation_Related() ❰
    Token t;
    t.name = Token_Name::IMPORT_IMPLEMENTATION_RELATED;
    t.start = L'􏴍';
    t.end = L'􏴎';
    t.fg_color = "#3FF8FF";
    t.bg_color = "#000000";
    t.groups.emplace_back(Token_Group::IMPORT_IMPLEMENTATION);
    t.groups.emplace_back(Token_Group::IMPORT_IMPLEMENTATION_RELATIONSHIP);
    t.description = "a related thing being included";
    t.bdf = Token_Bdf_Settings_Getter::Get_Square_Bracket();
    return t;
❱
◀public: static▶ Token ☀Import_Test_Specifiers() ❰
    Token t;
    t.name = Token_Name::IMPORT_TEST_SPECIFIERS;
    t.start = L'􏲏';
    t.end = L'􏲐';
    t.fg_color = "#4D2B13";
    t.bg_color = "#000000";
    t.groups.emplace_back(Token_Group::IMPORT_TEST);
    t.description = "whether the file is a system file.  whether it is inlined";
    t.bdf = Token_Bdf_Settings_Getter::Get_Square_Bracket();
    return t;
❱
◀public: static▶ Token ☀Import_Test_Name() ❰
    Token t;
    t.name = Token_Name::IMPORT_TEST_NAME;
    t.start = L'􏲍';
    t.end = L'􏲎';
    t.fg_color = "#66432A";
    t.bg_color = "#000000";
    t.groups.emplace_back(Token_Group::IMPORT_TEST);
    t.description = "code to import into the interface of this code";
    t.bdf = Token_Bdf_Settings_Getter::Get_Square_Bracket();
    return t;
❱
◀public: static▶ Token ☀Import_Test_Comment() ❰
    Token t;
    t.name = Token_Name::IMPORT_TEST_COMMENT;
    t.start = L'􏲋';
    t.end = L'􏲌';
    t.fg_color = "#5C5C5C";
    t.bg_color = "#000000";
    t.groups.emplace_back(Token_Group::IMPORT_TEST);
    t.description = "a comment about the code being imported";
    t.bdf = Token_Bdf_Settings_Getter::Get_Square_Bracket();
    return t;
❱
◀public: static▶ Token ☀Import_Test_Relationship() ❰
    Token t;
    t.name = Token_Name::IMPORT_TEST_RELATIONSHIP;
    t.start = L'􏲉';
    t.end = L'􏲊';
    t.fg_color = "#00ABB2";
    t.bg_color = "#000000";
    t.groups.emplace_back(Token_Group::IMPORT_TEST);
    t.groups.emplace_back(Token_Group::IMPORT_TEST_RELATIONSHIP);
    t.description = "the relationship of something included by the include";
    t.bdf = Token_Bdf_Settings_Getter::Get_Square_Bracket();
    return t;
❱
◀public: static▶ Token ☀Import_Test_Related() ❰
    Token t;
    t.name = Token_Name::IMPORT_TEST_RELATED;
    t.start = L'􏲇';
    t.end = L'􏲈';
    t.fg_color = "#3FF8FF";
    t.bg_color = "#000000";
    t.groups.emplace_back(Token_Group::IMPORT_TEST);
    t.groups.emplace_back(Token_Group::IMPORT_TEST_RELATIONSHIP);
    t.description = "a related thing being included";
    t.bdf = Token_Bdf_Settings_Getter::Get_Square_Bracket();
    return t;
❱
◀public: static▶ Token ☀Namespace_Specifiers() ❰
    Token t;
    t.name = Token_Name::NAMESPACE_SPECIFIERS;
    t.start = L'􏷠';
    t.end = L'􏷟';
    t.fg_color = "#00A300";
    t.bg_color = "#000000";
    t.groups.emplace_back(Token_Group::NAMESPACE);
    t.description = "specifiers for the proceeding namespace name (inline or not)";
    t.bdf = Token_Bdf_Settings_Getter::Get_Square_Bracket();
    return t;
❱
◀public: static▶ Token ☀Namespace_Name() ❰
    Token t;
    t.name = Token_Name::NAMESPACE_NAME;
    t.start = L'􏷞';
    t.end = L'􏷝';
    t.fg_color = "#0AFF0A";
    t.bg_color = "#000000";
    t.groups.emplace_back(Token_Group::NAMESPACE);
    t.description = "the namespace name to wrap everything around";
    t.bdf = Token_Bdf_Settings_Getter::Get_Square_Bracket();
    return t;
❱
◀public: static▶ Token ☀Inheritance_Specifiers() ❰
    Token t;
    t.name = Token_Name::INHERITANCE_SPECIFIERS;
    t.start = L'􏷜';
    t.end = L'􏷛';
    t.fg_color = "#A3A300";
    t.bg_color = "#000000";
    t.groups.emplace_back(Token_Group::INHERITANCE);
    t.description = "virtual and/or access specifier for proceeding inheritance type";
    t.bdf = Token_Bdf_Settings_Getter::Get_Square_Bracket();
    return t;
❱
◀public: static▶ Token ☀Inheritance_Type() ❰
    Token t;
    t.name = Token_Name::INHERITANCE_TYPE;
    t.start = L'􏷚';
    t.end = L'􏷙';
    t.fg_color = "#FFFF00";
    t.bg_color = "#000000";
    t.groups.emplace_back(Token_Group::INHERITANCE);
    t.description = "a type to inherit from";
    t.bdf = Token_Bdf_Settings_Getter::Get_Square_Bracket();
    return t;
❱
◀public: static▶ Token ☀Forward_Declare_Argument() ❰
    Token t;
    t.name = Token_Name::FORWARD_DECLARE_ARGUMENT;
    t.start = L'􏳹';
    t.end = L'􏳺';
    t.fg_color = "#FFFF00";
    t.bg_color = "#000000";
    t.groups.emplace_back(Token_Group::FORWARD_DECLARE);
    t.description = "a forward declaration";
    t.bdf = Token_Bdf_Settings_Getter::Get_Square_Bracket();
    return t;
❱
◀public: static▶ Token ☀Object_Template_Argument_Qualifiers() ❰
    Token t;
    t.name = Token_Name::OBJECT_TEMPLATE_ARGUMENT_QUALIFIERS;
    t.start = L'􏳑';
    t.end = L'􏳒';
    t.fg_color = "#a2dfee";
    t.bg_color = "#000000";
    t.groups.emplace_back(Token_Group::OBJECT_TEMPLATE_ARGUMENT);
    t.description = "";
    t.bdf = Token_Bdf_Settings_Getter::Get_Square_Bracket();
    return t;
❱
◀public: static▶ Token ☀Object_Template_Argument_Type() ❰
    Token t;
    t.name = Token_Name::OBJECT_TEMPLATE_ARGUMENT_TYPE;
    t.start = L'􏳓';
    t.end = L'􏳔';
    t.fg_color = "#73cfe5";
    t.bg_color = "#000000";
    t.groups.emplace_back(Token_Group::OBJECT_TEMPLATE_ARGUMENT);
    t.description = "";
    t.bdf = Token_Bdf_Settings_Getter::Get_Square_Bracket();
    return t;
❱
◀public: static▶ Token ☀Object_Template_Argument_Identifier() ❰
    Token t;
    t.name = Token_Name::OBJECT_TEMPLATE_ARGUMENT_IDENTIFIER;
    t.start = L'􏳕';
    t.end = L'􏳖';
    t.fg_color = "#45bfdd";
    t.bg_color = "#000000";
    t.groups.emplace_back(Token_Group::OBJECT_TEMPLATE_ARGUMENT);
    t.description = "";
    t.bdf = Token_Bdf_Settings_Getter::Get_Square_Bracket();
    return t;
❱
◀public: static▶ Token ☀Object_Template_Argument_Default() ❰
    Token t;
    t.name = Token_Name::OBJECT_TEMPLATE_ARGUMENT_DEFAULT;
    t.start = L'􏳗';
    t.end = L'􏳘';
    t.fg_color = "#17afd5";
    t.bg_color = "#000000";
    t.groups.emplace_back(Token_Group::OBJECT_TEMPLATE_ARGUMENT);
    t.description = "";
    t.bdf = Token_Bdf_Settings_Getter::Get_Square_Bracket();
    return t;
❱
◀public: static▶ Token ☀Object_Template_Argument_Units() ❰
    Token t;
    t.name = Token_Name::OBJECT_TEMPLATE_ARGUMENT_UNITS;
    t.start = L'􏳙';
    t.end = L'􏳚';
    t.fg_color = "#0098be";
    t.bg_color = "#000000";
    t.groups.emplace_back(Token_Group::OBJECT_TEMPLATE_ARGUMENT);
    t.description = "";
    t.bdf = Token_Bdf_Settings_Getter::Get_Square_Bracket();
    return t;
❱
◀public: static▶ Token ☀Object_Template_Argument_Comment() ❰
    Token t;
    t.name = Token_Name::OBJECT_TEMPLATE_ARGUMENT_COMMENT;
    t.start = L'􏳛';
    t.end = L'􏳜';
    t.fg_color = "#007a99";
    t.bg_color = "#000000";
    t.groups.emplace_back(Token_Group::OBJECT_TEMPLATE_ARGUMENT);
    t.description = "";
    t.bdf = Token_Bdf_Settings_Getter::Get_Square_Bracket();
    return t;
❱
◀public: static▶ Token ☀Object_Template_Argument_Type_Concepts() ❰
    Token t;
    t.name = Token_Name::OBJECT_TEMPLATE_ARGUMENT_TYPE_CONCEPTS;
    t.start = L'􏳝';
    t.end = L'􏳞';
    t.fg_color = "#005c73";
    t.bg_color = "#000000";
    t.groups.emplace_back(Token_Group::OBJECT_TEMPLATE_ARGUMENT);
    t.groups.emplace_back(Token_Group::OBJECT_TEMPLATE_ARGUMENT_CONCEPTS);
    t.description = "";
    t.bdf = Token_Bdf_Settings_Getter::Get_Square_Bracket();
    return t;
❱
◀public: static▶ Token ☀Function_Class_Specifiers() ❰
    Token t;
    t.name = Token_Name::FUNCTION_CLASS_SPECIFIERS;
    t.start = L'􏷘';
    t.end = L'􏷗';
    t.fg_color = "#662A45";
    t.bg_color = "#000000";
    t.groups.emplace_back(Token_Group::FUNCTION);
    t.description = "static const lvalue/rvalue overloads and class specifiers";
    t.bdf = Token_Bdf_Settings_Getter::Get_Square_Bracket();
    return t;
❱
◀public: static▶ Token ☀Function_Subgroup_Name() ❰
    Token t;
    t.name = Token_Name::FUNCTION_SUBGROUP_NAME;
    t.start = L'􏴅';
    t.end = L'􏴆';
    t.fg_color = "#3DFF5D";
    t.bg_color = "#000000";
    t.groups.emplace_back(Token_Group::FUNCTION);
    t.description = "a referenced subgroup name to describe the function.  possibly shared by other functions";
    t.bdf = Token_Bdf_Settings_Getter::Get_Square_Bracket();
    return t;
❱
◀public: static▶ Token ☀Function_Brief_Description() ❰
    Token t;
    t.name = Token_Name::FUNCTION_BRIEF_DESCRIPTION;
    t.start = L'􏷐';
    t.end = L'􏷏';
    t.fg_color = "#66432A";
    t.bg_color = "#000000";
    t.groups.emplace_back(Token_Group::FUNCTION);
    t.description = "a brief description of the function/method";
    t.bdf = Token_Bdf_Settings_Getter::Get_Square_Bracket();
    return t;
❱
◀public: static▶ Token ☀Function_Detailed_Description() ❰
    Token t;
    t.name = Token_Name::FUNCTION_DETAILED_DESCRIPTION;
    t.start = L'􏶠';
    t.end = L'􏶡';
    t.fg_color = "#66652A";
    t.bg_color = "#000000";
    t.groups.emplace_back(Token_Group::FUNCTION);
    t.description = "a detailed description of the function/method";
    t.bdf = Token_Bdf_Settings_Getter::Get_Square_Bracket();
    return t;
❱
◀public: static▶ Token ☀Function_Detailed_Name() ❰
    Token t;
    t.name = Token_Name::FUNCTION_NAME;
    t.start = L'􏷒';
    t.end = L'􏷑';
    t.fg_color = "#C35A00";
    t.bg_color = "#000000";
    t.groups.emplace_back(Token_Group::FUNCTION);
    t.description = "the name of the function/method";
    t.bdf = Token_Bdf_Settings_Getter::Get_Square_Bracket();
    return t;
❱
◀public: static▶ Token ☀Function_Unique_Mangle_Name() ❰
    Token t;
    t.name = Token_Name::FUNCTION_UNIQUE_MANGLE_NAME;
    t.start = L'􏴫';
    t.end = L'􏴬';
    t.fg_color = "#C35A00";
    t.bg_color = "#000000";
    t.groups.emplace_back(Token_Group::FUNCTION);
    t.description = "alternative name to choose when mangling a name to allow overloads/templates in languages that don't support them";
    t.bdf = Token_Bdf_Settings_Getter::Get_Square_Bracket();
    return t;
❱
◀public: static▶ Token ☀Function_Alternative_Expression_Name() ❰
    Token t;
    t.name = Token_Name::FUNCTION_ALTERNATIVE_EXPRESSION_NAME;
    t.start = L'􏴳';
    t.end = L'􏴴';
    t.fg_color = "#E731C6";
    t.bg_color = "#000000";
    t.groups.emplace_back(Token_Group::FUNCTION);
    t.groups.emplace_back(Token_Group::FUNCTION_ALTERNATIVE_EXPRESSION_NAME);
    t.description = "the name of the function/method";
    t.bdf = Token_Bdf_Settings_Getter::Get_Square_Bracket();
    return t;
❱
◀public: static▶ Token ☀Function_Precondition() ❰
    Token t;
    t.name = Token_Name::FUNCTION_PRECONDITION;
    t.start = L'􏵪';
    t.end = L'􏵫';
    t.fg_color = "#EAFF00";
    t.bg_color = "#000000";
    t.groups.emplace_back(Token_Group::FUNCTION);
    t.groups.emplace_back(Token_Group::FUNCTION_PRECONDITION);
    t.description = "preconditions or assumptions before the execution of the function body";
    t.bdf = Token_Bdf_Settings_Getter::Get_Square_Bracket();
    return t;
❱
◀public: static▶ Token ☀Function_Precondition_Comment() ❰
    Token t;
    t.name = Token_Name::FUNCTION_PRECONDITION_COMMENT;
    t.start = L'􏵨';
    t.end = L'􏵩';
    t.fg_color = "#C0D102";
    t.bg_color = "#000000";
    t.groups.emplace_back(Token_Group::FUNCTION);
    t.groups.emplace_back(Token_Group::FUNCTION_PRECONDITION);
    t.description = "a comment describing the assumptions";
    t.bdf = Token_Bdf_Settings_Getter::Get_Square_Bracket();
    return t;
❱
◀public: static▶ Token ☀Function_Postcondition() ❰
    Token t;
    t.name = Token_Name::FUNCTION_POSTCONDITION;
    t.start = L'􏵦';
    t.end = L'􏵧';
    t.fg_color = "#FF006A";
    t.bg_color = "#000000";
    t.groups.emplace_back(Token_Group::FUNCTION);
    t.groups.emplace_back(Token_Group::FUNCTION_POSTCONDITION);
    t.description = "postconditions or assumptions before the execution of the function body";
    t.bdf = Token_Bdf_Settings_Getter::Get_Square_Bracket();
    return t;
❱
◀public: static▶ Token ☀Function_Postcondition_Comment() ❰
    Token t;
    t.name = Token_Name::FUNCTION_POSTCONDITION_COMMENT;
    t.start = L'􏵤';
    t.end = L'􏵥';
    t.fg_color = "#990040";
    t.bg_color = "#000000";
    t.groups.emplace_back(Token_Group::FUNCTION);
    t.groups.emplace_back(Token_Group::FUNCTION_POSTCONDITION);
    t.description = "a comment describing the assumptions";
    t.bdf = Token_Bdf_Settings_Getter::Get_Square_Bracket();
    return t;
❱
◀public: static▶ Token ☀Function_Stamp_Name() ❰
    Token t;
    t.name = Token_Name::FUNCTION_STAMP_NAME;
    t.start = L'􏳇';
    t.end = L'􏳈';
    t.fg_color = "#cdd100";
    t.bg_color = "#000000";
    t.groups.emplace_back(Token_Group::FUNCTION);
    t.groups.emplace_back(Token_Group::FUNCTION_STAMP);
    t.description = "name of the function stamp";
    t.bdf = Token_Bdf_Settings_Getter::Get_Brace();
    return t;
❱
◀public: static▶ Token ☀Function_Stamp_Value() ❰
    Token t;
    t.name = Token_Name::FUNCTION_STAMP_VALUE;
    t.start = L'􏳅';
    t.end = L'􏳆';
    t.fg_color = "#fcff6b";
    t.bg_color = "#000000";
    t.groups.emplace_back(Token_Group::FUNCTION);
    t.groups.emplace_back(Token_Group::FUNCTION_STAMP);
    t.groups.emplace_back(Token_Group::FUNCTION_STAMP_VALUE);
    t.description = "one of the values of the function stamp";
    t.bdf = Token_Bdf_Settings_Getter::Get_Brace();
    return t;
❱
◀public: static▶ Token ☀Function_Template_Argument_Qualifiers() ❰
    Token t;
    t.name = Token_Name::FUNCTION_TEMPLATE_ARGUMENT_QUALIFIERS;
    t.start = L'􏳏';
    t.end = L'􏳐';
    t.fg_color = "#a2dfee";
    t.bg_color = "#000000";
    t.groups.emplace_back(Token_Group::FUNCTION);
    t.groups.emplace_back(Token_Group::FUNCTION_TEMPLATE_ARGUMENT);
    t.description = "qualifiers for template parameters";
    t.bdf = Token_Bdf_Settings_Getter::Get_Square_Bracket();
    return t;
❱
◀public: static▶ Token ☀Function_Template_Argument_Type() ❰
    Token t;
    t.name = Token_Name::FUNCTION_TEMPLATE_ARGUMENT_TYPE;
    t.start = L'􏷎';
    t.end = L'􏷍';
    t.fg_color = "#73cfe5";
    t.bg_color = "#000000";
    t.groups.emplace_back(Token_Group::FUNCTION);
    t.groups.emplace_back(Token_Group::FUNCTION_TEMPLATE_ARGUMENT);
    t.description = "the template type of one of the template parameters";
    t.bdf = Token_Bdf_Settings_Getter::Get_Square_Bracket();
    return t;
❱
◀public: static▶ Token ☀Function_Template_Argument_Identifier() ❰
    Token t;
    t.name = Token_Name::FUNCTION_TEMPLATE_ARGUMENT_IDENTIFIER;
    t.start = L'􏷌';
    t.end = L'􏷋';
    t.fg_color = "#45bfdd";
    t.bg_color = "#000000";
    t.groups.emplace_back(Token_Group::FUNCTION);
    t.groups.emplace_back(Token_Group::FUNCTION_TEMPLATE_ARGUMENT);
    t.description = "the template identifier for one of the template parameters";
    t.bdf = Token_Bdf_Settings_Getter::Get_Square_Bracket();
    return t;
❱
◀public: static▶ Token ☀Function_Template_Argument_Default() ❰
    Token t;
    t.name = Token_Name::FUNCTION_TEMPLATE_ARGUMENT_DEFAULT;
    t.start = L'􏷊';
    t.end = L'􏷉';
    t.fg_color = "#17afd5";
    t.bg_color = "#000000";
    t.groups.emplace_back(Token_Group::FUNCTION);
    t.groups.emplace_back(Token_Group::FUNCTION_TEMPLATE_ARGUMENT);
    t.description = "the default type value for one of the template parameters";
    t.bdf = Token_Bdf_Settings_Getter::Get_Square_Bracket();
    return t;
❱
◀public: static▶ Token ☀Function_Template_Argument_Units() ❰
    Token t;
    t.name = Token_Name::FUNCTION_TEMPLATE_ARGUMENT_UNITS;
    t.start = L'􏳍';
    t.end = L'􏳎';
    t.fg_color = "#0098be";
    t.bg_color = "#000000";
    t.groups.emplace_back(Token_Group::FUNCTION);
    t.groups.emplace_back(Token_Group::FUNCTION_TEMPLATE_ARGUMENT);
    t.description = "";
    t.bdf = Token_Bdf_Settings_Getter::Get_Square_Bracket();
    return t;
❱
◀public: static▶ Token ☀Function_Template_Argument_Comment() ❰
    Token t;
    t.name = Token_Name::FUNCTION_TEMPLATE_ARGUMENT_COMMENT;
    t.start = L'􏷈';
    t.end = L'􏷇';
    t.fg_color = "#007a99";
    t.bg_color = "#000000";
    t.groups.emplace_back(Token_Group::FUNCTION);
    t.groups.emplace_back(Token_Group::FUNCTION_TEMPLATE_ARGUMENT);
    t.description = "a comment about one of the template parameters";
    t.bdf = Token_Bdf_Settings_Getter::Get_Square_Bracket();
    return t;
❱
◀public: static▶ Token ☀Function_Template_Argument_Concepts() ❰
    Token t;
    t.name = Token_Name::FUNCTION_TEMPLATE_ARGUMENT_TYPE_CONCEPTS;
    t.start = L'􏳋';
    t.end = L'􏳌';
    t.fg_color = "#005c73";
    t.bg_color = "#000000";
    t.groups.emplace_back(Token_Group::FUNCTION);
    t.groups.emplace_back(Token_Group::FUNCTION_TEMPLATE_ARGUMENT);
    t.groups.emplace_back(Token_Group::FUNCTION_TEMPLATE_ARGUMENT_CONCEPTS);
    t.description = "a comment about one of the template parameters";
    t.bdf = Token_Bdf_Settings_Getter::Get_Square_Bracket();
    return t;
❱
◀public: static▶ Token ☀Function_Argument_Type_Qualifiers() ❰
    Token t;
    t.name = Token_Name::FUNCTION_ARGUMENT_TYPE_QUALIFIERS;
    t.start = L'􏶜';
    t.end = L'􏶝';
    t.fg_color = "#2A662E";
    t.bg_color = "#000000";
    t.groups.emplace_back(Token_Group::FUNCTION);
    t.groups.emplace_back(Token_Group::FUNCTION_ARGUMENT);
    t.description = "qualifiers of the type";
    t.bdf = Token_Bdf_Settings_Getter::Get_Square_Bracket();
    return t;
❱
◀public: static▶ Token ☀Function_Argument_Type() ❰
    Token t;
    t.name = Token_Name::FUNCTION_ARGUMENT_TYPE;
    t.start = L'􏷆';
    t.end = L'􏷅';
    t.fg_color = "#2A4866";
    t.bg_color = "#000000";
    t.groups.emplace_back(Token_Group::FUNCTION);
    t.groups.emplace_back(Token_Group::FUNCTION_ARGUMENT);
    t.description = "the type of one of the function/method parameters";
    t.bdf = Token_Bdf_Settings_Getter::Get_Square_Bracket();
    return t;
❱
◀public: static▶ Token ☀Function_Argument_Type_Scope() ❰
    Token t;
    t.name = Token_Name::FUNCTION_ARGUMENT_TYPE_SCOPE;
    t.start = L'􏲯';
    t.end = L'􏲰';
    t.fg_color = "#2A4866";
    t.bg_color = "#000000";
    t.groups.emplace_back(Token_Group::FUNCTION);
    t.groups.emplace_back(Token_Group::FUNCTION_ARGUMENT);
    t.groups.emplace_back(Token_Group::FUNCTION_ARGUMENT_SCOPE);
    t.description = "x";
    t.bdf = Token_Bdf_Settings_Getter::Get_Colon();
    
    return t;
❱
◀public: static▶ Token ☀Function_Argument_Type_Specializations() ❰
    Token t;
    t.name = Token_Name::FUNCTION_ARGUMENT_TYPE_SPECIALIZATIONS;
    t.start = L'􏳣';
    t.end = L'􏳤';
    t.fg_color = "#2A4866";
    t.bg_color = "#000000";
    t.groups.emplace_back(Token_Group::FUNCTION);
    t.groups.emplace_back(Token_Group::FUNCTION_ARGUMENT);
    t.groups.emplace_back(Token_Group::FUNCTION_ARGUMENT_TYPE_SPECIALIZATIONS);
    t.description = "";
    t.bdf = Token_Bdf_Settings_Getter::Get_Angle_Bracket();
    return t;
❱
◀public: static▶ Token ☀Function_Argument_Type_Specializations_Scope() ❰
    Token t;
    t.name = Token_Name::FUNCTION_ARGUMENT_TYPE_SPECIALIZATIONS_SCOPE;
    t.start = L'􏲭';
    t.end = L'􏲮';
    t.fg_color = "#2A4866";
    t.bg_color = "#000000";
    t.groups.emplace_back(Token_Group::FUNCTION);
    t.groups.emplace_back(Token_Group::FUNCTION_ARGUMENT);
    t.groups.emplace_back(Token_Group::FUNCTION_ARGUMENT_TYPE_SPECIALIZATIONS);
    t.groups.emplace_back(Token_Group::FUNCTION_ARGUMENT_TYPE_SPECIALIZATIONS_SCOPE);
    t.description = "";
    t.bdf = Token_Bdf_Settings_Getter::Get_Colon();
    return t;
❱
◀public: static▶ Token ☀Function_Argument_Identifier() ❰
    Token t;
    t.name = Token_Name::FUNCTION_ARGUMENT_IDENTIFIER;
    t.start = L'􏷄';
    t.end = L'􏷃';
    t.fg_color = "#EF53EF";
    t.bg_color = "#000000";
    t.groups.emplace_back(Token_Group::FUNCTION);
    t.groups.emplace_back(Token_Group::FUNCTION_ARGUMENT);
    t.description = "the identifier of one of the function/method parameters";
    t.bdf = Token_Bdf_Settings_Getter::Get_Square_Bracket();
    return t;
❱
◀public: static▶ Token ☀Function_Argument_Units() ❰
    Token t;
    t.name = Token_Name::FUNCTION_ARGUMENT_UNITS;
    t.start = L'􏵘';
    t.end = L'􏵙';
    t.fg_color = "#9E6C9E";
    t.bg_color = "#000000";
    t.groups.emplace_back(Token_Group::FUNCTION);
    t.groups.emplace_back(Token_Group::FUNCTION_ARGUMENT);
    t.description = "the units that the identifier is in";
    t.bdf = Token_Bdf_Settings_Getter::Get_Square_Bracket();
    return t;
❱
◀public: static▶ Token ☀Function_Argument_Default() ❰
    Token t;
    t.name = Token_Name::FUNCTION_ARGUMENT_DEFAULT;
    t.start = L'􏷂';
    t.end = L'􏷁';
    t.fg_color = "#70FFFF";
    t.bg_color = "#000000";
    t.groups.emplace_back(Token_Group::FUNCTION);
    t.groups.emplace_back(Token_Group::FUNCTION_ARGUMENT);
    t.description = "the default value for one of the function/method parameters";
    t.bdf = Token_Bdf_Settings_Getter::Get_Square_Bracket();
    return t;
❱
◀public: static▶ Token ☀Function_Argument_Comment() ❰
    Token t;
    t.name = Token_Name::FUNCTION_ARGUMENT_COMMENT;
    t.start = L'􏷀';
    t.end = L'􏶿';
    t.fg_color = "#5C5C5C";
    t.bg_color = "#000000";
    t.groups.emplace_back(Token_Group::FUNCTION);
    t.groups.emplace_back(Token_Group::FUNCTION_ARGUMENT);
    t.description = "a comment about one of the function/method parameters";
    t.bdf = Token_Bdf_Settings_Getter::Get_Square_Bracket();
    return t;
❱
◀public: static▶ Token ☀Function_Argument_Type_Module_Dependencies() ❰
    Token t;
    t.name = Token_Name::FUNCTION_ARGUMENT_TYPE_MODULE_DEPENDENCIES;
    t.start = L'􏲧';
    t.end = L'􏲨';
    t.fg_color = "#42E2F4";
    t.bg_color = "#000000";
    t.groups.emplace_back(Token_Group::FUNCTION);
    t.groups.emplace_back(Token_Group::FUNCTION_ARGUMENT);
    t.groups.emplace_back(Token_Group::FUNCTION_ARGUMENT_TYPE_MODULE_DEPENDENCIES);
    t.description = "";
    t.bdf = Token_Bdf_Settings_Getter::Get_Exclamation_Point();
    return t;
❱
◀public: static▶ Token ☀Function_Argument_Type_Library_Dependencies() ❰
    Token t;
    t.name = Token_Name::FUNCTION_ARGUMENT_TYPE_LIBRARY_DEPENDENCIES;
    t.start = L'􏲥';
    t.end = L'􏲦';
    t.fg_color = "#42E2F4";
    t.bg_color = "#000000";
    t.groups.emplace_back(Token_Group::FUNCTION);
    t.groups.emplace_back(Token_Group::FUNCTION_ARGUMENT);
    t.groups.emplace_back(Token_Group::FUNCTION_ARGUMENT_TYPE_LIBRARY_DEPENDENCIES);
    t.description = "";
    t.bdf = Token_Bdf_Settings_Getter::Get_Exclamation_Point();
    return t;
❱
◀public: static▶ Token ☀Function_Result_Type_Qualifiers() ❰
    Token t;
    t.name = Token_Name::FUNCTION_RESULT_TYPE_QUALIFIERS;
    t.start = L'􏶚';
    t.end = L'􏶛';
    t.fg_color = "#32514F";
    t.bg_color = "#000000";
    t.groups.emplace_back(Token_Group::FUNCTION);
    t.groups.emplace_back(Token_Group::FUNCTION_RESULT);
    t.description = "the return type of the function/method";
    t.bdf = Token_Bdf_Settings_Getter::Get_Square_Bracket();
    return t;
❱
◀public: static▶ Token ☀Function_Result_Type() ❰
    Token t;
    t.name = Token_Name::FUNCTION_RESULT_TYPE;
    t.start = L'􏶾';
    t.end = L'􏶽';
    t.fg_color = "#366D6B";
    t.bg_color = "#000000";
    t.groups.emplace_back(Token_Group::FUNCTION);
    t.groups.emplace_back(Token_Group::FUNCTION_RESULT);
    t.description = "the return type of the function/method";
    t.bdf = Token_Bdf_Settings_Getter::Get_Square_Bracket();
    return t;
❱
◀public: static▶ Token ☀Function_Result_Type_Identifier() ❰
    Token t;
    t.name = Token_Name::FUNCTION_RESULT_IDENTIFIER;
    t.start = L'􏶼';
    t.end = L'􏶻';
    t.fg_color = "#5BAEAB";
    t.bg_color = "#000000";
    t.groups.emplace_back(Token_Group::FUNCTION);
    t.groups.emplace_back(Token_Group::FUNCTION_RESULT);
    t.description = "the identifier of the return parameter of the function/method";
    t.bdf = Token_Bdf_Settings_Getter::Get_Square_Bracket();
    return t;
❱
◀public: static▶ Token ☀Function_Result_Units() ❰
    Token t;
    t.name = Token_Name::FUNCTION_RESULT_UNITS;
    t.start = L'􏵜';
    t.end = L'􏵝';
    t.fg_color = "#5E53EF";
    t.bg_color = "#000000";
    t.groups.emplace_back(Token_Group::FUNCTION);
    t.groups.emplace_back(Token_Group::FUNCTION_RESULT);
    t.description = "the units of the identifier";
    t.bdf = Token_Bdf_Settings_Getter::Get_Square_Bracket();
    return t;
❱
◀public: static▶ Token ☀Function_Result_Default() ❰
    Token t;
    t.name = Token_Name::FUNCTION_RESULT_DEFAULT;
    t.start = L'􏲅';
    t.end = L'􏲆';
    t.fg_color = "#70FFFF";
    t.bg_color = "#000000";
    t.groups.emplace_back(Token_Group::FUNCTION);
    t.groups.emplace_back(Token_Group::FUNCTION_RESULT);
    t.description = "the units of the identifier";
    t.bdf = Token_Bdf_Settings_Getter::Get_Square_Bracket();
    return t;
❱
◀public: static▶ Token ☀Function_Result_Comment() ❰
    Token t;
    t.name = Token_Name::FUNCTION_RESULT_COMMENT;
    t.start = L'􏶺';
    t.end = L'􏶹';
    t.fg_color = "#5C5C5C";
    t.bg_color = "#000000";
    t.groups.emplace_back(Token_Group::FUNCTION);
    t.groups.emplace_back(Token_Group::FUNCTION_RESULT);
    t.description = "a comment about the function/method return parameter";
    t.bdf = Token_Bdf_Settings_Getter::Get_Square_Bracket();
    return t;
❱
◀public: static▶ Token ☀Function_Result_Type_Scope() ❰
    Token t;
    t.name = Token_Name::FUNCTION_RESULT_TYPE_SCOPE;
    t.start = L'􏲫';
    t.end = L'􏲬';
    t.fg_color = "#366D6B";
    t.bg_color = "#000000";
    t.groups.emplace_back(Token_Group::FUNCTION);
    t.groups.emplace_back(Token_Group::FUNCTION_RESULT);
    t.groups.emplace_back(Token_Group::FUNCTION_RESULT_SCOPE);
    t.description = "";
    t.bdf = Token_Bdf_Settings_Getter::Get_Colon();
    return t;
❱
◀public: static▶ Token ☀Function_Result_Type_Specializations() ❰
    Token t;
    t.name = Token_Name::FUNCTION_RESULT_TYPE_SPECIALIZATIONS;
    t.start = L'􏳡';
    t.end = L'􏳢';
    t.fg_color = "#366D6B";
    t.bg_color = "#000000";
    t.groups.emplace_back(Token_Group::FUNCTION);
    t.groups.emplace_back(Token_Group::FUNCTION_RESULT);
    t.groups.emplace_back(Token_Group::FUNCTION_RESULT_TYPE_SPECIALIZATIONS);
    t.description = "";
    t.bdf = Token_Bdf_Settings_Getter::Get_Angle_Bracket();
    return t;
❱
◀public: static▶ Token ☀Function_Result_Type_Specializations_Scope() ❰
    Token t;
    t.name = Token_Name::FUNCTION_RESULT_TYPE_SPECIALIZATIONS_SCOPE;
    t.start = L'􏲩';
    t.end = L'􏲪';
    t.fg_color = "#366D6B";
    t.bg_color = "#000000";
    t.groups.emplace_back(Token_Group::FUNCTION);
    t.groups.emplace_back(Token_Group::FUNCTION_RESULT);
    t.groups.emplace_back(Token_Group::FUNCTION_RESULT_TYPE_SPECIALIZATIONS);
    t.groups.emplace_back(Token_Group::FUNCTION_RESULT_TYPE_SPECIALIZATIONS_SCOPE);
    t.description = "";
    t.bdf = Token_Bdf_Settings_Getter::Get_Colon();
    return t;
❱
◀public: static▶ Token ☀Function_Result_Type_Module_Dependencies() ❰
    Token t;
    t.name = Token_Name::FUNCTION_RESULT_TYPE_MODULE_DEPENDENCIES;
    t.start = L'􏲣';
    t.end = L'􏲤';
    t.fg_color = "#42E2F4";
    t.bg_color = "#000000";
    t.groups.emplace_back(Token_Group::FUNCTION);
    t.groups.emplace_back(Token_Group::FUNCTION_RESULT);
    t.groups.emplace_back(Token_Group::FUNCTION_RESULT_TYPE_MODULE_DEPENDENCIES);
    t.description = "";
    t.bdf = Token_Bdf_Settings_Getter::Get_Exclamation_Point();
    return t;
❱
◀public: static▶ Token ☀Function_Result_Type_Library_Dependencies() ❰
    Token t;
    t.name = Token_Name::FUNCTION_RESULT_TYPE_LIBRARY_DEPENDENCIES;
    t.start = L'􏲡';
    t.end = L'􏲢';
    t.fg_color = "#42E2F4";
    t.bg_color = "#000000";
    t.groups.emplace_back(Token_Group::FUNCTION);
    t.groups.emplace_back(Token_Group::FUNCTION_RESULT);
    t.groups.emplace_back(Token_Group::FUNCTION_RESULT_TYPE_LIBRARY_DEPENDENCIES);
    t.description = "";
    t.bdf = Token_Bdf_Settings_Getter::Get_Exclamation_Point();
    return t;
❱
◀public: static▶ Token ☀Function_Except_Expression() ❰
    Token t;
    t.name = Token_Name::EXCEPT_EXPRESSION;
    t.start = L'􏶸';
    t.end = L'􏶷';
    t.fg_color = "#FFADFF";
    t.bg_color = "#000000";
    t.groups.emplace_back(Token_Group::FUNCTION);
    t.groups.emplace_back(Token_Group::FUNCTION_EXCEPT);
    t.description = "a boolean expression as to whether or not to throw an expression";
    t.bdf = Token_Bdf_Settings_Getter::Get_Square_Bracket();
    return t;
❱
◀public: static▶ Token ☀Function_Except_Comment() ❰
    Token t;
    t.name = Token_Name::EXCEPT_COMMENT;
    t.start = L'􏶶';
    t.end = L'􏶵';
    t.fg_color = "#5C5C5C";
    t.bg_color = "#000000";
    t.groups.emplace_back(Token_Group::FUNCTION);
    t.groups.emplace_back(Token_Group::FUNCTION_EXCEPT);
    t.description = "a comment about the exception expression";
    t.bdf = Token_Bdf_Settings_Getter::Get_Square_Bracket();
    return t;
❱
◀public: static▶ Token ☀Function_Body() ❰
    Token t;
    t.name = Token_Name::FUNCTION_BODY;
    t.start = L'􏶴';
    t.end = L'􏶳';
    t.fg_color = "#FFFFFF";
    t.bg_color = "#015296";
    t.groups.emplace_back(Token_Group::FUNCTION);
    t.groups.emplace_back(Token_Group::FUNCTION_BODY);
    t.description = "the body of the function/method";
    t.bdf = Token_Bdf_Settings_Getter::Get_Square_Bracket();
    return t;
❱
◀public: static▶ Token ☀Function_Test_Case_Name() ❰
    Token t;
    t.name = Token_Name::FUNCTION_TEST_CASE_NAME;
    t.start = L'􏴱';
    t.end = L'􏴲';
    t.fg_color = "#0BDC42";
    t.bg_color = "#000000";
    t.groups.emplace_back(Token_Group::FUNCTION);
    t.groups.emplace_back(Token_Group::FUNCTION_TEST_CASE);
    t.description = "";
    t.bdf = Token_Bdf_Settings_Getter::Get_Square_Bracket();
    return t;
❱
◀public: static▶ Token ☀Function_Test_Case_Tag() ❰
    Token t;
    t.name = Token_Name::FUNCTION_TEST_CASE_TAG;
    t.start = L'􏴯';
    t.end = L'􏴰';
    t.fg_color = "#126427";
    t.bg_color = "#000000";
    t.groups.emplace_back(Token_Group::FUNCTION);
    t.groups.emplace_back(Token_Group::FUNCTION_TEST_CASE);
    t.description = "";
    t.bdf = Token_Bdf_Settings_Getter::Get_Square_Bracket();
    return t;
❱
◀public: static▶ Token ☀Function_Test_Case_Reason_For_Testing() ❰
    Token t;
    t.name = Token_Name::FUNCTION_TEST_CASE_REASON_FOR_TESTING;
    t.start = L'􏲝';
    t.end = L'􏲞';
    t.fg_color = "#42b3f4";
    t.bg_color = "#000000";
    t.groups.emplace_back(Token_Group::FUNCTION);
    t.groups.emplace_back(Token_Group::FUNCTION_TEST_CASE);
    t.description = "";
    t.bdf = Token_Bdf_Settings_Getter::Get_Square_Bracket();
    return t;
❱
◀public: static▶ Token ☀Function_Test_Case_Reason_For_Failing() ❰
    Token t;
    t.name = Token_Name::FUNCTION_TEST_CASE_REASON_FOR_FAILING;
    t.start = L'􏲛';
    t.end = L'􏲜';
    t.fg_color = "#1e84bf";
    t.bg_color = "#000000";
    t.groups.emplace_back(Token_Group::FUNCTION);
    t.groups.emplace_back(Token_Group::FUNCTION_TEST_CASE);
    t.groups.emplace_back(Token_Group::FUNCTION_TEST_CASE_REASON_FOR_FAILING);
    t.description = "";
    t.bdf = Token_Bdf_Settings_Getter::Get_Square_Bracket();
    return t;
❱
◀public: static▶ Token ☀Function_Test_Case_Body() ❰
    Token t;
    t.name = Token_Name::FUNCTION_TEST_CASE_BODY;
    t.start = L'􏴭';
    t.end = L'􏴮';
    t.fg_color = "#FFFFFF";
    t.bg_color = "#1D3723";
    t.groups.emplace_back(Token_Group::FUNCTION);
    t.groups.emplace_back(Token_Group::FUNCTION_TEST_CASE);
    t.description = "";
    t.bdf = Token_Bdf_Settings_Getter::Get_Square_Bracket();
    return t;
❱
◀public: static▶ Token ☀Function_Benchmark_Case_Name() ❰
    Token t;
    t.name = Token_Name::FUNCTION_BENCHMARK_CASE_NAME;
    t.start = L'􏱿';
    t.end = L'􏲀';
    t.fg_color = "#ce3131";
    t.bg_color = "#000000";
    t.groups.emplace_back(Token_Group::FUNCTION);
    t.groups.emplace_back(Token_Group::FUNCTION_BENCHMARK);
    t.description = "";
    t.bdf = Token_Bdf_Settings_Getter::Get_Square_Bracket();
    return t;
❱
◀public: static▶ Token ☀Function_Benchmark_Case_Tag() ❰
    Token t;
    t.name = Token_Name::FUNCTION_BENCHMARK_CASE_TAG;
    t.start = L'􏱽';
    t.end = L'􏱾';
    t.fg_color = "#f97070";
    t.bg_color = "#000000";
    t.groups.emplace_back(Token_Group::FUNCTION);
    t.groups.emplace_back(Token_Group::FUNCTION_BENCHMARK);
    t.description = "";
    t.bdf = Token_Bdf_Settings_Getter::Get_Square_Bracket();
    return t;
❱
◀public: static▶ Token ☀Function_Benchmark_Case_Setup() ❰
    Token t;
    t.name = Token_Name::FUNCTION_BENCHMARK_CASE_SETUP;
    t.start = L'􏱻';
    t.end = L'􏱼';
    t.fg_color = "#FFFFFF";
    t.bg_color = "#702c2c";
    t.groups.emplace_back(Token_Group::FUNCTION);
    t.groups.emplace_back(Token_Group::FUNCTION_BENCHMARK);
    t.description = "";
    t.bdf = Token_Bdf_Settings_Getter::Get_Square_Bracket();
    return t;
❱
◀public: static▶ Token ☀Function_Benchmark_Case_Action() ❰
    Token t;
    t.name = Token_Name::FUNCTION_BENCHMARK_CASE_ACTION;
    t.start = L'􏱹';
    t.end = L'􏱺';
    t.fg_color = "#FFFFFF";
    t.bg_color = "#8c0e0e";
    t.groups.emplace_back(Token_Group::FUNCTION);
    t.groups.emplace_back(Token_Group::FUNCTION_BENCHMARK);
    t.description = "";
    t.bdf = Token_Bdf_Settings_Getter::Get_Square_Bracket();
    return t;
❱
◀public: static▶ Token ☀Function_Benchmark_Argument_Name() ❰
    Token t;
    t.name = Token_Name::FUNCTION_BENCHMARK_ARGUMENT_NAME;
    t.start = L'􏱷';
    t.end = L'􏱸';
    t.fg_color = "#ff8132";
    t.bg_color = "#000000";
    t.groups.emplace_back(Token_Group::FUNCTION);
    t.groups.emplace_back(Token_Group::FUNCTION_BENCHMARK);
    t.groups.emplace_back(Token_Group::FUNCTION_BENCHMARK_ARG);
    t.description = "";
    t.bdf = Token_Bdf_Settings_Getter::Get_Square_Bracket();
    return t;
❱
◀public: static▶ Token ☀Function_Benchmark_Argument_Low() ❰
    Token t;
    t.name = Token_Name::FUNCTION_BENCHMARK_ARGUMENT_LOW;
    t.start = L'􏱵';
    t.end = L'􏱶';
    t.fg_color = "#ff9f63";
    t.bg_color = "#000000";
    t.groups.emplace_back(Token_Group::FUNCTION);
    t.groups.emplace_back(Token_Group::FUNCTION_BENCHMARK);
    t.groups.emplace_back(Token_Group::FUNCTION_BENCHMARK_ARG);
    t.description = "";
    t.bdf = Token_Bdf_Settings_Getter::Get_Square_Bracket();
    return t;
❱
◀public: static▶ Token ☀Function_Benchmark_Argument_High() ❰
    Token t;
    t.name = Token_Name::FUNCTION_BENCHMARK_ARGUMENT_HIGH;
    t.start = L'􏱳';
    t.end = L'􏱴';
    t.fg_color = "#ff9f63";
    t.bg_color = "#000000";
    t.groups.emplace_back(Token_Group::FUNCTION);
    t.groups.emplace_back(Token_Group::FUNCTION_BENCHMARK);
    t.groups.emplace_back(Token_Group::FUNCTION_BENCHMARK_ARG);
    t.description = "";
    t.bdf = Token_Bdf_Settings_Getter::Get_Square_Bracket();
    return t;
❱
◀public: static▶ Token ☀Function_Benchmark_Argument_Multiplier() ❰
    Token t;
    t.name = Token_Name::FUNCTION_BENCHMARK_ARGUMENT_MULTIPLIER;
    t.start = L'􏱱';
    t.end = L'􏱲';
    t.fg_color = "#ff6200";
    t.bg_color = "#000000";
    t.groups.emplace_back(Token_Group::FUNCTION);
    t.groups.emplace_back(Token_Group::FUNCTION_BENCHMARK);
    t.groups.emplace_back(Token_Group::FUNCTION_BENCHMARK_ARG);
    t.description = "";
    t.bdf = Token_Bdf_Settings_Getter::Get_Square_Bracket();
    return t;
❱
◀public: static▶ Token ☀Typedef_Specifiers() ❰
    Token t;
    t.name = Token_Name::TYPEDEF_SPECIFIERS;
    t.start = L'􏴥';
    t.end = L'􏴦';
    t.fg_color = "#662A45";
    t.bg_color = "#000000";
    t.groups.emplace_back(Token_Group::TYPEDEF);
    t.description = "";
    t.bdf = Token_Bdf_Settings_Getter::Get_Square_Bracket();
    return t;
❱
◀public: static▶ Token ☀Typedef_Brief_Description() ❰
    Token t;
    t.name = Token_Name::TYPEDEF_BRIEF_DESCRIPTION;
    t.start = L'􏴣';
    t.end = L'􏴤';
    t.fg_color = "#66432A";
    t.bg_color = "#000000";
    t.groups.emplace_back(Token_Group::TYPEDEF);
    t.description = "";
    t.bdf = Token_Bdf_Settings_Getter::Get_Square_Bracket();
    return t;
❱
◀public: static▶ Token ☀Typedef_Detailed_Description() ❰
    Token t;
    t.name = Token_Name::TYPEDEF_DETAILED_DESCRIPTION;
    t.start = L'􏴡';
    t.end = L'􏴢';
    t.fg_color = "#66652A";
    t.bg_color = "#000000";
    t.groups.emplace_back(Token_Group::TYPEDEF);
    t.description = "";
    t.bdf = Token_Bdf_Settings_Getter::Get_Square_Bracket();
    return t;
❱
◀public: static▶ Token ☀Typedef_Name() ❰
    Token t;
    t.name = Token_Name::TYPEDEF_NAME;
    t.start = L'􏴟';
    t.end = L'􏴠';
    t.fg_color = "#D69125";
    t.bg_color = "#000000";
    t.groups.emplace_back(Token_Group::TYPEDEF);
    t.description = "";
    t.bdf = Token_Bdf_Settings_Getter::Get_Square_Bracket();
    return t;
❱
◀public: static▶ Token ☀Typedef_Return() ❰
    Token t;
    t.name = Token_Name::TYPEDEF_RETURN;
    t.start = L'􏴝';
    t.end = L'􏴞';
    t.fg_color = "#366D6B";
    t.bg_color = "#000000";
    t.groups.emplace_back(Token_Group::TYPEDEF);
    t.groups.emplace_back(Token_Group::TYPEDEF_RESULT);
    t.description = "";
    t.bdf = Token_Bdf_Settings_Getter::Get_Square_Bracket();
    return t;
❱
◀public: static▶ Token ☀Typedef_Return_Comment() ❰
    Token t;
    t.name = Token_Name::TYPEDEF_RETURN_COMMENT;
    t.start = L'􏴛';
    t.end = L'􏴜';
    t.fg_color = "#5C5C5C";
    t.bg_color = "#000000";
    t.groups.emplace_back(Token_Group::TYPEDEF);
    t.groups.emplace_back(Token_Group::TYPEDEF_RESULT);
    t.description = "";
    t.bdf = Token_Bdf_Settings_Getter::Get_Square_Bracket();
    return t;
❱ 
◀public: static▶ Token ☀Typedef_Argument() ❰
    Token t;
    t.name = Token_Name::TYPEDEF_ARGUMENT;
    t.start = L'􏴙';
    t.end = L'􏴚';
    t.fg_color = "#2A4866";
    t.bg_color = "#000000";
    t.groups.emplace_back(Token_Group::TYPEDEF);
    t.groups.emplace_back(Token_Group::TYPEDEF_ARGUMENT);
    t.description = "";
    t.bdf = Token_Bdf_Settings_Getter::Get_Square_Bracket();
    return t;
❱ 
◀public: static▶ Token ☀Typedef_Argument_Comment() ❰
    Token t;
    t.name = Token_Name::TYPEDEF_ARGUMENT_COMMENT;
    t.start = L'􏴗';
    t.end = L'􏴘';
    t.fg_color = "#5C5C5C";
    t.bg_color = "#000000";
    t.groups.emplace_back(Token_Group::TYPEDEF);
    t.groups.emplace_back(Token_Group::TYPEDEF_ARGUMENT);
    t.description = "";
    t.bdf = Token_Bdf_Settings_Getter::Get_Square_Bracket();
    return t;
❱
◀public: static▶ Token ☀Data_Member_Brief() ❰
    Token t;
    t.name = Token_Name::DATA_MEMBER_BRIEF;
    t.start = L'􏶨';
    t.end = L'􏶧';
    t.fg_color = "#66432A";
    t.bg_color = "#000000";
    t.groups.emplace_back(Token_Group::DATA_MEMBER);
    t.description = "brief comment about the data member or global variable";
    t.bdf = Token_Bdf_Settings_Getter::Get_Square_Bracket();
    return t;
❱
◀public: static▶ Token ☀Data_Member_Detailed() ❰
    Token t;
    t.name = Token_Name::DATA_MEMBER_DETAILED;
    t.start = L'􏶦';
    t.end = L'􏶥';
    t.fg_color = "#66652A";
    t.bg_color = "#000000";
    t.groups.emplace_back(Token_Group::DATA_MEMBER);
    t.description = "detailed comment about the data member or global variable";
    t.bdf = Token_Bdf_Settings_Getter::Get_Square_Bracket();
    return t;
❱
◀public: static▶ Token ☀Data_Member_Class_Specifiers() ❰
    Token t;
    t.name = Token_Name::DATA_MEMBER_CLASS_SPECIFIERS;
    t.start = L'􏶘';
    t.end = L'􏶙';
    t.fg_color = "#BB4114";
    t.bg_color = "#000000";
    t.groups.emplace_back(Token_Group::DATA_MEMBER);
    t.description = "class qualifiers / static for the data member or global variables";
    t.bdf = Token_Bdf_Settings_Getter::Get_Square_Bracket();
    return t;
❱
◀public: static▶ Token ☀Data_Member_Type_Qualifiers() ❰
    Token t;
    t.name = Token_Name::DATA_MEMBER_TYPE_QUALIFIERS;
    t.start = L'􏶰';
    t.end = L'􏶯';
    t.fg_color = "#D67425";
    t.bg_color = "#000000";
    t.groups.emplace_back(Token_Group::DATA_MEMBER);
    t.description = "qualifiers for the type";
    t.bdf = Token_Bdf_Settings_Getter::Get_Square_Bracket();
    return t;
❱
◀public: static▶ Token ☀Data_Member_Identifier() ❰
    Token t;
    t.name = Token_Name::DATA_MEMBER_IDENTIFIER;
    t.start = L'􏶬';
    t.end = L'􏶫';
    t.fg_color = "#D69125";
    t.bg_color = "#000000";
    t.groups.emplace_back(Token_Group::DATA_MEMBER);
    t.description = "the identifier of one of the data members or global variables";
    t.bdf = Token_Bdf_Settings_Getter::Get_Square_Bracket();
    return t;
❱
◀public: static▶ Token ☀Data_Member_Units() ❰
    Token t;
    t.name = Token_Name::DATA_MEMBER_UNITS;
    t.start = L'􏵚';
    t.end = L'􏵛';
    t.fg_color = "#D7B859";
    t.bg_color = "#000000";
    t.groups.emplace_back(Token_Group::DATA_MEMBER);
    t.description = "the units of the identifier";
    t.bdf = Token_Bdf_Settings_Getter::Get_Square_Bracket();
    return t;
❱
◀public: static▶ Token ☀Data_Member_Default_Value() ❰
    Token t;
    t.name = Token_Name::DATA_MEMBER_DEFAULT_VALUE;
    t.start = L'􏶪';
    t.end = L'􏶩';
    t.fg_color = "#FFFFFF";
    t.bg_color = "#000000";
    t.groups.emplace_back(Token_Group::DATA_MEMBER);
    t.description = "the default value of the data member or global variable";
    t.bdf = Token_Bdf_Settings_Getter::Get_Square_Bracket();
    return t;
❱
◀public: static▶ Token ☀Data_Member_Partial_Pack_Amount() ❰
    Token t;
    t.name = Token_Name::DATA_MEMBER_PARTIAL_PACK_AMOUNT;
    t.start = L'􏴷';
    t.end = L'􏴸';
    t.fg_color = "#EF00FF";
    t.bg_color = "#000000";
    t.groups.emplace_back(Token_Group::DATA_MEMBER);
    t.description = "the amount of elements to partially pack an array";
    t.bdf = Token_Bdf_Settings_Getter::Get_Square_Bracket();
    return t;
❱
◀public: static▶ Token ☀Data_Member_Type() ❰
    Token t;
    t.name = Token_Name::DATA_MEMBER_TYPE;
    t.start = L'􏶮';
    t.end = L'􏶭';
    t.fg_color = "#2A4866";
    t.bg_color = "#000000";
    t.groups.emplace_back(Token_Group::DATA_MEMBER);
    t.description = "the type of one of the data members or global variables";
    t.bdf = Token_Bdf_Settings_Getter::Get_Square_Bracket();
    return t;
❱
◀public: static▶ Token ☀Data_Member_Indexes_To_Identifier() ❰
    Token t;
    t.name = Token_Name::INDEXES_TO_IDENTIFIER;
    t.start = L'􏲳';
    t.end = L'􏲴';
    t.fg_color = "#2A4866";
    t.bg_color = "#000000";
    t.groups.emplace_back(Token_Group::DATA_MEMBER);
    t.description = "";
    t.bdf = Token_Bdf_Settings_Getter::Get_Square_Bracket();
    return t;
❱
◀public: static▶ Token ☀Data_Member_Scope() ❰
    Token t;
    t.name = Token_Name::DATA_MEMBER_SCOPE;
    t.start = L'􏲷';
    t.end = L'􏲸';
    t.fg_color = "#2A4866";
    t.bg_color = "#000000";
    t.groups.emplace_back(Token_Group::DATA_MEMBER);
    t.groups.emplace_back(Token_Group::DATA_MEMBER_SCOPE);
    t.description = "";
    t.bdf = Token_Bdf_Settings_Getter::Get_Colon();
    return t;
❱
◀public: static▶ Token ☀Data_Member_Type_Specializations() ❰
    Token t;
    t.name = Token_Name::DATA_MEMBER_TYPE_SPECIALIZATIONS;
    t.start = L'􏳟';
    t.end = L'􏳠';
    t.fg_color = "#2A4866";
    t.bg_color = "#000000";
    t.groups.emplace_back(Token_Group::DATA_MEMBER);
    t.groups.emplace_back(Token_Group::DATA_MEMBER_TYPE_SPECIALIZATIONS);
    t.description = "";
    t.bdf = Token_Bdf_Settings_Getter::Get_Angle_Bracket();
    return t;
❱
◀public: static▶ Token ☀Data_Member_Type_Specializations_Scope() ❰
    Token t;
    t.name = Token_Name::DATA_MEMBER_TYPE_SPECIALIZATIONS_SCOPE;
    t.start = L'􏲵';
    t.end = L'􏲶';
    t.fg_color = "#2A4866";
    t.bg_color = "#000000";
    t.groups.emplace_back(Token_Group::DATA_MEMBER);
    t.groups.emplace_back(Token_Group::DATA_MEMBER_TYPE_SPECIALIZATIONS);
    t.groups.emplace_back(Token_Group::DATA_MEMBER_TYPE_SPECIALIZATIONS_SCOPE);
    t.description = "";
    t.bdf = Token_Bdf_Settings_Getter::Get_Colon();
    return t;
❱
◀public: static▶ Token ☀Data_Member_Type_Module_Dependencies() ❰
    Token t;
    t.name = Token_Name::DATA_MEMBER_TYPE_MODULE_DEPENDENCIES;
    t.start = L'􏲹';
    t.end = L'􏲺';
    t.fg_color = "#42E2F4";
    t.bg_color = "#000000";
    t.groups.emplace_back(Token_Group::DATA_MEMBER);
    t.groups.emplace_back(Token_Group::DATA_MEMBER_TYPE_MODULE_DEPENDENCIES);
    t.description = "";
    t.bdf = Token_Bdf_Settings_Getter::Get_Exclamation_Point();
    return t;
❱
◀public: static▶ Token ☀Data_Member_Type_Library_Dependencies() ❰
    Token t;
    t.name = Token_Name::DATA_MEMBER_TYPE_LIBRARY_DEPENDENCIES;
    t.start = L'􏲱';
    t.end = L'􏲲';
    t.fg_color = "#42E2F4";
    t.bg_color = "#000000";
    t.groups.emplace_back(Token_Group::DATA_MEMBER);
    t.groups.emplace_back(Token_Group::DATA_MEMBER_TYPE_LIBRARY_DEPENDENCIES);
    t.description = "";
    t.bdf = Token_Bdf_Settings_Getter::Get_Exclamation_Point();
    return t;
❱
◀public: static▶ Token ☀Data_Member_Parent_Type() ❰
    Token t;
    t.name = Token_Name::DATA_MEMBER_PARENT_TYPE;
    t.start = L'􏷔';
    t.end = L'􏷓';
    t.fg_color = "#42E2F4";
    t.bg_color = "#000000";
    t.groups.emplace_back(Token_Group::DATA_MEMBER);
    t.groups.emplace_back(Token_Group::PARENT_TYPES);
    t.description = "";
    t.bdf = Token_Bdf_Settings_Getter::Get_Square_Bracket();
    return t;
❱
◀public: static▶ Token ☀Data_Member_Pair_Key() ❰
    Token t;
    t.name = Token_Name::DATA_MEMBER_PAIR_KEY;
    t.start = L'􏵁';
    t.end = L'􏵂';
    t.fg_color = "#4C7B92";
    t.bg_color = "#000000";
    t.groups.emplace_back(Token_Group::DATA_MEMBER);
    t.groups.emplace_back(Token_Group::DATA_MEMBER_KEY_VALUES);
    t.description = "";
    t.bdf = Token_Bdf_Settings_Getter::Get_Square_Bracket();
    return t;
❱
◀public: static▶ Token ☀Data_Member_Pair_Value() ❰
    Token t;
    t.name = Token_Name::DATA_MEMBER_PAIR_VALUE;
    t.start = L'􏴿';
    t.end = L'􏵀';
    t.fg_color = "#6BC7F5";
    t.bg_color = "#000000";
    t.groups.emplace_back(Token_Group::DATA_MEMBER);
    t.groups.emplace_back(Token_Group::DATA_MEMBER_KEY_VALUES);
    t.description = "";
    t.bdf = Token_Bdf_Settings_Getter::Get_Square_Bracket();
    return t;
❱
◀public: static▶ Token ☀Data_Member_Constraint_Operation() ❰
    Token t;
    t.name = Token_Name::DATA_MEMBER_CONSTRAINT_OPERATION;
    t.start = L'􏴽';
    t.end = L'􏴾';
    t.fg_color = "#FB3535";
    t.bg_color = "#000000";
    t.groups.emplace_back(Token_Group::DATA_MEMBER);
    t.groups.emplace_back(Token_Group::DATA_MEMBER_VALUE_CONSTRAINTS);
    t.description = "";
    t.bdf = Token_Bdf_Settings_Getter::Get_Square_Bracket();
    return t;
❱
◀public: static▶ Token ☀Data_Member_Constraint_Value() ❰
    Token t;
    t.name = Token_Name::DATA_MEMBER_CONSTRAINT_VALUE;
    t.start = L'􏴵';
    t.end = L'􏴶';
    t.fg_color = "#FF7676";
    t.bg_color = "#000000";
    t.groups.emplace_back(Token_Group::DATA_MEMBER);
    t.groups.emplace_back(Token_Group::DATA_MEMBER_VALUE_CONSTRAINTS);
    t.description = "";
    t.bdf = Token_Bdf_Settings_Getter::Get_Square_Bracket();
    return t;
❱
◀public: static▶ Token ☀Data_Member_Broken_Constraint_Meaning() ❰
    Token t;
    t.name = Token_Name::DATA_MEMBER_BROKEN_CONSTRAINT_MEANING;
    t.start = L'􏳭';
    t.end = L'􏳮';
    t.fg_color = "#ea908f";
    t.bg_color = "#000000";
    t.groups.emplace_back(Token_Group::DATA_MEMBER);
    t.groups.emplace_back(Token_Group::DATA_MEMBER_VALUE_CONSTRAINTS);
    t.description = "";
    t.bdf = Token_Bdf_Settings_Getter::Get_Square_Bracket();
    return t;
❱
◀public: static▶ Token ☀Data_Member_Broken_Constraint_Display_Theme() ❰
    Token t;
    t.name = Token_Name::DATA_MEMBER_CONSTRAINT_DISPLAY_THEME;
    t.start = L'􏳫';
    t.end = L'􏳬';
    t.fg_color = "#edb5b4";
    t.bg_color = "#000000";
    t.groups.emplace_back(Token_Group::DATA_MEMBER);
    t.groups.emplace_back(Token_Group::DATA_MEMBER_VALUE_CONSTRAINTS);
    t.description = "";
    t.bdf = Token_Bdf_Settings_Getter::Get_Square_Bracket();
    return t;
❱
◀public: static▶ Token ☀Data_Member_Defined_Value_Operation() ❰
    Token t;
    t.name = Token_Name::DATA_MEMBER_DEFINED_VALUE_OPERATION;
    t.start = L'􏳩';
    t.end = L'􏳪';
    t.fg_color = "#14541f";
    t.bg_color = "#000000";
    t.groups.emplace_back(Token_Group::DATA_MEMBER);
    t.groups.emplace_back(Token_Group::DATA_MEMBER_VALUE_MEANING);
    t.description = "";
    t.bdf = Token_Bdf_Settings_Getter::Get_Square_Bracket();
    return t;
❱
◀public: static▶ Token ☀Data_Member_Defined_Value() ❰
    Token t;
    t.name = Token_Name::DATA_MEMBER_DEFINED_VALUE;
    t.start = L'􏴻';
    t.end = L'􏴼';
    t.fg_color = "#137E45";
    t.bg_color = "#000000";
    t.groups.emplace_back(Token_Group::DATA_MEMBER);
    t.groups.emplace_back(Token_Group::DATA_MEMBER_VALUE_MEANING);
    t.description = "";
    t.bdf = Token_Bdf_Settings_Getter::Get_Square_Bracket();
    return t;
❱
◀public: static▶ Token ☀Data_Member_Defined_Value_Meaning() ❰
    Token t;
    t.name = Token_Name::DATA_MEMBER_DEFINED_VALUE_MEANING;
    t.start = L'􏴹';
    t.end = L'􏴺';
    t.fg_color = "#2CEC85";
    t.bg_color = "#000000";
    t.groups.emplace_back(Token_Group::DATA_MEMBER);
    t.groups.emplace_back(Token_Group::DATA_MEMBER_VALUE_MEANING);
    t.description = "";
    t.bdf = Token_Bdf_Settings_Getter::Get_Square_Bracket();
    return t;
❱
◀public: static▶ Token ☀Data_Member_Defined_Value_Display_Theme() ❰
    Token t;
    t.name = Token_Name::DATA_MEMBER_DEFINED_VALUE_DISPLAY_THEME;
    t.start = L'􏳧';
    t.end = L'􏳨';
    t.fg_color = "#90f9a4";
    t.bg_color = "#000000";
    t.groups.emplace_back(Token_Group::DATA_MEMBER);
    t.groups.emplace_back(Token_Group::DATA_MEMBER_VALUE_MEANING);
    t.description = "";
    t.bdf = Token_Bdf_Settings_Getter::Get_Square_Bracket();
    return t;
❱
◀public: static▶ Token ☀Data_Member_Transition_Before_Operation() ❰
    Token t;
    t.name = Token_Name::DATA_MEMBER_TRANSITION_BEFORE_OPERATION;
    t.start = L'􏳷';
    t.end = L'􏳸';
    t.fg_color = "#463300";
    t.bg_color = "#000000";
    t.groups.emplace_back(Token_Group::DATA_MEMBER);
    t.groups.emplace_back(Token_Group::DATA_MEMBER_VALUE_TRANSITION_MEANING);
    t.description = "";
    t.bdf = Token_Bdf_Settings_Getter::Get_Square_Bracket();
    return t;
❱
◀public: static▶ Token ☀Data_Member_Transition_Before_Value() ❰
    Token t;
    t.name = Token_Name::DATA_MEMBER_TRANSITION_BEFORE_VALUE;
    t.start = L'􏳵';
    t.end = L'􏳶';
    t.fg_color = "#8c6600";
    t.bg_color = "#000000";
    t.groups.emplace_back(Token_Group::DATA_MEMBER);
    t.groups.emplace_back(Token_Group::DATA_MEMBER_VALUE_TRANSITION_MEANING);
    t.description = "";
    t.bdf = Token_Bdf_Settings_Getter::Get_Square_Bracket();
    return t;
❱
◀public: static▶ Token ☀Data_Member_Transition_After_Operation() ❰
    Token t;
    t.name = Token_Name::DATA_MEMBER_TRANSITION_AFTER_OPERATION;
    t.start = L'􏳳';
    t.end = L'􏳴';
    t.fg_color = "#d19a00";
    t.bg_color = "#000000";
    t.groups.emplace_back(Token_Group::DATA_MEMBER);
    t.groups.emplace_back(Token_Group::DATA_MEMBER_VALUE_TRANSITION_MEANING);
    t.description = "";
    t.bdf = Token_Bdf_Settings_Getter::Get_Square_Bracket();
    return t;
❱
◀public: static▶ Token ☀Data_Member_Transition_After_Value() ❰
    Token t;
    t.name = Token_Name::DATA_MEMBER_TRANSITION_AFTER_VALUE;
    t.start = L'􏳱';
    t.end = L'􏳲';
    t.fg_color = "#ffc72e";
    t.bg_color = "#000000";
    t.groups.emplace_back(Token_Group::DATA_MEMBER);
    t.groups.emplace_back(Token_Group::DATA_MEMBER_VALUE_TRANSITION_MEANING);
    t.description = "";
    t.bdf = Token_Bdf_Settings_Getter::Get_Square_Bracket();
    return t;
❱
◀public: static▶ Token ☀Data_Member_Transition_Meaning() ❰
    Token t;
    t.name = Token_Name::DATA_MEMBER_TRANSITION_MEANING;
    t.start = L'􏳯';
    t.end = L'􏳰';
    t.fg_color = "#ffd973";
    t.bg_color = "#000000";
    t.groups.emplace_back(Token_Group::DATA_MEMBER);
    t.groups.emplace_back(Token_Group::DATA_MEMBER_VALUE_TRANSITION_MEANING);
    t.description = "";
    t.bdf = Token_Bdf_Settings_Getter::Get_Square_Bracket();
    return t;
❱
◀public: static▶ Token ☀Data_Member_Transition_Display_Theme() ❰
    Token t;
    t.name = Token_Name::DATA_MEMBER_TRANSITION_DISPLAY_THEME;
    t.start = L'􏳥';
    t.end = L'􏳦';
    t.fg_color = "#d3cda2";
    t.bg_color = "#000000";
    t.groups.emplace_back(Token_Group::DATA_MEMBER);
    t.groups.emplace_back(Token_Group::DATA_MEMBER_VALUE_TRANSITION_MEANING);
    t.description = "";
    t.bdf = Token_Bdf_Settings_Getter::Get_Square_Bracket();
    return t;
❱
◀public: static▶ Token ☀Enum_Brief() ❰
    Token t;
    t.name = Token_Name::ENUM_BRIEF;
    t.start = L'􏶊';
    t.end = L'􏶉';
    t.fg_color = "#66432A";
    t.bg_color = "#000000";
    t.groups.emplace_back(Token_Group::ENUM);
    t.description = "a brief comment about the enumerated type";
    t.bdf = Token_Bdf_Settings_Getter::Get_Square_Bracket();
    return t;
❱
◀public: static▶ Token ☀Enum_Detail() ❰
    Token t;
    t.name = Token_Name::ENUM_DETAIL;
    t.start = L'􏶈';
    t.end = L'􏶇';
    t.fg_color = "#66652A";
    t.bg_color = "#000000";
    t.groups.emplace_back(Token_Group::ENUM);
    t.description = "details about the enumerated type";
    t.bdf = Token_Bdf_Settings_Getter::Get_Square_Bracket();
    return t;
❱
◀public: static▶ Token ☀Enum_Name() ❰
    Token t;
    t.name = Token_Name::ENUM_NAME;
    t.start = L'􏶀';
    t.end = L'􏶋';
    t.fg_color = "#C35A00";
    t.bg_color = "#000000";
    t.groups.emplace_back(Token_Group::ENUM);
    t.description = "the name of an enumerated type";
    t.bdf = Token_Bdf_Settings_Getter::Get_Square_Bracket();
    return t;
❱
◀public: static▶ Token ☀Enum_Specifiers() ❰
    Token t;
    t.name = Token_Name::ENUM_SPECIFIERS;
    t.start = L'􏵮';
    t.end = L'􏵯';
    t.fg_color = "#5C5C5C";
    t.bg_color = "#000000";
    t.groups.emplace_back(Token_Group::ENUM);
    t.description = "i=iterable";
    t.bdf = Token_Bdf_Settings_Getter::Get_Square_Bracket();
    return t;
❱
◀public: static▶ Token ☀Enum_Base_Type() ❰
    Token t;
    t.name = Token_Name::ENUM_BASE_TYPE;
    t.start = L'􏵬';
    t.end = L'􏵭';
    t.fg_color = "#5C5C5C";
    t.bg_color = "#000000";
    t.groups.emplace_back(Token_Group::ENUM);
    t.description = "the underlying base type of the enum(applies C++11 and up)";
    t.bdf = Token_Bdf_Settings_Getter::Get_Square_Bracket();
    return t;
❱
◀public: static▶ Token ☀Enum_Subgroup_Name() ❰
    Token t;
    t.name = Token_Name::ENUM_SUBGROUP_NAME;
    t.start = L'􏳿';
    t.end = L'􏴀';
    t.fg_color = "#4C7B92";
    t.bg_color = "#000000";
    t.groups.emplace_back(Token_Group::ENUM);
    t.groups.emplace_back(Token_Group::ENUM_SUBGROUP);
    t.description = "name of an enumerated subgroup";
    t.bdf = Token_Bdf_Settings_Getter::Get_Square_Bracket();
    return t;
❱
◀public: static▶ Token ☀Enum_Subgroup_Description() ❰
    Token t;
    t.name = Token_Name::ENUM_SUBGROUP_DESCRIPTION;
    t.start = L'􏳽';
    t.end = L'􏳾';
    t.fg_color = "#6BC7F5";
    t.bg_color = "#000000";
    t.groups.emplace_back(Token_Group::ENUM);
    t.groups.emplace_back(Token_Group::ENUM_SUBGROUP);
    t.description = "description of the enumerated subgroup";
    t.bdf = Token_Bdf_Settings_Getter::Get_Square_Bracket();
    return t;
❱
◀public: static▶ Token ☀Enum_Arg_Name() ❰
    Token t;
    t.name = Token_Name::ENUM_ARG_NAME;
    t.start = L'􏶆';
    t.end = L'􏶅';
    t.fg_color = "#66AD23";
    t.bg_color = "#000000";
    t.groups.emplace_back(Token_Group::ENUM);
    t.groups.emplace_back(Token_Group::ENUM_ARG);
    t.description = "one of the enumerated type's values";
    t.bdf = Token_Bdf_Settings_Getter::Get_Square_Bracket();
    return t;
❱
◀public: static▶ Token ☀Enum_Arg_Value() ❰
    Token t;
    t.name = Token_Name::ENUM_ARG_VALUE;
    t.start = L'􏶄';
    t.end = L'􏶃';
    t.fg_color = "#23AD8D";
    t.bg_color = "#000000";
    t.groups.emplace_back(Token_Group::ENUM);
    t.groups.emplace_back(Token_Group::ENUM_ARG);
    t.description = "the integer that the enumerated value represents";
    t.bdf = Token_Bdf_Settings_Getter::Get_Square_Bracket();
    return t;
❱
◀public: static▶ Token ☀Enum_Arg_Comment() ❰
    Token t;
    t.name = Token_Name::ENUM_ARG_COMMENT;
    t.start = L'􏶂';
    t.end = L'􏶁';
    t.fg_color = "#5C5C5C";
    t.bg_color = "#000000";
    t.groups.emplace_back(Token_Group::ENUM);
    t.groups.emplace_back(Token_Group::ENUM_ARG);
    t.description = "a comment about that particular enumerated value";
    t.bdf = Token_Bdf_Settings_Getter::Get_Square_Bracket();
    return t;
❱
◀public: static▶ Token ☀Enum_Arg_Group_Affiliation() ❰
    Token t;
    t.name = Token_Name::ENUM_ARG_GROUP_AFFILIATION;
    t.start = L'􏳻';
    t.end = L'􏳼';
    t.fg_color = "#70FFFF";
    t.bg_color = "#000000";
    t.groups.emplace_back(Token_Group::ENUM);
    t.groups.emplace_back(Token_Group::ENUM_ARG);
    t.groups.emplace_back(Token_Group::ENUM_GROUP_AFFILIATION);
    t.description = "the affiliated group (if any) that the enum arg belongs to";
    t.bdf = Token_Bdf_Settings_Getter::Get_Square_Bracket();
    return t;
❱
◀public: static▶ Token ☀Macro_Specifiers() ❰
    Token t;
    t.name = Token_Name::MACRO_SPECIFIERS;
    t.start = L'􏵐';
    t.end = L'􏵑';
    t.fg_color = "#E87272";
    t.bg_color = "#000000";
    t.groups.emplace_back(Token_Group::MACRO);
    t.description = "macro specifiers";
    t.bdf = Token_Bdf_Settings_Getter::Get_Square_Bracket();
    return t;
❱
◀public: static▶ Token ☀Macro_Name() ❰
    Token t;
    t.name = Token_Name::MACRO_NAME;
    t.start = L'􏵾';
    t.end = L'􏵿';
    t.fg_color = "#9C4747";
    t.bg_color = "#000000";
    t.groups.emplace_back(Token_Group::MACRO);
    t.description = "macro name";
    t.bdf = Token_Bdf_Settings_Getter::Get_Square_Bracket();
    return t;
❱
◀public: static▶ Token ☀Macro_Units() ❰
    Token t;
    t.name = Token_Name::MACRO_UNITS;
    t.start = L'􏵖';
    t.end = L'􏵗';
    t.fg_color = "#FF0000";
    t.bg_color = "#000000";
    t.groups.emplace_back(Token_Group::MACRO);
    t.description = "macro units";
    t.bdf = Token_Bdf_Settings_Getter::Get_Square_Bracket();
    return t;
❱
◀public: static▶ Token ☀Macro_Argument_Identifier() ❰
    Token t;
    t.name = Token_Name::MACRO_ARGUMENT_IDENTIFIER;
    t.start = L'􏴩';
    t.end = L'􏴪';
    t.fg_color = "#66432A";
    t.bg_color = "#000000";
    t.groups.emplace_back(Token_Group::MACRO);
    t.groups.emplace_back(Token_Group::MACRO_ARGUMENT);
    t.description = "macro argument";
    t.bdf = Token_Bdf_Settings_Getter::Get_Square_Bracket();
    return t;
❱
◀public: static▶ Token ☀Macro_Argument_Comment() ❰
    Token t;
    t.name = Token_Name::MACRO_ARGUMENT_COMMENT;
    t.start = L'􏴧';
    t.end = L'􏴨';
    t.fg_color = "#66432A";
    t.bg_color = "#000000";
    t.groups.emplace_back(Token_Group::MACRO);
    t.groups.emplace_back(Token_Group::MACRO_ARGUMENT);
    t.description = "macro argument comment";
    t.bdf = Token_Bdf_Settings_Getter::Get_Square_Bracket();
    return t;
❱
◀public: static▶ Token ☀Macro_Brief() ❰
    Token t;
    t.name = Token_Name::MACRO_BRIEF;
    t.start = L'􏵺';
    t.end = L'􏵻';
    t.fg_color = "#66432A";
    t.bg_color = "#000000";
    t.groups.emplace_back(Token_Group::MACRO);
    t.groups.emplace_back(Token_Group::MACRO_VALUE);
    t.description = "macro brief statement";
    t.bdf = Token_Bdf_Settings_Getter::Get_Square_Bracket();
    return t;
❱
◀public: static▶ Token ☀Macro_Detail() ❰
    Token t;
    t.name = Token_Name::MACRO_DETAIL;
    t.start = L'􏵸';
    t.end = L'􏵹';
    t.fg_color = "#66652A";
    t.bg_color = "#000000";
    t.groups.emplace_back(Token_Group::MACRO);
    t.groups.emplace_back(Token_Group::MACRO_VALUE);
    t.description = "macro detailed statement";
    t.bdf = Token_Bdf_Settings_Getter::Get_Square_Bracket();
    return t;
❱
◀public: static▶ Token ☀Macro_Value() ❰
    Token t;
    t.name = Token_Name::MACRO_VALUE;
    t.start = L'􏵼';
    t.end = L'􏵽';
    t.fg_color = "#5C5C5C";
    t.bg_color = "#000000";
    t.groups.emplace_back(Token_Group::MACRO);
    t.groups.emplace_back(Token_Group::MACRO_VALUE);
    t.description = "macro value";
    t.bdf = Token_Bdf_Settings_Getter::Get_Square_Bracket();
    return t;
❱
◀public: static▶ Token ☀File_Wide_Invariant() ❰
    Token t;
    t.name = Token_Name::FILE_WIDE_INVARIANT;
    t.start = L'􏵠';
    t.end = L'􏵡';
    t.fg_color = "#5F00A3";
    t.bg_color = "#000000";
    t.groups.emplace_back(Token_Group::FILE_WIDE_INVARIANT);
    t.description = "an invariant that holds true between all function calls";
    t.bdf = Token_Bdf_Settings_Getter::Get_Square_Bracket();
    return t;
❱
◀public: static▶ Token ☀File_Wide_Invariant_Comment() ❰
    Token t;
    t.name = Token_Name::FILE_WIDE_INVARIANT_COMMENT;
    t.start = L'􏵞';
    t.end = L'􏵟';
    t.fg_color = "#5F00A3";
    t.bg_color = "#000000";
    t.groups.emplace_back(Token_Group::FILE_WIDE_INVARIANT);
    t.description = "a comment for an invariant that holds true between all function calls";
    t.bdf = Token_Bdf_Settings_Getter::Get_Square_Bracket();
    return t;
❱
◀public: static▶ Token ☀Run_Shell_Command() ❰
    Token t;
    t.name = Token_Name::RUN_SHELL_COMMAND;
    t.start = L'􏶤';
    t.end = L'􏶣';
    t.fg_color = "#5F00A3";
    t.bg_color = "#000000";
    t.groups.emplace_back(Token_Group::OTHER);
    t.description = "run a shell command and replace the token with the contents.  This happens again and again until there are no shell commands left.  So a shell command can create more shell commands to run";
    t.bdf = Token_Bdf_Settings_Getter::Get_Square_Bracket();
    return t;
❱
◀public: static▶ Token ☀Test_Case_Name() ❰
    Token t;
    t.name = Token_Name::TEST_CASE_NAME;
    t.start = L'􏵎';
    t.end = L'􏵏';
    t.fg_color = "#0BDC42";
    t.bg_color = "#000000";
    t.groups.emplace_back(Token_Group::TEST_CASE);
    t.description = "the name of the test case";
    t.bdf = Token_Bdf_Settings_Getter::Get_Square_Bracket();
    return t;
❱
◀public: static▶ Token ☀Test_Case_Tag() ❰
    Token t;
    t.name = Token_Name::TEST_CASE_TAG;
    t.start = L'􏵌';
    t.end = L'􏵍';
    t.fg_color = "#126427";
    t.bg_color = "#000000";
    t.groups.emplace_back(Token_Group::TEST_CASE);
    t.description = "a tag to identify the test case";
    t.bdf = Token_Bdf_Settings_Getter::Get_Square_Bracket();
    return t;
❱
◀public: static▶ Token ☀Test_Case_Body() ❰
    Token t;
    t.name = Token_Name::TEST_CASE_BODY;
    t.start = L'􏵊';
    t.end = L'􏵋';
    t.fg_color = "#FFFFFF";
    t.bg_color = "#1D3723";
    t.groups.emplace_back(Token_Group::TEST_CASE);
    t.description = "the body of a test case";
    t.bdf = Token_Bdf_Settings_Getter::Get_Square_Bracket();
    return t;
❱
◀public: static▶ Body_Token ☀Regular_Comment() ❰
    Body_Token t;
    t.name = Body_Token_Name::REGULAR_COMMENT;
    t.start = L'􏶲';
    t.end = L'􏶱';
    t.fg_color = "#5C5C5C";
    t.bg_color = "#051726";
    t.groups.emplace_back(Body_Token_Group::METHOD_BODY);
    t.description = "";
    t.bdf = Token_Bdf_Settings_Getter::Get_Square_Bracket();
    return t;
❱
◀public: static▶ Body_Token ☀Todo_Comment() ❰
    Body_Token t;
    t.name = Body_Token_Name::TODO_COMMENT;
    t.start = L'􏲙';
    t.end = L'􏲚';
    t.fg_color = "#5BAEAB";
    t.bg_color = "#051726";
    t.groups.emplace_back(Body_Token_Group::METHOD_BODY);
    t.description = "";
    t.bdf = Token_Bdf_Settings_Getter::Get_Square_Bracket();
    return t;
❱
◀public: static▶ Body_Token ☀Warning_Comment() ❰
    Body_Token t;
    t.name = Body_Token_Name::WARNING_COMMENT;
    t.start = L'􏲗';
    t.end = L'􏲘';
    t.fg_color = "#5BAEAB";
    t.bg_color = "#051726";
    t.groups.emplace_back(Body_Token_Group::METHOD_BODY);
    t.description = "";
    t.bdf = Token_Bdf_Settings_Getter::Get_Square_Bracket();
    return t;
❱
◀public: static▶ Body_Token ☀Regular_Statement() ❰
    Body_Token t;
    t.name = Body_Token_Name::REGULAR_STATEMENT;
    t.start = L'􏲕';
    t.end = L'􏲖';
    t.fg_color = "#5BAEAB";
    t.bg_color = "#051726";
    t.groups.emplace_back(Body_Token_Group::METHOD_BODY);
    t.description = "";
    t.bdf = Token_Bdf_Settings_Getter::Get_Square_Bracket();
    return t;
❱
◀public: static▶ Body_Token ☀Return_Statement() ❰
    Body_Token t;
    t.name = Body_Token_Name::RETURN_STATEMENT;
    t.start = L'􏲓';
    t.end = L'􏲔';
    t.fg_color = "#5BAEAB";
    t.bg_color = "#051726";
    t.groups.emplace_back(Body_Token_Group::METHOD_BODY);
    t.description = "";
    t.bdf = Token_Bdf_Settings_Getter::Get_Square_Bracket();
    return t;
❱
◀public: static▶ Body_Token ☀Uncaught_Statement() ❰
    Body_Token t;
    t.name = Body_Token_Name::UNCAUGHT_STATEMENT;
    t.start = L'􏲑';
    t.end = L'􏲒';
    t.fg_color = "#5BAEAB";
    t.bg_color = "#051726";
    t.groups.emplace_back(Body_Token_Group::METHOD_BODY);
    t.description = "";
    t.bdf = Token_Bdf_Settings_Getter::Get_Square_Bracket();
    return t;
❱
◀public: static▶ Body_Token ☀Statement() ❰
    Body_Token t;
    t.name = Body_Token_Name::STATEMENT;
    t.start = L'􏴕';
    t.end = L'􏴖';
    t.fg_color = "#5BAEAB";
    t.bg_color = "#051726";
    t.groups.emplace_back(Body_Token_Group::METHOD_BODY);
    t.groups.emplace_back(Body_Token_Group::STATEMENT);
    t.description = "a statement inside of a function";
    t.bdf = Token_Bdf_Settings_Getter::Get_Square_Bracket();
    return t;
❱

//TODO(thickey): shift into statement
◀public: static▶ Body_Token ☀Body_Parameter() ❰
    Body_Token t;
    t.name = Body_Token_Name::BODY_PARAMETER;
    t.start = L'􏵶';
    t.end = L'􏵷';
    t.fg_color = "#EF53EF";
    t.bg_color = "#051726";
    t.groups.emplace_back(Body_Token_Group::METHOD_BODY);
    t.groups.emplace_back(Body_Token_Group::BODY_PARAMETER);
    t.description = "the use of a function parameter inside a function";
    t.bdf = Token_Bdf_Settings_Getter::Get_Square_Bracket();
    return t;
❱
◀public: static▶ Body_Token ☀Self_Data_Member() ❰
    Body_Token t;
    t.name = Body_Token_Name::SELF_DATA_MEMBER;
    t.start = L'􏵴';
    t.end = L'􏵵';
    t.fg_color = "#D69125";
    t.bg_color = "#051726";
    t.groups.emplace_back(Body_Token_Group::METHOD_BODY);
    t.groups.emplace_back(Body_Token_Group::SELF_DATA_MEMBER);
    t.description = "the use of a local data member inside a function";
    t.bdf = Token_Bdf_Settings_Getter::Get_Square_Bracket();
    return t;
❱
◀public: static▶ Body_Token ☀Self_Data_Member_Without_Obj() ❰
    Body_Token t;
    t.name = Body_Token_Name::SELF_DATA_MEMBER_WITHOUT_OBJ;
    t.start = L'􏳉';
    t.end = L'􏳊';
    t.fg_color = "#D69125";
    t.bg_color = "#051726";
    t.groups.emplace_back(Body_Token_Group::METHOD_BODY);
    t.groups.emplace_back(Body_Token_Group::SELF_DATA_MEMBER_WITHOUT_OBJ);
    t.description = "the use of a local data member inside a function";
    t.bdf = Token_Bdf_Settings_Getter::Get_Square_Bracket();
    return t;
❱
◀public: static▶ Body_Token ☀Local_Data_Member() ❰
    Body_Token t;
    t.name = Body_Token_Name::LOCAL_DATA_MEMBER;
    t.start = L'􏵈';
    t.end = L'􏵉';
    t.fg_color = "#2529DB";
    t.bg_color = "#051726";
    t.groups.emplace_back(Body_Token_Group::METHOD_BODY);
    t.groups.emplace_back(Body_Token_Group::LOCAL_DATA_MEMBER);
    t.description = "a variable instantiated in the scope of the method";
    t.bdf = Token_Bdf_Settings_Getter::Get_Square_Bracket();
    return t;
❱
◀public: static▶ Body_Token ☀Sub_Member() ❰
    Body_Token t;
    t.name = Body_Token_Name::SUB_MEMBER;
    t.start = L'􏵆';
    t.end = L'􏵇';
    t.fg_color = "#5F00A3";
    t.bg_color = "#051726";
    t.groups.emplace_back(Body_Token_Group::METHOD_BODY);
    t.groups.emplace_back(Body_Token_Group::SUB_MEMBER);
    t.description = "a child member of a particular member";
    t.bdf = Token_Bdf_Settings_Getter::Get_Square_Bracket();
    return t;
❱
◀public: static▶ Body_Token ☀Self_Function_Call() ❰
    Body_Token t;
    t.name = Body_Token_Name::SELF_FUNCTION_CALL;
    t.start = L'􏵲';
    t.end = L'􏵳';
    t.fg_color = "#C35A00";
    t.bg_color = "#051726";
    t.groups.emplace_back(Body_Token_Group::METHOD_BODY);
    t.groups.emplace_back(Body_Token_Group::SELF_FUNCTION_CALL);
    t.description = "the call to another local function inside a function";
    t.bdf = Token_Bdf_Settings_Getter::Get_Square_Bracket();
    return t;
❱
◀public: static▶ Body_Token ☀Foreign_Function_Call() ❰
    Body_Token t;
    t.name = Body_Token_Name::FOREIGN_FUNCTION_CALL;
    t.start = L'􏵄';
    t.end = L'􏵅';
    t.fg_color = "#DB252B";
    t.bg_color = "#051726";
    t.groups.emplace_back(Body_Token_Group::METHOD_BODY);
    t.groups.emplace_back(Body_Token_Group::FOREIGN_FUNCTION_CALL);
    t.description = "a function call that exists outside outside the structure";
    t.bdf = Token_Bdf_Settings_Getter::Get_Square_Bracket();
    return t;
❱
◀public: static▶ Body_Token ☀Return() ❰
    Body_Token t;
    t.name = Body_Token_Name::RETURN;
    t.start = L'􏵢';
    t.end = L'􏵣';
    t.fg_color = "#5BAEAB";
    t.bg_color = "#051726";
    t.groups.emplace_back(Body_Token_Group::METHOD_BODY);
    t.groups.emplace_back(Body_Token_Group::RETURN);
    t.description = "the return statement inside of a function";
    t.bdf = Token_Bdf_Settings_Getter::Get_Square_Bracket();
    return t;
❱




