class

❪vector❫
❪map❫
❪utility❫
⚯
❪"code/utilities/types/general/lib"❫
❪"code/utilities/program/common_actions/exits/lib"❫
❪"code/utilities/types/vectors/observers/lib"❫
❪"code/utilities/types/vectors/operators/lib"❫
⚞⚟


◀public: static▶ void ☀Ensure_All_Token_Values_Are_Unique(All_Language_Tokens const& all_tokens) ❰
    
    //and then testing that they are indeed unique
    if (!All_Token_Characters_Are_Unique(all_tokens)){

        Print_Duplicates(all_tokens);
        Exit_With_Error("not using unique " + LANGUAGE_NAME + " markers");
    }
❱

◀public: static▶ bool ☀All_Token_Characters_Are_Unique(All_Language_Tokens const& all_tokens) ❰

    //make sure all markers are unique
    //by building a vec of all the characters
    auto all_chars = Get_All_UniLang_Token_Characters(all_tokens);
    
    //and then testing that they are indeed unique
    if (all_unique(all_chars.begin(),all_chars.end())){
        return true;
    }
    
    return false;
❱

◀private: static▶ std::vector<wchar_t> ☀Get_All_UniLang_Token_Characters(All_Language_Tokens const& all_tokens) ❰

    //root unicode characters
    auto all_unicode_chars_used_at_root
    = Destructure_Out_Vec_Of_Data_Member(all_tokens.tokens.begin(),all_tokens.tokens.end(),&decltype(all_tokens.tokens)::value_type::start)
    + Destructure_Out_Vec_Of_Data_Member(all_tokens.tokens.begin(),all_tokens.tokens.end(),&decltype(all_tokens.tokens)::value_type::end);

    //body root unicode characters
    auto all_unicode_chars_used_in_body_root
    = Destructure_Out_Vec_Of_Data_Member(all_tokens.body_tokens.begin(),all_tokens.body_tokens.end(),&decltype(all_tokens.body_tokens)::value_type::start)
    + Destructure_Out_Vec_Of_Data_Member(all_tokens.body_tokens.begin(),all_tokens.body_tokens.end(),&decltype(all_tokens.body_tokens)::value_type::end);

    //all of the token groups
    auto all_chars = all_unicode_chars_used_at_root + all_unicode_chars_used_in_body_root;
    
    //all of the macro characters
    all_chars.push_back(all_tokens.standalone_symbols.CLASS_NAME_CODE_FORM_MACRO);
    all_chars.push_back(all_tokens.standalone_symbols.CLASS_NAME_PRINT_FORM_MACRO);
    all_chars.push_back(all_tokens.standalone_symbols.TEST_OBJECT_CLASS_NAME);
    all_chars.push_back(all_tokens.standalone_symbols.ESCAPE_CHARACTER);
    all_chars.push_back(all_tokens.standalone_symbols.TRUE_MACRO);
    all_chars.push_back(all_tokens.standalone_symbols.FALSE_MACRO);
    all_chars.push_back(all_tokens.standalone_symbols.NULL_MACRO);
    
    return all_chars;
❱

◀private: static▶ void ☀Find_Duplicates(std::vector<wchar_t> const& vecOfElements, std::map<wchar_t, int> & countMap) ❰

    // Iterate over the vector and store the frequency of each element in map
    for (auto & elem : vecOfElements)
    {
        auto result = countMap.insert(std::pair<wchar_t, int>(elem, 1));
        if (result.second == false)
            result.first->second++;
    }
 
    // Remove the elements from Map which has 1 frequency count
    for (auto it = countMap.begin() ; it != countMap.end() ;)
    {
        if (it->second == 1)
            it = countMap.erase(it);
        else
            it++;
    }
    std::cout << countMap.size() << std::endl;
❱


//printing
◀private: static▶ void ☀Print_Duplicates(All_Language_Tokens const& all_tokens) ❰
    auto all_chars = Get_All_UniLang_Token_Characters(all_tokens);
    Print_Duplicates(all_chars);
❱

◀private: static▶ void ☀Print_Duplicates(std::vector<wchar_t> const& vec) ❰

    std::map<wchar_t, int> duplicateElements;
    Find_Duplicates(vec, duplicateElements);

    for (auto & elem : duplicateElements)
        std::cout << static_cast<int>(elem.first) << " :: " << elem.second << std::endl;
❱
