class
❪"all_ast_markers"❫
⚯
⚞⚟
◀public: static▶ All_Ast_Markers ☀Get() ❰


All_Ast_Markers all;

all.root       = Get_Root();
all.body_root  = Get_Body_Root();
all.entire_body = Get_Entire_Body();

return all;
❱

◀private: static▶ Ast_Markers ☀Get_Root() ❰

Ast_Markers root;
root.groups.name = "token group";
root.leaves.name = "token name";
    
    //meta
    root.groups.values.emplace_back("meta");
    root.groups.values.emplace_back("meta subgroup");
    root.groups.values.emplace_back("meta specification file");
    root.groups.values.emplace_back("meta forseeable change");
    
    //citations
    root.groups.values.emplace_back("citations");
    root.groups.values.emplace_back("citation_attributes");
    
    //literature
    root.groups.values.emplace_back("literature");
    root.groups.values.emplace_back("literature outline point");
    root.groups.values.emplace_back("literature thought connection");
    root.groups.values.emplace_back("literature sentence");
    root.groups.values.emplace_back("literature sentence tag");
    root.groups.values.emplace_back("literature sentence image");
    root.groups.values.emplace_back("literature sentence code");
    root.groups.values.emplace_back("literature sentence table");
    root.groups.values.emplace_back("literature sentence table header");
    root.groups.values.emplace_back("literature sentence table row");

    //types
    root.groups.values.emplace_back("types");
    
    //build related (yeah, it seeps in)
    root.groups.values.emplace_back("library");
    root.groups.values.emplace_back("copts");
    root.groups.values.emplace_back("linkopts");

    //import
    root.groups.values.emplace_back("import interface");
    root.groups.values.emplace_back("import implementation");
    root.groups.values.emplace_back("import test");
    root.groups.values.emplace_back("import interface relationship");
    root.groups.values.emplace_back("import implementation relationship");
    root.groups.values.emplace_back("import test relationship");

    //namespace
    root.groups.values.emplace_back("namespace");

    //inheritance
    root.groups.values.emplace_back("inheritance");

	//templated class
    root.groups.values.emplace_back("object template argument");
    root.groups.values.emplace_back("object template argument concepts");

    //function
    root.groups.values.emplace_back("function");
    root.groups.values.emplace_back("function alternative expression name");
    root.groups.values.emplace_back("function precondition");
    root.groups.values.emplace_back("function postcondition");
    root.groups.values.emplace_back("function stamp");
    root.groups.values.emplace_back("function stamp value");
    root.groups.values.emplace_back("function template argument");
    root.groups.values.emplace_back("function template argument concepts");
    root.groups.values.emplace_back("function argument");
    root.groups.values.emplace_back("function argument scope");
	root.groups.values.emplace_back("function argument type specializations");
    root.groups.values.emplace_back("function argument type specializations scope");
    root.groups.values.emplace_back("function argument type module dependencies");
    root.groups.values.emplace_back("function argument type library dependencies");
    root.groups.values.emplace_back("function result");
    root.groups.values.emplace_back("function result scope");
	root.groups.values.emplace_back("function result type specializations");
    root.groups.values.emplace_back("function result type specializations scope");
    root.groups.values.emplace_back("function result type module dependencies");
    root.groups.values.emplace_back("function result type library dependencies");
    root.groups.values.emplace_back("function except");
    root.groups.values.emplace_back("function body");
    
    //test cases
    root.groups.values.emplace_back("function test case");
    root.groups.values.emplace_back("function test case reason for failing");
    
    //benchmarks
    root.groups.values.emplace_back("function benchmark");
    root.groups.values.emplace_back("function benchmark arg");
    

    //typedef
    root.groups.values.emplace_back("typedef");
    root.groups.values.emplace_back("typedef argument");
    root.groups.values.emplace_back("typedef result");

    //forward declare
    root.groups.values.emplace_back("forward declare");

    //data
    root.groups.values.emplace_back("data member");
    root.groups.values.emplace_back("data member scope");
    root.groups.values.emplace_back("data member type module dependencies");
    root.groups.values.emplace_back("data member type library dependencies");

    root.groups.values.emplace_back("data member type specializations");
    root.groups.values.emplace_back("data member type specializations scope");

    root.groups.values.emplace_back("data member key values");
    root.groups.values.emplace_back("data member value constraints");
    root.groups.values.emplace_back("data member value meaning");
    root.groups.values.emplace_back("data member value transition meaning");
    root.groups.values.emplace_back("parent types");
    root.groups.values.emplace_back("value deriving types");
    root.groups.values.emplace_back("indexes to identifier"); // the list of identifier's that the type can be used to index into

    //enum
    root.groups.values.emplace_back("enum");
    root.groups.values.emplace_back("enum subgroup");
    root.groups.values.emplace_back("enum arg");
    root.groups.values.emplace_back("enum group affiliation");


    //macro
    root.groups.values.emplace_back("macro");
    root.groups.values.emplace_back("macro argument");
    root.groups.values.emplace_back("macro value");

    //misc
    root.groups.values.emplace_back("other");
    root.groups.values.emplace_back("file wide invariant");
    
    //stand-alone tests
    root.groups.values.emplace_back("test case");


//meta
root.leaves.values.emplace_back("meta data code type");
root.leaves.values.emplace_back("meta data brief description");
root.leaves.values.emplace_back("meta data detailed description");
root.leaves.values.emplace_back("meta data group name");
root.leaves.values.emplace_back("meta subgroup name");
root.leaves.values.emplace_back("meta subgroup description");
root.leaves.values.emplace_back("meta data author");
root.leaves.values.emplace_back("meta data bug");
root.leaves.values.emplace_back("meta data warning");
root.leaves.values.emplace_back("meta data depreciation");
root.leaves.values.emplace_back("meta specification file path");
root.leaves.values.emplace_back("meta specification file description");
root.leaves.values.emplace_back("meta forseeable change");
root.leaves.values.emplace_back("meta forseeable change reason");
root.leaves.values.emplace_back("meta forseeable reason percentage");

//citations
root.leaves.values.emplace_back("citation type");
root.leaves.values.emplace_back("citation id");
root.leaves.values.emplace_back("citation key");
root.leaves.values.emplace_back("citation value");

root.leaves.values.emplace_back("library");
root.leaves.values.emplace_back("copts");
root.leaves.values.emplace_back("linkopts");

//literature
root.leaves.values.emplace_back("literary depth");
root.leaves.values.emplace_back("literary title");
root.leaves.values.emplace_back("literary outline point");
root.leaves.values.emplace_back("literary thought connection from");
root.leaves.values.emplace_back("literary thought connection edge");
root.leaves.values.emplace_back("literary thought connection to");
root.leaves.values.emplace_back("literary sentence name");
root.leaves.values.emplace_back("literary sentence properties");
root.leaves.values.emplace_back("literary sentence");
root.leaves.values.emplace_back("literary sentence author note");

root.leaves.values.emplace_back("literary sentence tag");

root.leaves.values.emplace_back("literary sentence code line");

root.leaves.values.emplace_back("literary image path");
root.leaves.values.emplace_back("literary image alternative text");
root.leaves.values.emplace_back("literary image hover text");
root.leaves.values.emplace_back("literary image width");
root.leaves.values.emplace_back("literary image height");


root.leaves.values.emplace_back("literary sentence table title");
root.leaves.values.emplace_back("literary sentence table header");
root.leaves.values.emplace_back("literary sentence table row");

//types
root.leaves.values.emplace_back("type brief description");
root.leaves.values.emplace_back("type detailed description");
root.leaves.values.emplace_back("type name");

//imports
root.leaves.values.emplace_back("import interface name");
root.leaves.values.emplace_back("import interface specifiers");
root.leaves.values.emplace_back("import interface comment");
root.leaves.values.emplace_back("import interface relationship");
root.leaves.values.emplace_back("import interface related");
root.leaves.values.emplace_back("import implementation name");
root.leaves.values.emplace_back("import implementation specifiers");
root.leaves.values.emplace_back("import implementation comment");
root.leaves.values.emplace_back("import implementation relationship");
root.leaves.values.emplace_back("import implementation related");
root.leaves.values.emplace_back("import test name");
root.leaves.values.emplace_back("import test specifiers");
root.leaves.values.emplace_back("import test comment");
root.leaves.values.emplace_back("import test relationship");
root.leaves.values.emplace_back("import test related");

//namespaces
root.leaves.values.emplace_back("namespace specifiers");
root.leaves.values.emplace_back("namespace name");

//inheritance
root.leaves.values.emplace_back("inheritance specifiers");
root.leaves.values.emplace_back("inheritance type");

root.leaves.values.emplace_back("object template argument qualifiers");
root.leaves.values.emplace_back("object template argument type");
root.leaves.values.emplace_back("object template argument type concepts");
root.leaves.values.emplace_back("object template argument identifier");
root.leaves.values.emplace_back("object template argument default");
root.leaves.values.emplace_back("object template argument units");
root.leaves.values.emplace_back("object template argument comment");

//function
root.leaves.values.emplace_back("function class specifiers");
root.leaves.values.emplace_back("function subgroup name");
root.leaves.values.emplace_back("function name");
root.leaves.values.emplace_back("function unique mangle name");
root.leaves.values.emplace_back("function alternative expression name");
root.leaves.values.emplace_back("function precondition");
root.leaves.values.emplace_back("function precondition comment");
root.leaves.values.emplace_back("function postcondition");
root.leaves.values.emplace_back("function postcondition comment");
root.leaves.values.emplace_back("function brief description");
root.leaves.values.emplace_back("function detailed description");

root.leaves.values.emplace_back("function stamp name");
root.leaves.values.emplace_back("function stamp value");

root.leaves.values.emplace_back("function template argument qualifiers");
root.leaves.values.emplace_back("function template argument type");
root.leaves.values.emplace_back("function template argument type concepts");
root.leaves.values.emplace_back("function template argument identifier");
root.leaves.values.emplace_back("function template argument default");
root.leaves.values.emplace_back("function template argument units");
root.leaves.values.emplace_back("function template argument comment");

root.leaves.values.emplace_back("function argument type qualifiers");
root.leaves.values.emplace_back("function argument type");
root.leaves.values.emplace_back("function argument type scope");
root.leaves.values.emplace_back("function argument type specializations");
root.leaves.values.emplace_back("function argument type specializations scope");
root.leaves.values.emplace_back("function argument type module dependencies");
root.leaves.values.emplace_back("function argument type library dependencies");
root.leaves.values.emplace_back("function argument identifier");
root.leaves.values.emplace_back("function argument units");
root.leaves.values.emplace_back("function argument default");
root.leaves.values.emplace_back("function argument comment");
root.leaves.values.emplace_back("function result type qualifiers");
root.leaves.values.emplace_back("function result type");
root.leaves.values.emplace_back("function result type scope");
root.leaves.values.emplace_back("function result type specializations");
root.leaves.values.emplace_back("function result type specializations scope");
root.leaves.values.emplace_back("function result type module dependencies");
root.leaves.values.emplace_back("function result type library dependencies");
root.leaves.values.emplace_back("function result identifier");
root.leaves.values.emplace_back("function result units");
root.leaves.values.emplace_back("function result default");
root.leaves.values.emplace_back("function result comment");
root.leaves.values.emplace_back("except expression");
root.leaves.values.emplace_back("except comment");
root.leaves.values.emplace_back("function body");
root.leaves.values.emplace_back("function body comment");

//function tests
root.leaves.values.emplace_back("function test case name");
root.leaves.values.emplace_back("function test case tag");
root.leaves.values.emplace_back("function test case reason for testing");
root.leaves.values.emplace_back("function test case reason for failing");
root.leaves.values.emplace_back("function test case body");

//function benchmarks
root.leaves.values.emplace_back("function benchmark case name");
root.leaves.values.emplace_back("function benchmark case tag");
root.leaves.values.emplace_back("function benchmark case setup");
root.leaves.values.emplace_back("function benchmark case action");
root.leaves.values.emplace_back("function benchmark argument name");
root.leaves.values.emplace_back("function benchmark argument low");
root.leaves.values.emplace_back("function benchmark argument high");
root.leaves.values.emplace_back("function benchmark argument multiplier");


//typedef
root.leaves.values.emplace_back("typedef specifiers");
root.leaves.values.emplace_back("typedef brief description");
root.leaves.values.emplace_back("typedef detailed description");
root.leaves.values.emplace_back("typedef name");
root.leaves.values.emplace_back("typedef return");
root.leaves.values.emplace_back("typedef return comment");
root.leaves.values.emplace_back("typedef argument");
root.leaves.values.emplace_back("typedef argument comment");

//forward declare
root.leaves.values.emplace_back("forward declare argument");
  

//data
root.leaves.values.emplace_back("data member class specifiers");
root.leaves.values.emplace_back("data member type qualifiers");
root.leaves.values.emplace_back("data member type");
root.leaves.values.emplace_back("data member type specializations");
root.leaves.values.emplace_back("data member type module dependencies");
root.leaves.values.emplace_back("data member type library dependencies");
root.leaves.values.emplace_back("data member identifier");
root.leaves.values.emplace_back("data member default value");
root.leaves.values.emplace_back("data member units");
root.leaves.values.emplace_back("data member brief");
root.leaves.values.emplace_back("data member detailed");
root.leaves.values.emplace_back("data member partial pack amount");

    //sub pairs

    //any key: value pair you want.
    //think of it as a generic way to generically add columns and values to a set table of data members
    //usually you would share a key name across data members.
    root.leaves.values.emplace_back("data member pair key");
    root.leaves.values.emplace_back("data member pair value");

    //the following condition must hold.  The value must be operation value  (ex: >= 0)
    root.leaves.values.emplace_back("data member constraint operation");  //the operation could be a function call also
    root.leaves.values.emplace_back("data member constraint value");
    root.leaves.values.emplace_back("data member broken constraint meaning");
    root.leaves.values.emplace_back("data member constraint display theme");

    root.leaves.values.emplace_back("data member defined value operation");
    root.leaves.values.emplace_back("data member defined value");             //when a data member has __ value
    root.leaves.values.emplace_back("data member defined value meaning");     //it means the following: __
    root.leaves.values.emplace_back("data member defined value display theme");

    //when a data member is true in regards to:
    root.leaves.values.emplace_back("data member transition before operation");
    root.leaves.values.emplace_back("data member transition before value");

    //and transitions to be true in regards to:
    root.leaves.values.emplace_back("data member transition after operation");
    root.leaves.values.emplace_back("data member transition after value");

    //we describe the transition as:
    root.leaves.values.emplace_back("data member transition meaning");

    //display theme for transition:
    root.leaves.values.emplace_back("data member transition display theme");

    //maybe rate changes?
    //+/- two different values?  hmm...
    //a lambda function called the update invariant would be nice

    root.leaves.values.emplace_back("data member parent type");
    root.leaves.values.emplace_back("data member value deriving type");

    root.leaves.values.emplace_back("data member scope");
    root.leaves.values.emplace_back("data member type specializations scope");

    root.leaves.values.emplace_back("indexes to identifier");


//enum
root.leaves.values.emplace_back("enum name");
root.leaves.values.emplace_back("enum brief");
root.leaves.values.emplace_back("enum detail");
root.leaves.values.emplace_back("enum specifiers");
root.leaves.values.emplace_back("enum base type");
root.leaves.values.emplace_back("enum subgroup name");
root.leaves.values.emplace_back("enum subgroup description");
root.leaves.values.emplace_back("enum arg name");
root.leaves.values.emplace_back("enum arg value");
root.leaves.values.emplace_back("enum arg comment");
root.leaves.values.emplace_back("enum arg group affiliation");

//macro
root.leaves.values.emplace_back("macro name");
root.leaves.values.emplace_back("macro units");
root.leaves.values.emplace_back("macro argument identifier");
root.leaves.values.emplace_back("macro argument comment");
root.leaves.values.emplace_back("macro brief");
root.leaves.values.emplace_back("macro detail");
root.leaves.values.emplace_back("macro specifiers");
root.leaves.values.emplace_back("macro value");

//miscellaneous
root.leaves.values.emplace_back("run shell command");
root.leaves.values.emplace_back("file wide invariant comment");
root.leaves.values.emplace_back("file wide invariant");

//stand-alone tests
root.leaves.values.emplace_back("test case name");
root.leaves.values.emplace_back("test case tag");
root.leaves.values.emplace_back("test case body");


return root;
❱

//TODO: depreciate
◀private: static▶ Ast_Markers ☀Get_Body_Root() ❰
    Ast_Markers body_root;
    body_root.groups.name = "body token group";
    body_root.leaves.name = "body token name";


    //TODO: depreciate
    body_root.groups.values.emplace_back("method body");
    body_root.groups.values.emplace_back("comment");
    body_root.groups.values.emplace_back("statement");
    body_root.groups.values.emplace_back("body parameter");
    body_root.groups.values.emplace_back("self data member");
	body_root.groups.values.emplace_back("self data member without obj");
    body_root.groups.values.emplace_back("local data member");
    body_root.groups.values.emplace_back("sub member");
    body_root.groups.values.emplace_back("self function call");
    body_root.groups.values.emplace_back("foreign function call");
    body_root.groups.values.emplace_back("return");
    
    //TODO: depreciate
    body_root.leaves.values.emplace_back("method body");
    body_root.leaves.values.emplace_back("comment");
    body_root.leaves.values.emplace_back("statement");
    body_root.leaves.values.emplace_back("body parameter");
    body_root.leaves.values.emplace_back("self data member");
	body_root.leaves.values.emplace_back("self data member without obj");
    body_root.leaves.values.emplace_back("local data member");
    body_root.leaves.values.emplace_back("sub member");
    body_root.leaves.values.emplace_back("self function call");
    body_root.leaves.values.emplace_back("foreign function call");
    body_root.leaves.values.emplace_back("return");
    body_root.leaves.values.emplace_back("regular");
    
    //reshaping for new parser
    body_root.leaves.values.emplace_back("regular comment");
    body_root.leaves.values.emplace_back("todo comment");
    body_root.leaves.values.emplace_back("warning comment");
    
    body_root.leaves.values.emplace_back("regular statement");
    body_root.leaves.values.emplace_back("return statement");
    body_root.leaves.values.emplace_back("uncaught statement");

    return body_root;
❱
◀private: static▶ Ast_Markers ☀Get_Entire_Body() ❰
    Ast_Markers markers;
    
    return markers;
❱