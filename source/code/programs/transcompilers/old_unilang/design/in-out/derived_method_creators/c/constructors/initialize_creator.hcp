class


⚯
❪"code/utilities/types/converters/lib"❫
❪"code/utilities/types/strings/transformers/casing/lib"❫
❪"code/utilities/types/general/lib"❫
⚞⚟


◀public: static▶ Method_Item ☀Create(Structure const& structure, bool dumb_way)❰

    //build up fake params
    Method_Item m;
    
    m.class_access = Class_Access::PUBLIC;
    m.overload_specifiers.value = Value_Overload::NONE;
    m.storage = Storage_Specifier::NONE;
    m.overload_specifiers.is_const = false;
    m.names.function_name.value = L"initialize " + as_wstring(As_Capital_And_Pushed_Together(structure.name));
    m.brief_description.value = L"Sets the initial state of " + as_wstring(As_Capital_And_Pushed_Together(structure.name));
    m.subgroup.value = L"memory management";
    
    if (dumb_way){
        m.detailed_description.value = L"Before the output can be used and updated, it must first be initialized to a valid state.";
    }
    else{
        m.detailed_description.value = L"Constructs the component to a valid initial state";
    }
    
    //set expected params
    Function_Argument one = Decide_Implicit_Object_Parameter(structure,dumb_way);
    
    m.function_arguments.push_back(one);
    
    Add_Constructor_Params(structure.name,m.function_arguments,structure.methods.methods);
    Add_Body(structure.name,m,structure.methods.methods);
    
    m.contracts += Implicit_Contract_Adder::Get_Implicit_Contracts_For_Initializer_Method(as_string(one.identifier.value));
    
    return m;
❱

◀private: static▶ void ☀Add_Constructor_Params(std::string file_name, std::vector<Function_Argument> & args, std::vector<Method_Item> const& methods)❰

    auto constructor = Get_Constructor(file_name,methods);
    args += constructor.function_arguments;
❱
◀private: static▶ void ☀Add_Body(std::string file_name, Method_Item & m, std::vector<Method_Item> const& methods)❰

    auto constructor = Get_Constructor(file_name,methods);
    m.body = constructor.body;
❱

◀private: static▶ Method_Item ☀Get_Constructor(std::string file_name, std::vector<Method_Item> const& methods)❰

    for (auto it: methods){
        if (Shared_Printer::Is_Constructor_But_Not_Copy_Constructor(file_name,it)){
          return it;
        }
    }
    return Method_Item{};
❱

◀private: static▶ Function_Argument ☀Decide_Implicit_Object_Parameter(Structure const& structure, bool dumb_way)❰

    Function_Argument one;
    one.is_mutable = true;
    one.is_reference = true;
    
    one.type.value = Object_Name_Resolver::Resolve_Type_Name(structure,dumb_way);
    one.identifier.value = Object_Name_Resolver::Resolve_Identifier_Name(structure,dumb_way);
    
    one.comment.value = L"Represents the internal state of the object.\nThe internal state of the object, will be initialized\nbased on the input parameters and any pre-defined state decisions";
    
    return one;
❱
