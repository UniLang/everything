class


⚯
❪"code/utilities/types/converters/lib"❫
❪"code/utilities/types/general/lib"❫
❪"code/utilities/program/common_actions/exits/lib"❫
⚞⚟

◀public: static▶ void ☀Print_Interface_According_To_Sorting_And_Grouping_Settings(std::wofstream & out, Method_Section const& section, Structure const& structure, C_Export_Settings const& options)❰

  //print all of the interface declarations.
  //this would be any function that is public.
  //first we filter out the methods.
  auto public_methods = Shared_Printer::Filter_By_Public_Methods(structure.name,section.methods);
  
  //public decls
  Sort_And_Print_Interfaces(out,structure,public_methods,options);
  
❱

◀public: static▶ void ☀Print_Implementation_According_To_Sorting_And_Grouping_Settings(std::wofstream & out, Method_Section const& section, Structure const& structure, C_Export_Settings const& options)❰

  //get methods in filtered groups
  auto public_methods = Shared_Printer::Filter_By_Public_Methods(structure.name,section.methods);
  auto private_methods = Shared_Printer::Filter_By_Private_Methods(structure.name,section.methods);
  
  //private decls
  //Sort_And_Print_Interfaces(out,structure,private_methods,options);

  //defs
  Sort_And_Print_Implementations_just_decl(out,structure,public_methods,options);
  Sort_And_Print_Implementations_just_decl(out,structure,private_methods,options);
  Sort_And_Print_Implementations_just_impl(out,structure,public_methods,options);
  Sort_And_Print_Implementations_just_impl(out,structure,private_methods,options);
    
❱

◀private: static▶ void ☀Sort_And_Print_Interfaces(std::wofstream & out, Structure const& structure, std::vector<Method_Item> methods, C_Export_Settings const& options)❰
  
  //sort and print
  auto sorted_methods = Method_Sorter::Get_As_Sorted(methods,options.portion.method_options.sorting.interface);
  for (auto group: sorted_methods.subgroups){
     Print_Interfaces(out,group,structure,methods,options);
  }
  
❱

◀private: static▶ void ☀Sort_And_Print_Implementations_just_decl(std::wofstream & out, Structure const& structure, std::vector<Method_Item> methods, C_Export_Settings const& options)❰
  
  //sort and print
  auto sorted_methods = Method_Sorter::Get_As_Sorted(methods,options.portion.method_options.sorting.implementation);
  //for (auto group: sorted_methods.subgroups){
  //  Print_Implementations(out,group,structure,methods,options);
  //}
  
  
  for (auto group: sorted_methods.subgroups){
     if (Methods_Printer::Print_Global_Implementation_DECL_ONLY_Methods2_is_any(out,structure.full_file_path,group.methods,structure.data_members.data_members,options,Object_Export_Method::NORMAL)){
       Subgroup_Tag_Printer::Possibly_Print_Start(out,group.subgroup,options.portion.method_options.sorting.interface.tag);
       Methods_Printer::Print_Global_Implementation_DECL_ONLY_Methods2(out,structure.full_file_path,group.methods,structure.data_members.data_members,options,Object_Export_Method::NORMAL);
       Subgroup_Tag_Printer::Possibly_Print_End(out,group.subgroup,options.portion.method_options.sorting.interface.tag);
     }
  }
  
❱

◀private: static▶ void ☀Sort_And_Print_Implementations_just_impl(std::wofstream & out, Structure const& structure, std::vector<Method_Item> methods, C_Export_Settings const& options)❰
  
  //sort and print
  auto sorted_methods = Method_Sorter::Get_As_Sorted(methods,options.portion.method_options.sorting.implementation);
  //for (auto group: sorted_methods.subgroups){
  //  Print_Implementations(out,group,structure,methods,options);
  //}
  
  
  for (auto group: sorted_methods.subgroups){
     if (Methods_Printer::Print_Global_Implementation_IMPL_ONLY_Methods2_is_any(out,structure.full_file_path,group.methods,structure.data_members.data_members,options,Object_Export_Method::NORMAL)){
       Subgroup_Tag_Printer::Possibly_Print_Start(out,group.subgroup,options.portion.method_options.sorting.interface.tag);
       Methods_Printer::Print_Global_Implementation_IMPL_ONLY_Methods2(out,structure.full_file_path,group.methods,structure.methods.methods,structure.data_members.data_members,options,Object_Export_Method::NORMAL);
       Subgroup_Tag_Printer::Possibly_Print_End(out,group.subgroup,options.portion.method_options.sorting.interface.tag);
     }
  }
  
❱

◀private: static▶ void ☀Print_Interfaces(std::wofstream & out, Subgroup_Methods const& group, Structure const& structure, std::vector<Method_Item> methods, C_Export_Settings const& options)❰
    
    //possible start tag
    Subgroup_Tag_Printer::Possibly_Print_Start(out,group.subgroup,options.portion.method_options.sorting.interface.tag);
    
    //print each of the methods
    Methods_Printer::Print_Global_Interface_Methods2(out,structure.full_file_path,group.methods,options);
    
    //possible end tag
    Subgroup_Tag_Printer::Possibly_Print_End(out,group.subgroup,options.portion.method_options.sorting.interface.tag);
❱

