class


⚯
❪"code/utilities/types/converters/lib"❫
❪"code/utilities/filesystem/paths/lib"❫
⚞⚟

◀public: static▶ void ☀Create_Theme_File() ❰

    Set_Path(Shared::Sublime_Settings_Path());
    auto all_tokens = Get_Tokens::Get();
    Create_Path_If_It_Doesnt_Already_Exist(LANGUAGE_NAME);
    std::wofstream out(THEME_FILE);
    
    Shared::Print_DocType_Starter(out);
    out << "<dict><key>name</key><string>" << as_wstring(LANGUAGE_NAME) << "</string><key>settings</key>" << '\n';

    out << "<array><dict><key>settings</key><dict>" << '\n';
    out << "<key>background</key><string>" << as_wstring(ENTIRE_THEME_BACKGROUND_COLOR) << "</string>" << '\n';
    out << "<key>caret</key><string>" << as_wstring(CARRET_COLOR) << "</string>" << '\n';
    out << "<key>foreground</key><string>" << as_wstring(ENTIRE_THEME_FOREGROUND_COLOR) << "</string>" << '\n';
    out << "<key>invisibles</key><string>" << as_wstring(INVISIBLE_COLORS) << "</string>" << '\n';
    out << "<key>lineHighlight</key><string>" << as_wstring(LINE_HIGHTLIGHT_COLOR) << "</string>" << '\n';
    out << "<key>selection</key><string>" << as_wstring(SELECTION_COLOR) << "</string>" << '\n';
    out << "</dict></dict>" << '\n';
    
    
    //file root tokens
    for(auto const& it: all_tokens.tokens){
        out << "<dict><key>name</key><string>" << as_wstring(as_string(it.name)) << "</string>\n";
        out << "<key>scope</key>     <string>" << as_wstring(as_string(it.name)) << "</string><key>settings</key><dict>\n";
        out << "<key>foreground</key><string>" << as_wstring(it.fg_color) << "</string>\n";
        out << "<key>background</key><string>" << as_wstring(it.bg_color) << "</string></dict></dict>\n\n";
    }
    
    //method/function root tokens
    for(auto const& it: all_tokens.body_tokens){
        out << "<dict><key>name</key><string>" << as_wstring(as_string(it.name)) << "</string>\n";
        out << "<key>scope</key>     <string>" << as_wstring(as_string(it.name)) << "</string><key>settings</key><dict>\n";
        out << "<key>foreground</key><string>" << as_wstring(it.fg_color) << "</string>\n";
        out << "<key>background</key><string>" << as_wstring(it.bg_color) << "</string></dict></dict>\n\n";
    }
    
    //UniLang macros
    out << "<dict><key>name</key><string>" << "TRUE_MACRO_IN_BODY" << "</string>\n";
    out << "<key>scope</key>     <string>" << "TRUE_MACRO_IN_BODY" << "</string><key>settings</key><dict>\n";
    out << "<key>foreground</key><string>" << "#2A662E" << "</string>\n";
    out << "<key>background</key><string>" << "#051726" << "</string></dict></dict>\n\n";
    
    out << "<dict><key>name</key><string>" << "FALSE_MACRO_IN_BODY" << "</string>\n";
    out << "<key>scope</key>     <string>" << "FALSE_MACRO_IN_BODY" << "</string><key>settings</key><dict>\n";
    out << "<key>foreground</key><string>" << "#662A45" << "</string>\n";
    out << "<key>background</key><string>" << "#051726" << "</string></dict></dict>\n\n";
    
    out << "<dict><key>name</key><string>" << "TRUE_MACRO" << "</string>\n";
    out << "<key>scope</key>     <string>" << "TRUE_MACRO" << "</string><key>settings</key><dict>\n";
    out << "<key>foreground</key><string>" << "#2A662E" << "</string>\n";
    out << "<key>background</key><string>" << "#000000" << "</string></dict></dict>\n\n";
    
    out << "<dict><key>name</key><string>" << "FALSE_MACRO" << "</string>\n";
    out << "<key>scope</key>     <string>" << "FALSE_MACRO" << "</string><key>settings</key><dict>\n";
    out << "<key>foreground</key><string>" << "#662A45" << "</string>\n";
    out << "<key>background</key><string>" << "#000000" << "</string></dict></dict>\n\n";
    
    
    out << "</array><key>uuid</key>" << '\n';
    out << "<string>" << as_wstring(THEME_UUID) << "</string>" << '\n';
    out << "<key>colorSpaceName</key>" << '\n';
    out << "<string>sRGB</string>" << '\n';
    out << "<key>semanticClass</key>" << '\n';
    out << "<string></string></dict></plist>" << '\n';
❱