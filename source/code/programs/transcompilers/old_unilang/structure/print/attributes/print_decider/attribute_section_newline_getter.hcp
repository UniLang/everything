class


❪"code/utilities/linguistics/computer/frontends/parts/method/attributes/specific/method/method_attribute_settings"❫
❪"code/utilities/linguistics/computer/frontends/parts/method/attributes/specific/argument/argument_attribute_settings"❫
⚯

⚞⚟

◀public: static▶  std::string ☀Possibly_Get_Newline_Before_Section(Method_Attribute_Settings const& placement, Function_Declaration_Location const& location, int const& section)❰
	if (Can_Be_Placed_Before(placement,location,section)){ return "\n";}
	return "";
❱
◀public: static▶  std::string ☀Possibly_Get_Newline_Before_Section(Argument_Attribute_Settings const& placement, Function_Declaration_Location const& location, int const& section)❰
	if (Can_Be_Placed_Before(placement,location,section)){ return "\n";}
	return "";
❱
◀public: static▶  std::string ☀Possibly_Get_Newline_After_Section(Method_Attribute_Settings const& placement, Function_Declaration_Location const& location, int const& section)❰
	if (Can_Be_Placed_After(placement,location,section)){ return "\n";}
	return "";
❱
◀public: static▶  std::string ☀Possibly_Get_Newline_After_Section(Argument_Attribute_Settings const& placement, Function_Declaration_Location const& location, int const& section)❰
	if (Can_Be_Placed_After(placement,location,section)){ return "\n";}
	return "";
❱

//testing for placement before
◀private: static▶  bool ☀Can_Be_Placed_Before(Method_Attribute_Settings const& placement, Function_Declaration_Location const& location, int const& section)❰
	if (location == Function_Declaration_Location::DECLARATION){
		switch (section){
			case 1: return placement.decl_newlines.before_section_1;
            case 2: return placement.decl_newlines.before_section_2;
            case 3: return placement.decl_newlines.before_section_3;
            case 4: return placement.decl_newlines.before_section_4;
            case 5: return placement.decl_newlines.before_section_5;
		}
	}
	else{
		switch (section){
			case 1: return placement.def_newlines.before_section_1;
            case 2: return placement.def_newlines.before_section_2;
            case 3: return placement.def_newlines.before_section_3;
            case 4: return placement.def_newlines.before_section_4;
            case 5: return placement.def_newlines.before_section_5;
		}
    }
	return false;
❱
◀private: static▶  bool ☀Can_Be_Placed_Before(Argument_Attribute_Settings const& placement, Function_Declaration_Location const& location, int const& section)❰
	if (location == Function_Declaration_Location::DECLARATION){
		switch (section){
			case 1: return placement.decl_newlines.before_section_1;
            case 2: return placement.decl_newlines.before_section_2;
            case 3: return placement.decl_newlines.before_section_3;
		}
	}
	else{
		switch (section){
			case 1: return placement.def_newlines.before_section_1;
            case 2: return placement.def_newlines.before_section_2;
            case 3: return placement.def_newlines.before_section_3;
		}
    }
	return false;
❱

//testing for placement after
◀private: static▶  bool ☀Can_Be_Placed_After(Method_Attribute_Settings const& placement, Function_Declaration_Location const& location, int const& section)❰
	if (location == Function_Declaration_Location::DECLARATION){
		switch (section){
			case 1: return placement.decl_newlines.after_section_1;
            case 2: return placement.decl_newlines.after_section_2;
            case 3: return placement.decl_newlines.after_section_3;
            case 4: return placement.decl_newlines.after_section_4;
            case 5: return placement.decl_newlines.after_section_5;
		}
	}
	else{
		switch (section){
			case 1: return placement.def_newlines.after_section_1;
            case 2: return placement.def_newlines.after_section_2;
            case 3: return placement.def_newlines.after_section_3;
            case 4: return placement.def_newlines.after_section_4;
            case 5: return placement.def_newlines.after_section_5;
		}
    }
	return false;
❱
◀private: static▶  bool ☀Can_Be_Placed_After(Argument_Attribute_Settings const& placement, Function_Declaration_Location const& location, int const& section)❰
	if (location == Function_Declaration_Location::DECLARATION){
		switch (section){
			case 1: return placement.decl_newlines.after_section_1;
            case 2: return placement.decl_newlines.after_section_2;
            case 3: return placement.decl_newlines.after_section_3;
		}
	}
	else{
		switch (section){
			case 1: return placement.def_newlines.after_section_1;
            case 2: return placement.def_newlines.after_section_2;
            case 3: return placement.def_newlines.after_section_3;
		}
    }
	return false;
❱