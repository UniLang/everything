class


❪"code/utilities/linguistics/computer/source_language"❫
⚯
❪"code/utilities/linguistics/computer/literals/getter/data/literal_suffix_settings"❫
❪"code/utilities/linguistics/computer/literals/getter/literal_suffix_getter"❫
❪"code/utilities/linguistics/computer/literals/adjuster/literal_adjuster"❫
❪"code/utilities/types/converters/lib"❫
❪"code/utilities/streams/filestreams/lib"❫
❪"code/utilities/linguistics/computer/types/default_initialize/default_initialize_getter"❫
⚞⚟




//loops to print out the vectors of data members
◀public: static▶ void ☀Print_Global_Decelerations(std::wofstream & out, std::vector<Data_Member_Item> const& data_members, C_Export_Settings const& options, Code_Type const& type)❰
    for (auto it: data_members){Print_A_Global_Deceleration(out,it,options,type);}
❱
◀public: static▶ void ☀Print_Global_Definitions(std::wofstream & out, std::vector<Data_Member_Item> const& data_members, C_Export_Settings const& options)❰
    for (auto it: data_members){Print_A_Global_Definition(out,it,options);}
❱







◀private: static▶ void ☀Print_A_Global_Deceleration(std::wofstream & out, Data_Member_Item const& it, C_Export_Settings const& options, Code_Type const& type)❰

    //handle global
    if(type == Code_Type::GLOBAL){
      Handle_Global_Decl(out,it,options,type);
    }

    //handle object
    else if(type == Code_Type::PRODUCT_TYPE){
      Handle_Object_Decl(out,it,options,type);
    }

❱

◀private: static▶ void ☀Handle_Global_Decl(std::wofstream & out, Data_Member_Item const& it, C_Export_Settings const& options, Code_Type const& type)❰

    //we only want to print the data member if it's public
    if (it.class_access == Class_Access::PUBLIC){
      Print_Header_Like_Deceleration(out,it,options,type);
    }
❱
◀private: static▶ void ☀Handle_Object_Decl(std::wofstream & out, Data_Member_Item const& it, C_Export_Settings const& options, Code_Type const& type)❰
    Print_Header_Like_Deceleration(out,it,options,type);
❱




◀private: static▶ void ☀Print_Header_Like_Deceleration(std::wofstream & out, Data_Member_Item const& it, C_Export_Settings const& options, Code_Type const& type)❰
    Print_Doxygen_Line(out,it,type,options);
    

    //print storage specifiers
    if (it.storage == Storage_Specifier::EXTERN){ Print_To_Stream(out,"extern "); }
    else if (it.storage == Storage_Specifier::STATIC){Print_To_Stream(out,"static ");}

    //print a shared portion of the data member
    //by shared, I mean that this printed code is the same for decelerations and definitions
    Print_Shared(out,it,options,type);
    
    //decide whether to print the default value
    if (type == Code_Type::GLOBAL){
      if (it.storage != Storage_Specifier::EXTERN){
          //print the '=value' portion
          Print_The_Default_Value(out,it,options);
      }
    }
  
    //print the semicolon part at the end
    Print_Semicolon_And_End_Of_Variable(out,it);
❱



◀private: static▶ void ☀Print_Doxygen_Line(std::wofstream & out, Data_Member_Item const& it, Code_Type const& type, C_Export_Settings const& options)❰
    
    //when there is a new doxygen line
    if(!it.brief.value.empty() || !it.detail.value.empty()){Print_To_Stream_With_Newline(out,"");}
    
    //print doxygen block on top
    if (type == Code_Type::GLOBAL){
      Doxygen_Block_Printer::Print_Doxygen_Member_Item_Comment(out,it,options,0);
    }else{
      Doxygen_Block_Printer::Print_Doxygen_Member_Item_Comment(out,it,options,4);
    }
❱


◀private: static▶ void ☀Print_A_Global_Definition(std::wofstream & out, Data_Member_Item const& it, C_Export_Settings const& options)❰


  //we only have a global definition if its public and extern
  //(a rarity in my opinion, and not something we should ever do)
  //however, we will probably need to put in a case for statics in actual classes
  if (it.class_access == Class_Access::PUBLIC){
    if (it.storage == Storage_Specifier::EXTERN){
      
      Print_Doxygen_Line(out,it,Code_Type::GLOBAL,options);
      
      //print a shared portion of the data member
      //by shared, I mean that this printed code is the same for decelerations and definitions
      Print_Shared(out,it,options,Code_Type::GLOBAL);
      
      //print the '=value' portion
      Print_The_Default_Value(out,it,options);
      
      //print the semicolon part at the end
      Print_Semicolon_And_End_Of_Variable(out,it);
    }
  }
  
  //if it's private we print the whole thing (it may be static or extern!)
  else if(it.class_access == Class_Access::PRIVATE){
    Print_Header_Like_Deceleration(out,it,options,Code_Type::GLOBAL);
  }
❱


◀private: static▶ void ☀Print_Shared(std::wofstream & out, Data_Member_Item const& it, C_Export_Settings const& options, Code_Type const& code_type)❰

    //print const qualifier
    if (it.is_const){Print_To_Stream(out,"const ");}
  
    //split potential array parts
    auto type       = as_string(it.type.value);
    
    auto real_language_type = Type_Name_Deriver::Derive_Name(it,Source_Language::CPP);
    
    //print the stripped type
    Print_To_Stream(out,"    ");
    Print_To_Stream(out,real_language_type);
    Print_To_Stream(out," ");
    Print_To_Stream(out,Decide_How_To_Print_After_Type_Specifier(it,options,code_type));

❱


◀public: static▶ std::string ☀Decide_How_To_Print_After_Type_Specifier(Data_Member_Item const& arg, C_Export_Settings const& options,Code_Type const& code_type)❰
   
   auto stripped_type_detail = Type_Qualifier_Stripper::Strip_To_Base_Unilang_Type(as_string(arg.type.value));
   
   
   //derive the right flags
   bool global_flag = false; 
   bool member_flag = true;
   if (code_type == Code_Type::GLOBAL){
    global_flag = true; 
    member_flag = false;
   }
   
   
   auto derived_name = Identifier_Name_Deriver::Derive_Name(arg,options,global_flag,member_flag);
   return Type_Qualifier_Dresser::Add_Qualifers_Back_To_Derived_Language_Data_Member_Type(stripped_type_detail, derived_name, options);
❱

◀private: static▶ std::string ☀Get_Identifier_Name(Data_Member_Item const& it,Code_Type const& code_type,C_Export_Settings const& options)❰
    std::string identifier_name;
    
    if (code_type == Code_Type::GLOBAL){
      identifier_name = Identifier_Name_Deriver::Derive_Name(it,options,true,false);
    }else{
      identifier_name = Identifier_Name_Deriver::Derive_Name(it,options,false,true);
    }
    
    return identifier_name;
❱

◀private: static▶ void ☀Print_The_Default_Value(std::wofstream & out, Data_Member_Item const& it,C_Export_Settings const& options)❰

    Print_To_Stream(out,Possibly_Get_Default_Value(it,Source_Language::CPP));
❱

◀private: static▶ std::string ☀Possibly_Get_Default_Value(Data_Member_Item const& it, Source_Language const& source_language)❰
    
    return Default_Initialize_Getter::Possibly_Get_Default_Value(it,source_language);
❱






◀private: static▶ void ☀Print_Semicolon_And_End_Of_Variable(std::wofstream & out, Data_Member_Item const& it)❰
            
  Print_To_Stream_With_Newline(out,";");
  //Print_To_Stream_With_Newline(out,"");

  //there may be some debate about whether we do another newline after the semicolon.  
  //there was a file filled with constants that didn't have any brief or detailed descriptions
  //and adding the newline between all of the decelerations/definitions between them looked weird.  
  //I've decided to optionally add a newline only if a doxygen comment is present.
  //That way, the doxygen commented variables don't look weird being pressed up each other,
  //and the non-commented variables don't look weird being spaced out.
  
  //print an extra line only if there is a brief or a detail available
  //basically, only print an extra newline if there is a doxygen comment.
  //if(!it.brief.value.empty() || !it.detail.value.empty()){
    //Print_To_Stream_With_Newline(out,"");
  //}
  
  //update: this can be addressed later, but for now, I don't care because I'm running clang-format after the export
  //I'm sure there are minor format problems throughout, but they are automatically fixed by clang-format
  
  //update 2:  the code should be moved where spacing/formating concerns are addressed after we have exactly the data we want
  
  //update 3: yeah, every once in awhile, after I make a few changes, this line gets messed in the diff.  
  //we should really, write some tests to make sure the output is correctly formatted before going through clang.  
  //this is subtle issue though.  I added an extra newline, and expect by whitespace line squeezer to handle any instances of 2+ empty lines.  
  //this solution seems fine, and I expect it will stay this way for a while.
❱

