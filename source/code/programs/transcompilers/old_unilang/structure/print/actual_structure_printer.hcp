class


❪"code/utilities/linguistics/computer/export_file_settings/export_file_settings"❫
⚯
❪"code/utilities/streams/filestreams/lib"❫
❪"code/utilities/types/converters/lib"❫
❪"code/utilities/types/general/lib"❫
⚞⚟





◀public: static▶ void ☀Write_To_File(std::wofstream & out, Export_File_Settings const& file_settings, Structure const& structure, C_Export_Settings const& options)❰

    Handle_Inlined_Structures(out,file_settings,structure,options);
    Print_Object_According_To_A_Certain_Export_Method(out,file_settings,structure,options);
❱

//recursive
◀public: static▶ void ☀Handle_Inlined_Structures(std::wofstream & out, Export_File_Settings const& file_settings, Structure const& structure, C_Export_Settings const& options)❰
    
    for (auto const& it: structure.inlined_structures.get().inlined_interfaces){
        Print_Object_According_To_A_Certain_Export_Method(out,file_settings,it,options);
    }
    for (auto const& it: structure.inlined_structures.get().inlined_implementations){
        Print_Object_According_To_A_Certain_Export_Method(out,file_settings,it,options);
    }
❱



◀private: static▶ void ☀Print_Object_According_To_A_Certain_Export_Method(std::wofstream & out, Export_File_Settings const& file_settings, Structure const& structure, C_Export_Settings const& options)❰
    switch (options.general.object_export_method){
        case Object_Export_Method::NORMAL:       Normal_Design_Printer::Print(out,file_settings,structure,options); break;
        case Object_Export_Method::INPUT_OUTPUT: In_Out_Design_Printer::Print(out,file_settings,structure,options); break;
    }
❱