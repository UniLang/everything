class


⚯
❪"code/utilities/streams/filestreams/lib"❫
❪"code/utilities/types/converters/lib"❫
❪"code/utilities/types/general/lib"❫
⚞⚟




◀public: static▶ std::string ☀Get_Cpp(std::string const& file_name, Method_Item const& method, C_Export_Settings const& options)❰

    std::string str;
    
    //either print the return type (if there is one), or print the return type based on the fact that there isn't one
    if (!method.return_results.empty()){str += Get_Non_Empty_Return_Type(method,options);}
    else{ str += Add_Cpp_No_Return_Type(file_name,method,options);}
    
    return str;
❱

◀public: static▶ std::string ☀Get_C(std::string const& file_name, Method_Item const& method, C_Export_Settings const& options)❰

    std::string str;
    
    //either print the return type (if there is one), or print the return type based on the fact that there isn't one
    if (!method.return_results.empty()){str += Get_Non_Empty_Return_Type(method,options);}
    else{ str += Add_C_No_Return_Type(options);}
    
    return str;
❱

◀public: static▶ std::string ☀Get_Java(std::string const& file_name, Method_Item const& method, Java_Settings const& options)❰

    std::string str;
    
    //either print the return type (if there is one), or print the return type based on the fact that there isn't one
    if (!method.return_results.empty()){str += Get_Non_Empty_Return_Type(method,options);}
    else{ str += Add_Java_No_Return_Type(file_name,method,options);}
    
    return str;
❱


//C++ version
◀private: static▶ std::string ☀Add_Cpp_No_Return_Type(std::string const& file_name, Method_Item const& method, C_Export_Settings const& options)❰
  std::string str;
  
  //print the type (unless its a constructor or destructor)
  if (!Shared_Printer::Is_Constructor_Or_Destructor(file_name,method)){
      str += Get_Void_Type(options) + " ";
  }
  
  return str;
❱

//C version
◀private: static▶ std::string ☀Add_C_No_Return_Type(C_Export_Settings const& options)❰
  std::string str;
  str += Get_Void_Type(options) + " ";
  return str;
❱
◀private: static▶ std::string ☀Add_Java_No_Return_Type(std::string const& file_name, Method_Item const& method, Java_Settings const& options)❰
  std::string str;
  
  if (!Shared_Printer::Is_Constructor_Or_Destructor(file_name,method)){
    str += "void ";
  }
  return str;
❱



//shared
◀private: static▶ std::string ☀Get_Void_Type(C_Export_Settings const& options)❰
  Function_Result result;
  result.type.value = as_wstring("void");
  auto real_type = Type_Name_Deriver::Derive_Name(result,Source_Language::CPP);
  return real_type;
❱

◀private: static▶ std::string ☀Get_Non_Empty_Return_Type(Method_Item const& method, C_Export_Settings const& options)❰
  std::string str;
  
  //maybe print const
  str += Get_Needed_Const_Qualifier(method);
  
  //get type and specifiers
  str += Get_Real_Type_With_Specifiers(method,options);
  
  return str;
❱

◀private: static▶ std::string ☀Get_Non_Empty_Return_Type(Method_Item const& method, Java_Settings const& options)❰
  std::string str;
  
  auto real_type = Type_Name_Deriver::Derive_Name(method.return_results[0],Source_Language::JAVA);
  str = real_type + " ";
  
  return str;
❱

◀private: static▶ std::string ☀Get_Needed_Const_Qualifier(Method_Item const& method)❰
  std::string str;
  
  if (!method.return_results[0].is_mutable){
      str = "const ";
  }
  
  return str;
❱

◀private: static▶ std::string ☀Get_Real_Type_With_Specifiers(Method_Item const& method, C_Export_Settings const& options)❰
  std::string str;

  //print the type
  auto real_type = Type_Name_Deriver::Derive_Name(method.return_results[0],Source_Language::CPP);
  
  str = real_type + " " + Decide_How_To_Print_After_Type_Specifier(method.return_results[0],options);
  
  return str;
❱

◀private: static▶ std::string ☀Decide_How_To_Print_After_Type_Specifier(Function_Result const& arg, C_Export_Settings const& options)❰
   
   auto stripped_type_detail = Type_Qualifier_Stripper::Strip_To_Base_Unilang_Type(as_string(arg.type.value),arg.is_reference);
   return Type_Qualifier_Dresser::Add_Qualifers_Back_To_Derived_Language_Result_Type(stripped_type_detail, options);
❱
