class


❪"code/utilities/types/strings/transformers/casing/case_modifier"❫
⚯
❪"code/utilities/types/char/lib"❫
❪"code/utilities/types/strings/transformers/search_replace/lib"❫
⚞⚟
◀public: static▶ std::string ☀Get(std::string name, std::string value, Macro_Options const& options)❰
  std::string statement = Get_Redefinition_Strategy(options.redefinition) + " ";
  statement += Get_Double_Quote();
  statement += options.redefinition.error_message_on_redefinition;
  statement += Get_Double_Quote();
  
  Mustache_Resolve(statement,name,value);
  return statement;
❱

◀private: static▶ std::string ☀Get_Redefinition_Strategy(Macro_Redefinition_Message_Settings const& options)❰
  std::string str;
  switch (options.redefinition_report_strategy){
    case Macro_Redefinition_Report_Strategy::ERROR:    str = options.ERROR_STR; break;
    case Macro_Redefinition_Report_Strategy::WARNING:  str = options.WARNING_STR; break;
    case Macro_Redefinition_Report_Strategy::MESSAGE:  str = options.MESSAGE_STR; break;
    case Macro_Redefinition_Report_Strategy::CUSTOM:   str = options.custom_report_strategy; break;
    default:;
  }
  return str;
❱

◀private: static▶ void ☀Mustache_Resolve(std::string & str, std::string name, std::string value)❰
  //poor man's mustache
  str = string_replace_all(str,"{{name}}",name);
  str = string_replace_all(str,"{{value}}",value);
❱
