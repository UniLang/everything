class

❪iostream❫
❪"code/utilities/linguistics/computer/types/cross/language_type/language_type"❫
❪"code/utilities/linguistics/computer/types/generic/unilang_type_to_language_type_converter"❫
⚯
❪"code/utilities/types/converters/lib"❫
⚞⚟


//TODO: get rid of all all C_Export_Settings arguments (should be language agnostic)
◀public: static▶ std::string ☀Derive_Name(Data_Member_Item const& data_member, Source_Language const& language)❰
    
    auto stripped_type_detail = Type_Qualifier_Stripper::Strip_To_Base_Unilang_Type(as_string(data_member.type.value),false);
    auto language_type = Unilang_Type_To_Language_Type_Converter::Convert_To_Language_Type(stripped_type_detail.base_type, language);
    auto final = Get_The_Printable_Language_Type_Without_Any_Of_The_Qualifers_Back_On(language_type,stripped_type_detail);
    Add_Scope(data_member,final);
    Add_Specialization(data_member,final);
    return final;
❱
◀public: static▶ std::string ☀Derive_Name(Function_Argument const& arg, Source_Language const& language)❰
    
    auto stripped_type_detail = Type_Qualifier_Stripper::Strip_To_Base_Unilang_Type(as_string(arg.type.value),arg.is_reference);
    auto language_type = Unilang_Type_To_Language_Type_Converter::Convert_To_Language_Type(stripped_type_detail.base_type, language);
    auto final = Get_The_Printable_Language_Type_Without_Any_Of_The_Qualifers_Back_On(language_type,stripped_type_detail);
    Add_Scope(arg,final);
    Add_Specialization(arg,final);
    Add_Optionality(arg.is_optional,final);
    return final;
❱
◀public: static▶ std::string ☀Derive_Name(Function_Result const& arg, Source_Language const& language)❰
    
    auto stripped_type_detail = Type_Qualifier_Stripper::Strip_To_Base_Unilang_Type(as_string(arg.type.value),arg.is_reference);
    auto language_type = Unilang_Type_To_Language_Type_Converter::Convert_To_Language_Type(stripped_type_detail.base_type, language);
    auto final = Get_The_Printable_Language_Type_Without_Any_Of_The_Qualifers_Back_On(language_type,stripped_type_detail);
    
    Add_Scope(arg,final);
    Add_Specialization(arg,final);
    Add_Optionality(arg.is_optional,final);
    return final;
❱

◀public: static▶ void ☀Add_Optionality(const bool is_optional, std::string & str)❰
    if (is_optional){
        str = "stdx::optional<" + str;
        str += ">";
    }
❱

◀public: static▶ void ☀Add_Scope(Data_Member_Item const& arg, std::string & str)❰
    str = Render(arg.scope_specifiers) + str;
❱
◀public: static▶ void ☀Add_Scope(Function_Result const& arg, std::string & str)❰
    str = Render(arg.scope_specifiers) + str;
❱
◀public: static▶ void ☀Add_Scope(Function_Argument const& arg, std::string & str)❰
    str = Render(arg.scope_specifiers) + str;
❱

◀private: static▶ std::string ☀Render(std::vector<Scope_Specifier> const& scope_specifiers)❰
    std::string scope;
    for (auto const& it: scope_specifiers){
            scope += as_string(it.name.value) + "::";
    }
    return scope;
❱


◀public: static▶ void ☀Add_Specialization(Data_Member_Item const& arg, std::string & str)❰
    str += Type_Specialize_Getter::Get(arg.type_specializations);
❱
◀public: static▶ void ☀Add_Specialization(Function_Result const& arg, std::string & str)❰
    str += Type_Specialize_Getter::Get(arg.type_specializations);
❱
◀public: static▶ void ☀Add_Specialization(Function_Argument const& arg, std::string & str)❰
    str += Type_Specialize_Getter::Get(arg.type_specializations);
❱



//typedef related
◀public: static▶ std::string ☀Derive_Name(Typedef_Argument const& arg, Source_Language const& language)❰
    
    auto stripped_type_detail = Type_Qualifier_Stripper::Strip_To_Base_Unilang_Type(as_string(arg.name.value),false);
    auto language_type = Unilang_Type_To_Language_Type_Converter::Convert_To_Language_Type(stripped_type_detail.base_type, language);
    auto final = Get_The_Printable_Language_Type_Without_Any_Of_The_Qualifers_Back_On(language_type,stripped_type_detail);
    return final;
❱
◀public: static▶ std::string ☀Derive_Name_Keep_Qualifiers(Typedef_Argument const& arg, Source_Language const& language)❰
    
    auto stripped_type_detail = Type_Qualifier_Stripper::Strip_To_Base_Unilang_Type(as_string(arg.name.value),false);
    auto language_type = Unilang_Type_To_Language_Type_Converter::Convert_To_Language_Type(stripped_type_detail.base_type, language);
    auto final = Get_The_Printable_Language_Type_With_Any_Of_The_Qualifers_Back_On(language_type,stripped_type_detail);
    return final;
❱

◀public: static▶ std::string ☀Derive_Name(Typedef_Result const& arg, Source_Language const& language)❰
    
    auto stripped_type_detail = Type_Qualifier_Stripper::Strip_To_Base_Unilang_Type(as_string(arg.name.value),false);
    auto language_type = Unilang_Type_To_Language_Type_Converter::Convert_To_Language_Type(stripped_type_detail.base_type, language);
    auto final = Get_The_Printable_Language_Type_Without_Any_Of_The_Qualifers_Back_On(language_type,stripped_type_detail);
    return final;
❱
◀public: static▶ std::string ☀Derive_Name_Keep_Qualifiers(Typedef_Result const& arg, Source_Language const& language)❰
    
    auto stripped_type_detail = Type_Qualifier_Stripper::Strip_To_Base_Unilang_Type(as_string(arg.name.value),false);
    auto language_type = Unilang_Type_To_Language_Type_Converter::Convert_To_Language_Type(stripped_type_detail.base_type, language);
    auto final = Get_The_Printable_Language_Type_With_Any_Of_The_Qualifers_Back_On(language_type,stripped_type_detail);
    return final;
❱



//I've got like a strip / unstrip thing going on.  Not too happy about it.  
//We could put these attributes into the structure, but that can sometimes lead to confusion since they are generated later after the parse. ..
//although we are already doing this for header qualities (was_generated for example)
◀public: static▶ std::string ☀Get_The_Printable_Language_Type_Without_Any_Of_The_Qualifers_Back_On(Language_Type language_type, Stripped_Unilang_Type_With_Qualifiers stripped_data)❰
    std::string printable_type = language_type.name;
    
    return printable_type;
❱
◀public: static▶ std::string ☀Get_The_Printable_Language_Type_With_Any_Of_The_Qualifers_Back_On(Language_Type language_type, Stripped_Unilang_Type_With_Qualifiers stripped_data)❰
    std::string printable_type = language_type.name;
    
    if (stripped_data.is_pointer){
        printable_type += " *";
        if (stripped_data.is_const_on_pointer){
            printable_type += "const";
        } 
    }
    
    //TODO array part...
    //this stuff needs re-factored anyway
    
    return printable_type;
❱
