class


❪"code/utilities/types/strings/transformers/casing/case_modifier"❫
⚯
❪"code/utilities/streams/filestreams/lib"❫
❪"code/utilities/types/converters/lib"❫
⚞⚟

//TODO: clean this mess up
◀public: static▶ void ☀Print_Interface(std::wofstream & out, std::vector<Forward_Declare_Item> const& typedefs, C_Export_Settings const& options)❰
    
    Add_Document_Block_If_There_Are_Foward_Declares(out,typedefs,options);
    
    for (auto it: typedefs){
        //if (it.access == Class_Access::PUBLIC){
            Print_Forward_Declare(out,it,options);
            Print_To_Stream_With_Newline(out,"");
       // }
    }
❱

◀public: static▶ void ☀Print_Implementation(std::wofstream & out, std::vector<Forward_Declare_Item> const& typedefs, C_Export_Settings const& options)❰
    
    /*
    Add_Document_Block_If_There_Are_Foward_Declares(out,typedefs,options);
    
    for (auto it: typedefs){
        if (it.access == Class_Access::PRIVATE){
            Print_Forward_Declare(out,it,options);
            Print_To_Stream_With_Newline(out,"");
        }
    }
    */
❱

◀public: static▶ void ☀Add_Document_Block_If_There_Are_Foward_Declares(std::wofstream & out, std::vector<Forward_Declare_Item> const& typedefs, C_Export_Settings const& options)❰
    if (!typedefs.empty()){Doxygen_Block_Printer::Print_Block(out,0,"Forward Declarations","Allows use of incomplete types",options);}
❱

◀private: static▶ void ☀Print_Forward_Declare(std::wofstream & out, Forward_Declare_Item const& item, C_Export_Settings const& options)❰
    auto printable = Get_Printable_Forward_Declare(item,options);
    Print_To_Stream(out,printable);
❱

◀private: static▶ std::string ☀Get_Printable_Forward_Declare(Forward_Declare_Item const& item, C_Export_Settings const& options)❰
    
    std::string print;
    
    print += "typedef " + Language_Type() + " " + Dumb_Name(as_string(item.name.value)) + " " + Real_Name(as_string(item.name.value)) + ";";
    
    
    return print;
❱


//deciding names
◀private: static▶ std::string ☀Language_Type()❰
    return "struct";
❱
◀private: static▶ std::string ☀Dumb_Name(std::string const& clean_name)❰
    return Struct_Name_Deriver::Get_Dumb_Struct_Type_Name(clean_name);
❱
◀private: static▶ std::string ☀Real_Name(std::string const& clean_name)❰
    return Struct_Name_Deriver::Get_Actual_Struct_Type_Name(clean_name);
❱
