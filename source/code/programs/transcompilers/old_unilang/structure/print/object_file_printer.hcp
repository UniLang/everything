class


❪"code/utilities/linguistics/computer/export_file_settings/export_file_settings"❫
⚯
❪"code/utilities/streams/filestreams/lib"❫
❪"code/utilities/types/converters/lib"❫
❪"code/utilities/types/general/lib"❫
⚞⚟


◀public: static▶ void ☀Print_Object_In_One_File(Structure const& structure, C_Export_Settings const& options)❰
    Print_Whole_Object_In_One_File(structure,options);
❱
◀public: static▶ void ☀Print_Object_In_Two_Files(Structure const& structure, C_Export_Settings const& options)❰
    Print_Object_Data_And_Interface_In_The_Same_File(structure,options);
    Print_Object_Implementation_File(structure,options);
❱
◀public: static▶ void ☀Print_Object_In_Three_Files(Structure const& structure, C_Export_Settings const& options)❰
    Print_Object_Interface_File(structure,options);
    Print_Object_Implementation_File(structure,options);
    Print_Object_Data_File(structure,options);
❱

◀private: static▶ void ☀Print_Whole_Object_In_One_File(Structure const& structure, C_Export_Settings const& options)❰
    
    //create file settings
    Export_File_Settings file_settings;
    file_settings.language = Source_Language::C;
    file_settings.code = Code_Type::PRODUCT_TYPE;
    file_settings.special = Special_File_Type::NORMAL;
    file_settings.file = File_Type::ALL;
    
    Create_File_Stream_And_Write_To_It(structure,options,file_settings);
❱
◀private: static▶ void ☀Print_Object_Data_And_Interface_In_The_Same_File(Structure const& structure, C_Export_Settings const& options)❰
    
    //create file settings
    Export_File_Settings file_settings;
    file_settings.language = Source_Language::C;
    file_settings.code = Code_Type::PRODUCT_TYPE;
    file_settings.special = Special_File_Type::NORMAL;
    file_settings.file = File_Type::DATA_AND_INTERFACE;
    
    Create_File_Stream_And_Write_To_It(structure,options,file_settings);
❱
◀private: static▶ void ☀Print_Object_Interface_File(Structure const& structure, C_Export_Settings const& options)❰
    
    //create file settings
    Export_File_Settings file_settings;
    file_settings.language = Source_Language::C;
    file_settings.code = Code_Type::PRODUCT_TYPE;
    file_settings.special = Special_File_Type::NORMAL;
    file_settings.file = File_Type::INTERFACE;
    
    Create_File_Stream_And_Write_To_It(structure,options,file_settings);
❱
◀private: static▶ void ☀Print_Object_Implementation_File(Structure const& structure, C_Export_Settings const& options)❰
    
    //create file settings
    Export_File_Settings file_settings;
    file_settings.language = Source_Language::C;
    file_settings.code = Code_Type::PRODUCT_TYPE;
    file_settings.special = Special_File_Type::NORMAL;
    file_settings.file = File_Type::IMPLEMENTATION;
    
    Create_File_Stream_And_Write_To_It(structure,options,file_settings);
❱
◀private: static▶ void ☀Print_Object_Data_File(Structure const& structure, C_Export_Settings const& options)❰
    
    //create file settings
    Export_File_Settings file_settings;
    file_settings.language = Source_Language::C;
    file_settings.code = Code_Type::PRODUCT_TYPE;
    file_settings.special = Special_File_Type::NORMAL;
    file_settings.file = File_Type::DATA;
    
    Create_File_Stream_And_Write_To_It(structure,options,file_settings);
❱
◀private: static▶ void ☀Create_File_Stream_And_Write_To_It(Structure const& structure, C_Export_Settings const& options, Export_File_Settings const& file_settings)❰
    auto out = Stream_Creator::Get_Stream(file_settings,structure,options.general.filesystem_naming);
    
    //create the final file name that the stream is set to
    auto final_file_name = File_Name_Getter::Get(file_settings,structure.name,options.general.filesystem_naming);
    
    Write_To_File(out,file_settings,structure,options,final_file_name);
❱


◀private: static▶ void ☀Write_To_File(std::wofstream & out, Export_File_Settings const& file_settings, Structure const& structure, C_Export_Settings const& options, std::string const& final_file_name)❰
    
    Boilerplate_Printer::Print_Begin(out,structure,file_settings,options,final_file_name);
    
    //prints inlined structs, and struct itself
    Actual_Structure_Printer::Write_To_File(out,file_settings,structure,options);
    
    Boilerplate_Printer::Print_End(out,structure,file_settings,options);
❱

