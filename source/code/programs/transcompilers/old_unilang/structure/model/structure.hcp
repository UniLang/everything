class
❪"boost/variant/recursive_wrapper"❫

//sections that make up the whole structure for a file of code

⚯

⚞⚟


◀public:


//FILENAME PATH STUFF:
//the file name(minus the extension) that this structure was derived from
std::string name;

//the full file path of the file.
//this is how we should uniquely identify code structures.
//(although hardlinks/symlinks may be an issue, we could possibly carry an inode later)
std::string full_file_path;

//interface and implementation structures that have been inlined into this structure
//1. inlined headers are removed and replaced with inlined structures
//2. inlined structures CANNOT be removed with data concatenated into the corresponding sections
//(because multiple structures can't be represented in a structure-- except through these inlines)
//*These inline structs may or may not be moved outside of this object.
//recursive wrapper used because we can't compose recursive incomplete types (not even with forward decelerations)
boost::recursive_wrapper<Inlined_Structures> inlined_structures;

//collection of data.  All of the sections that make up a code file
//I'd like to put this into a separate section called Structure_Sections eventually
//CODE SECTIONS:
Meta_Section meta;
Literature_Section literature;
Type_Section types;
Library_Section libraries;
Compile_Options compile_options;
Link_Options link_options;
Import_Section imports;
Namespace_Section namespaces;
Template_Section templates;
Inheritance_Section inheritance;
Macro_Section macros;
Enum_Section enums;
Method_Section methods;
Typedef_Section typedefs;
Forward_Declare_Section forwards;
Data_Member_Section data_members;

//the other function-like bodies, but they aren't a part of
//any specific method.  They are global, and can apply to any function(s).
Unit_Tests unit_tests;
Benchmarks benchmarks;

//utility functionality for structure:
//we compare uniqueness of a code structure based on what file it was derived from
friend bool operator< (Structure const& l, Structure const& r) { return l.full_file_path <  r.full_file_path; }
friend bool operator> (Structure const& l, Structure const& r) { return l.full_file_path >  r.full_file_path; }
friend bool operator!=(Structure const& l, Structure const& r) { return l.full_file_path != r.full_file_path; }
friend bool operator==(Structure const& l, Structure const& r) { return l.full_file_path == r.full_file_path; }

//we print a code structure based on the full path of the file that it was derived from
//this was done because I think boost will allow me to print it this way using some graphicvz print thing,
//and I think that function uses the overloaded insertion operator of the object.
//either way, it makes sense to have some functionality for this for now, even if it is to change later.
//update: turns out, boost graph prints vertex numbers and not the name of the actual objects...
friend std::ostream& operator<<(std::ostream& os, Structure const& s){
    os << s.full_file_path;
    return os;
}
▶

