class
❪"key_value_pair"❫
❪"value_constraints"❫
❪"value_meaning"❫
❪"data_member_reflection"❫
❪"parent_type"❫
❪"value_deriving_type"❫
❪"scope_specifier"❫
❪vector❫
⚯

⚞⚟

◀public:

//class specifiers:
Class_Access class_access = Class_Access::PUBLIC;

//type qualifiers:
bool is_const=false;
bool is_optional=false;
Storage_Specifier storage=Storage_Specifier::NONE;

//required basic:
Token_Value type;
std::vector<Scope_Specifier> scope_specifiers;
std::vector<Type_Specialization> type_specializations;
Token_Value name;

//units of measurement
Token_Value units;

//general descriptions of the data
Token_Value brief;
Token_Value detail;

//serialization related:
Token_Value version;

//entity relationships..
//database related concepts..
//hmm.. think about

//before I was making every file its own type...
//that worked ok from an OO approach, where objects were
//there own entities and such.  However, creating a lot of small types
//for a logical collection of data has proven to an effective way for building up data
//instead of having to do this with tons and tons of files and then dealing with all the imports
//and all the extra build rule junk, and file exporting, etc, we need a way to just put multiple
//types in the same file.  We have the file type token to decide if something is global or product type.
//if we choose product type, we get the same "use file name as type" strategy.  Instead we can also now
//chose global, and then add types with their own token.  THEN, data members themselves can accept 0 to many
//type names as tokens themselves.  This is interesting because where data belongs is now a property of the data,  
//not a property of where they are used.. if that makes sense.  Its this shift I'm making where it seems
//advantageous to attach AS MUCH INFORMATION AS POSSIBLE TO DATA.. even where that data exists.  
//Its also interesting to think about how this relates to inheritance.  People always say:
//"prefer composition over inheritance", but this token association seems a lot like inheritance, doesn't it.  
//except, we will most likely export it as composition.  But it raises the question.  We could probably export it
//through inheritance also.  Have we isolated the idea of composition vs inheritance and transcompiler configuration instead of
//and explicit data description from the programmer.  I hope so.
//Anyways, data members can associated to global type names in a global context.  This will allow us to export multiple types
//in the same file.  It might also cut down on some of the redundancy if the same data member needs to exist in multiple types
//with the same exact description.  I don't expect this to be the main selling point, but its possibly an unplanned benefit.
//I would go so far as to say, that before a transcompile even happens, every composed type should have its parent type marked.  
//So if the user didn't mark any of the types (even though its being exported as a product or sum type or something), then we will implicitly
//add the parent type to every data member in the file.
//A small note, in theory, every type could be in its own file, and we could get the kind of export that we want using unilang's inlined imports.  
//Its still annoying from a unilang developer's perspective.  Maybe one day when Unilang is graphical it won't make a difference at all..
//it might even be more advantageous to have them all in different files.  Either way, both options are available
std::vector<Parent_Type> parent_types;

//every type might come from a module dependency
//instead of having the user specify all module dependencies at the top of a file
//they only need to specify the dependencies on a data by data basis
//this will be better for when types move around across files / get deleted
//its a little easier to reason about whether deps are described properly when they are paired with the types.
//we might also be able to test these pairings in some way later.  
//so basically, we want to get to the point where users don't use import interface/implementation tokens.  
//they only use module dependencies on specific data members and those are used to derive the proper import tokens.
//Alex Andreski mentions this as probably a good idea
std::vector<Module_Dependency> module_dependencies;

//should library deps be tied to module deps instead?  
//or should they both be tied directly to the data member?  
//for now we'll do the data member, but I don't have strong reason for this choice.  
//I have theory that its better to be data-oriented and tie as much directly to the data as possible.
//On the other hand, shouldn't all libraries be derivable based on the includes alone?  
//I'm not sure if that's true or not, but it seems like it would be.
//Actually, thinking a little more about it.  If I had a group of headers,  
//I don't think one could actually derive the minimal correct bazel lib deps.
//You would have to trace transitive deps, and come up with more than necessary.  
//So I think it makes sense to have these tied directly to the data member and decoupled from the module deps.
std::vector<Library_Dependency> library_dependencies;

//sometimes data has redundant information.  
//information that can be derived trivially based on sibling data members
//other times we just want to know how the data is going to get initially populated
//if we shift to a functional-like style, where mostly all of the data is specified up front
//and remains immutable through the rest of the program, it should be plausible to explain where the
//data initially came from.  Another possible name could be "populated by entity" where entity could
//be another type or function or framework or program, etc.  A program should always be a function though.
std::vector<Value_Deriving_Type> value_deriving_types;


std::vector<Key_Value_Pair> comment_pair;

//value related
Token_Value default_value;
bool is_a_name_for_the_enveloping_type = false;
std::vector<Value_Constraints> value_constraints;
//TODO: value transition constraints
std::vector<Value_Meaning> value_meaning;
std::vector<Value_Transition_Meaning> value_transition_meaning;

//state specifiers:
bool is_observable=false;
bool is_injectable=false;
bool is_obtainable=false;

//reflection related:
Data_Member_Reflection reflection;
▶
