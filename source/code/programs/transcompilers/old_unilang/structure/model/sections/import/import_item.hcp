class
❪vector❫
❪"code/utilities/types/converters/lib"❫
⚯

⚞⚟

◀public:

//the name of the header
Token_Value name;

//whether or not the header is a system header or not
Import_Type type = Import_Type::LOCAL;

//whether the code should be inlined, and the header removed.
bool inlined = false;
//this should work whether:  
    //- objects are inlined in objects
    //- objects are inlined in global functions
    //- global functions are inlined in objects
    //- global functions are inlined in global functions
    // - the two ways that something can be inlined are:  
    // the public and privates are inlined into the public and privates (if header is included in the header)
    //the public and privates are inlined into the privates (if header is included in the source)

//a comment about the header
Token_Value comment;

//some can be derived, others may be specified by the user
std::vector<Import_Relationship> relationships;


//meta property that's nice to know.
//discovered after parsing; during the analysis of the struct
bool found_as_unilang_file = false;


//we compare uniqueness of a an import item based on the name
friend bool operator<(Import_Item const& l, Import_Item const& r) {
    return as_string(l.name.value) < as_string(r.name.value);
}
friend bool operator>(Import_Item const& l, Import_Item const& r) {
    return as_string(l.name.value) > as_string(r.name.value);
}
friend bool operator!=(Import_Item const& l, Import_Item const& r) {
    return as_string(l.name.value) != as_string(r.name.value);
}
friend bool operator==(Import_Item const& l, Import_Item const& r) {
    return as_string(l.name.value) == as_string(r.name.value);
}

▶
