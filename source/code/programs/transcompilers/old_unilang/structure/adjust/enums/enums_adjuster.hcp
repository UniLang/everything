class


⚯
⚞⚟

◀public: static▶ void ☀Adjust(Structure & structure, Struct_Manipulation_Settings const& settings)❰

    //possibly insert enum values on behalf of the user
	if (settings.enums.force_explicit_values){
		Force_Apply_Implicit_Enumeration_Values_For_All_Enums(structure.enums.enumerated_types,settings);
	}

    //possibly modify enum comments
    if (settings.enums.comment.force_adjust_comments){
		Force_Apply_Comment_Changes(structure.enums.enumerated_types,settings.enums);
	}
    
❱

◀private: static▶ void ☀Force_Apply_Comment_Changes(std::vector<Enum_Item> & items, Enum_Manipulation_Settings const& settings)❰
	for (auto & it: items){
        
        //comment adjust all of the enum related comments
		Comment_Adjuster::Adjust(it.brief,settings.comment.grammar,settings.comment.reflow);
        Comment_Adjuster::Adjust(it.detail,settings.comment.grammar,settings.comment.reflow);
        for (auto & arg: it.args){
            Comment_Adjuster::Adjust(arg.comment,settings.comment.grammar,settings.comment.reflow);
        }
	}
❱

◀private: static▶ void ☀Force_Apply_Implicit_Enumeration_Values_For_All_Enums(std::vector<Enum_Item> & items, Struct_Manipulation_Settings const& settings)❰
	for (auto & it: items){
		Force_Apply_Implicit_Enumeration_Values(it,settings);
	}
❱

◀private: static▶ void ☀Force_Apply_Implicit_Enumeration_Values(Enum_Item & item, Struct_Manipulation_Settings const& settings)❰
	
	//decide the strategy on how to enforce implicit values
	switch (settings.enums.strategy){
		case Enum_Explicit_Value_Strategy::STANDARD_INCREMENT:
		Enum_Standard_Incrementer::Make_Explicit(item);
		break;

       case Enum_Explicit_Value_Strategy::VALUE_INSERTER:
       Enum_Value_Inserter::Make_Explicit(item);
       break;
	}
❱