class

❪iostream❫
❪"code/utilities/linguistics/computer/source_language"❫
⚯
❪"structure_normalizer"❫
❪"module_dependency_resolver"❫
❪"code/utilities/types/strings/observers/converting/lib"❫
⚞⚟


◀public: static▶ void ☀Adjust(Structure & structure, Struct_Manipulation_Settings const& settings, Source_Language const& language)❰

    //TODO: settings
	bool normalize = true;
    bool try_to_populate_implicit_type_section = true;
    bool try_to_assign_implicit_parent_types_to_data_members = true;
	bool auto_version_missing_data_members = true;
	bool auto_version_types = true;
    bool resolve_module_deps = true;
    
    bool adjust_meta = true;
    bool adjust_types = true;
    bool adjust_enums = true;
    bool adjust_methods = true;
    bool adjust_imports = true;
    bool adjust_data_members = true;
    bool add_typedefs_for_unilang_type_usage = true;
    bool mock_yypes_that_are_already_referenced_as_outside_packages = true;

	//just tidy up the structure, and trim out unneeded whitespace.  
    //this is important so we don't run into dumb look-up issues later when analyzing the structure, and cross referencing things.
    //for example, some tokens should just never have whitespace padding.  
    //if we clean it up here, we won't have to worry about it though-out all the transcompilation code.
    //you might think, "well, the programmer shouldn't put whitespace in those tokens, and should just warn them when they do."  
    //normally I would agree, but this is not just a convenience for explicit typing of whitespace.  
    //if a programmer is using mustache stamping, its a lot less annoying having to handle the whitespace.
    //allowing empty stamps to possibly create whitespace padding in other tokens should be ok.
    //we can still customize whether we normalize, but hopefully that motivates a reason where we would want to.  
    //I still think it would be a good idea to warn about whitespace to help keep the Unilang Code cleaner.
    if (normalize){
		Structure_Normalizer::Normalize(structure);
	}

	//creating and tagging type information
	if (try_to_populate_implicit_type_section){
    	Populate_Implict_Type_Section_If_Needed(structure);
	}
    if (try_to_assign_implicit_parent_types_to_data_members){
		Try_To_Assign_Implicit_Parent_Types_To_Data_Members(structure);
	}

	//creating and tagging versioning information
	if (auto_version_missing_data_members){
		Auto_Version_Missing_Data_Members(structure);
	}
	if (auto_version_types){
		Auto_Version_Types(structure);
	}

	//This will add to the import tokens based on the imports specified alongside other data.
    //Handles the philosophy that module dependencies should be tied to where the deps are used
	if (resolve_module_deps){
		Module_Dependency_Resolver::Resolve(structure,settings);
	}
    
    //perform manipulations on each section of the UniLang structure.
    //these are often manipulations based on existing meta data already contained in the structure.
    //generating new methods based on data member properties
    //automatically including the necessary imports based on what is being used in code
    if (adjust_meta){
        Meta_Adjuster::Adjust(structure.meta,settings);
    }
    
    if (adjust_types){
        Type_Adjuster::Adjust(structure.types,settings);
    }

    if (adjust_enums){
		Enums_Adjuster::Adjust(structure,settings);
	}
    if (adjust_methods){
    	Methods_Adjuster::Adjust(structure,settings);
	}
	if (adjust_imports){
		Import_Adjuster::Adjust(structure,settings.imports,language);
	}
    if (adjust_data_members){
        Data_Member_Adjuster::Adjust(structure.data_members,settings);
    }
    
    if (add_typedefs_for_unilang_type_usage){
        //TODO
    }
    
    if (mock_yypes_that_are_already_referenced_as_outside_packages){
        Mock_Types_That_Are_Already_Referenced_As_Outside_Packages(structure,settings);
    }
❱


◀private: static▶ void ☀Mock_Types_That_Are_Already_Referenced_As_Outside_Packages(Structure & structure, Struct_Manipulation_Settings const& settings)❰
    
    //find types that have external dependencies
    std::set<std::string> external_types;
    for (auto const& d: structure.data_members.data_members){
        if (!d.library_dependencies.empty()){
            external_types.insert(as_string(d.type.value));
        }
        else if (!d.module_dependencies.empty()){
            external_types.insert(as_string(d.type.value));
        }
    }
    
    //turn parent types into mocks if they've been referenced elsewhere with external dependencies
    for (auto & t : structure.types.types){
        if (external_types.find(as_string(t.name.value)) != external_types.end()){
            t.mocked = true;
        }
    }
❱


◀private: static▶ void ☀Populate_Implict_Type_Section_If_Needed(Structure & structure)❰
    if (structure.meta.code_type != Code_Type::GLOBAL)
	{
		if (structure.types.types.empty()){
			Type_Item item;
			item.name.value = as_wstring(structure.name);
			item.brief = structure.meta.brief_description;
			item.detail = structure.meta.detailed_description;
			structure.types.types.emplace_back(item);
		}
	}
❱
◀private: static▶ void ☀Try_To_Assign_Implicit_Parent_Types_To_Data_Members(Structure & structure)❰
	for (auto & d: structure.data_members.data_members){
		if (d.parent_types.empty()){
			if (!structure.types.types.empty()){
				Parent_Type temp;
				temp.type = structure.types.types[0].name;
				d.parent_types.emplace_back(temp);
			}
		}
	}
❱
◀private: static▶ void ☀Auto_Version_Missing_Data_Members(Structure & structure)❰
    std::string default_data_member_version = "0";
	for (auto & d: structure.data_members.data_members){
		if (as_string(d.version.value) == ""){
			d.version.value = as_wstring(default_data_member_version);
		}
	}
❱
◀private: static▶ void ☀Auto_Version_Types(Structure & structure)❰
	std::string default_type_version = "0";
	for (auto & t: structure.types.types){

		int highest_version = 0;
		for (auto const& d: structure.data_members.data_members){
			for (auto const& p: d.parent_types){
				if (as_string(p.type.value) == as_string(t.name.value)){
					auto version = as_signed(as_string(d.version.value));
					if (version > highest_version){
						highest_version = version;
					}
					break;
				}
			}
		}
		t.version.value = as_wstring(std::to_string(highest_version));
		t.minimum_version.value = as_wstring(default_type_version);
	}
❱
