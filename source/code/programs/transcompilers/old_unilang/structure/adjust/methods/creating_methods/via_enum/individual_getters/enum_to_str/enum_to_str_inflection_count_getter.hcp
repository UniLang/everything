class


❪"code/utilities/linguistics/computer/frontends/parts/enum/enum_options"❫
⚯
❪"code/utilities/types/strings/transformers/inflection/settings/inflection_settings"❫
❪"code/utilities/types/strings/transformers/inflection/inflection_converter"❫
❪"code/utilities/types/strings/transformers/inflection/getters/inflection_settings_getter"❫
❪"code/utilities/types/converters/lib"❫
❪"code/utilities/types/strings/transformers/casing/lib"❫
❪"code/utilities/types/general/lib"❫
⚞⚟

◀public: static▶ std::vector<Method_Item> ☀Get(std::vector<Enum_Item> const& enum_items, Enum_Options const& options, Enum_Utility_Conversion_Function_Options const& sub_settings)❰
    std::vector<Method_Item> items;
    
    auto amount = enum_items.size();
    for (auto enum_item: enum_items){
        items.push_back(Create_Method(enum_item,options,sub_settings,amount));
    }
    
    return items;
❱

◀private: static▶ Method_Item ☀Create_Method(Enum_Item const& item,  Enum_Options const& options, Enum_Utility_Conversion_Function_Options const& sub_settings, int amount)❰
    Method_Item m;
    
    //property related
    m.class_access  = sub_settings.enum_to_string_inflection_count.access;
    m.storage = Storage_Specifier::NONE;
    
    //doesnt matter
    m.overload_specifiers.is_const = false;
    m.overload_specifiers.value = Value_Overload::NONE;
    
    //documentation related
    auto str_enum_name = as_string(item.name.value);
    auto generated_function_name = Enum_Utility_Function_Shared::Decide_Function_Name_Based_On_Visibility(item,m.class_access,sub_settings.enum_to_string_inflection_count.function_name,amount);
    m.names.function_name.value = as_wstring(generated_function_name);
    m.names.original_function_name.value = as_wstring(generated_function_name);
    m.brief_description.value = L"converts " + as_wstring(str_enum_name) + L" to a string";
    m.detailed_description.value = L"converts enum to string";
    
    //arguments
    auto arg = Enum_Argument(item,options);
    m.function_arguments.push_back(arg);
    auto count_arg = Count_Argument(item,options);
    m.function_arguments.push_back(count_arg);
    
    //return value
    auto result = Result(item,options);
    m.return_results.push_back(result);
    
    Add_Body(m,item,options,sub_settings,amount);
    
    return m;
❱

//arguments and return value
◀private: static▶ Function_Argument ☀Enum_Argument(Enum_Item const& item,  Enum_Options const& options)❰
    Function_Argument arg;
    arg.is_mutable = false;
    arg.is_reference = false;
    arg.usage_requirement = Usage_Requirement::NOT_IGNORED;
    arg.type.value = as_wstring(As_Capital_And_Pushed_Together(as_string(item.name.value) + "E"));
    arg.identifier.value = item.name.value;
    arg.comment.value = L"the " + item.name.value + L" to convert to a string";
    
    return arg;
❱
◀private: static▶ Function_Argument ☀Count_Argument(Enum_Item const& item,  Enum_Options const& options)❰
    Function_Argument arg;
    arg.is_mutable = false;
    arg.is_reference = false;
    arg.usage_requirement = Usage_Requirement::NOT_IGNORED;
    arg.type.value = L"i";
    arg.identifier.value = L"amount";
    
    auto inflection_settings = Inflection_Settings_Getter::Get();
    auto as_plural = Inflection_Converter::As_Plural(as_string(item.name.value),inflection_settings);
    arg.comment.value = L"the number of " + as_wstring(as_plural);
    
    return arg;
❱
◀private: static▶ Function_Result ☀Result(Enum_Item const& item,  Enum_Options const& options)❰
    Function_Result arg;
    arg.is_mutable = false;
    arg.is_reference = false;
    arg.type.value = L"ascii_string";
    arg.identifier.value = L"string version of enumerated value";
    arg.comment.value = L"a string representing the enumerated value";
    
    return arg;
❱

◀private: static▶ void ☀Add_Body(Method_Item & m, Enum_Item const& item,  Enum_Options const& options, Enum_Utility_Conversion_Function_Options const& sub_settings, int amount)❰

    //the body of the function
    std::vector<Body_Token_Value> body;
    Body_Token_Value t;
    
    t.name = Body_Token_Name::COMMENT;
    t.value = as_wstring("decide whether to convert the enumerated string in singular or plural form\n"); 
    body.push_back(t);
    
    t.name = Body_Token_Name::REGULAR;
    t.value =  L"\nif(";
    body.push_back(t);
    
    t.name = Body_Token_Name::BODY_PARAMETER;
    t.value =  L"amount";
    body.push_back(t);
    
    t.name = Body_Token_Name::REGULAR;
    t.value =  L" == 1){\n";
    body.push_back(t);
    
    t.name = Body_Token_Name::REGULAR;
    t.value =  L"return \n";
    body.push_back(t);
    
    //call singular
    body.push_back(Self_Function_Call(item,sub_settings.enum_to_string_singular,amount));
    
    t.name = Body_Token_Name::BODY_PARAMETER;
    t.value =  item.name.value;
    body.push_back(t);
    
    t.name = Body_Token_Name::REGULAR;
    t.value =  L");";
    body.push_back(t);
    
    t.name = Body_Token_Name::REGULAR;
    t.value =  L"\n}\n";
    body.push_back(t);
    
    t.name = Body_Token_Name::REGULAR;
    t.value =  L"return ";
    body.push_back(t);
    
    //call plural
    body.push_back(Self_Function_Call(item,sub_settings.enum_to_string_plural,amount));
    
    t.name = Body_Token_Name::BODY_PARAMETER;
    t.value =  item.name.value;
    body.push_back(t);
    
    t.name = Body_Token_Name::REGULAR;
    t.value =  L");";
    body.push_back(t);
    
    //assign
    m.body = body;
❱

◀private: static▶ Body_Token_Value ☀Self_Function_Call(Enum_Item const& item, Function_Build_Settings settings,int amount)❰
    Body_Token_Value t;
    t.name = Body_Token_Name::SELF_FUNCTION_CALL;
    
    auto generated_name = Enum_Utility_Function_Shared::Decide_Function_Name_Based_On_Visibility(item,settings.access,settings.function_name,amount);
    t.value = as_wstring(generated_name);
    
    return t;
❱


