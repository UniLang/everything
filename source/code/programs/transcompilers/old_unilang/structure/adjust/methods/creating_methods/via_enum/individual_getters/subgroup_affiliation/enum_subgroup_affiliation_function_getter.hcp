class


❪"code/utilities/linguistics/computer/frontends/parts/enum/enum_options"❫
⚯
❪"code/utilities/types/strings/transformers/inflection/settings/inflection_settings"❫
❪"code/utilities/types/strings/transformers/inflection/inflection_converter"❫
❪"code/utilities/types/strings/transformers/inflection/getters/inflection_settings_getter"❫
❪"code/utilities/types/converters/lib"❫
❪"code/utilities/types/strings/transformers/casing/lib"❫
❪"code/utilities/types/general/lib"❫
⚞⚟

◀public: static▶ std::vector<Method_Item> ☀Get(Enum_Item const& item, Enum_Options const& options, Enum_Utility_Subgroup_Affiliation_Function_Options const& settings)❰

	std::vector<Method_Item> all;

	for (auto group: item.subgroups){
		all.push_back(Create_Function(group,item,options,settings));
	}
	
	return all;
❱

◀public: static▶ Method_Item ☀Create_Function(Enum_Subgroup const& subgroup, Enum_Item const& item, Enum_Options const& options, Enum_Utility_Subgroup_Affiliation_Function_Options const& settings)❰

    Method_Item m;
    //property related
    m.class_access = Class_Access::PUBLIC;
    m.storage = Storage_Specifier::NONE;
    
    //doesn't matter
    m.overload_specifiers.is_const = false;
    m.overload_specifiers.value = Value_Overload::NONE;
    
    //documentation related
	std::string func_name = "is " + as_string(subgroup.name.value);
    m.names.function_name.value = as_wstring(func_name);
	m.names.original_function_name.value = as_wstring(func_name);
	m.brief_description.value = L"";
    m.detailed_description.value = L"";
    
    //arguments
    auto arg = Enum_Argument(subgroup,item);
    m.function_arguments.push_back(arg);
    
    //return value
    auto result = Result(subgroup,item);
    m.return_results.push_back(result);
    
    Add_Body(m,subgroup,item,options);
    
    return m;
❱

◀private: static▶ Function_Argument ☀Enum_Argument(Enum_Subgroup const& subgroup, Enum_Item const& item)❰
    Function_Argument arg;
    arg.is_mutable = false;
    arg.is_reference = false;
    arg.usage_requirement = Usage_Requirement::NOT_IGNORED;
    arg.type.value = as_wstring(As_Capital_And_Pushed_Together(as_string(item.name.value) + "E"));
    arg.identifier.value = item.name.value;
    arg.comment.value = L"the " + item.name.value + L" to test to see if it is a " + subgroup.name.value;;
    
    return arg;
❱

◀private: static▶ Function_Result ☀Result(Enum_Subgroup const& subgroup, Enum_Item const& item)❰
    Function_Result arg;
    arg.is_mutable = true;
    arg.is_reference = false;
    arg.type.value = L"bool";
    arg.identifier.value = L"is in group affiliation";
    arg.comment.value = L"whether or not the " + item.name.value + L" is a " + subgroup.name.value;
    
    return arg;
❱

◀private: static▶ void ☀Add_Body(Method_Item & m, Enum_Subgroup const& subgroup, Enum_Item const& item, Enum_Options const& options)❰

    //the body of the function
    std::vector<Body_Token_Value> body;
    Body_Token_Value t;
    
    t.name = Body_Token_Name::COMMENT;
    t.value = L"check whether the " + item.name.value + L" is a " + subgroup.name.value;
    body.push_back(t);
    
    t.name = Body_Token_Name::REGULAR;
    t.value =  L"\nreturn ";
    body.push_back(t);


	//find all the enum arguments that are subscribed to the group affiliation
	std::vector<std::string> found_names;
	for (auto arg : item.args){
		for (auto group: arg.subscribed_subgroup){
			if (group.name.value == subgroup.name.value){
				found_names.push_back(as_string(arg.name.value));
				break;
			}
		}
	}

	//create the or expression
	Call_Function_On_All_Elements_Except_Last_Element_Then_Call_Function_On_Last_Element(found_names
	,[&](auto name){
		//all arguments except last
		auto identifier = as_string(item.name.value);
		t.name = Body_Token_Name::BODY_PARAMETER;
		t.value = item.name.value;
		body.push_back(t);
		t.name = Body_Token_Name::REGULAR;
		t.value = L" == ";
		t.value += as_wstring(Enum_Value_Creator::Create(identifier,name,options));
		t.value += L" ||";
		body.push_back(t);
	}
	,[&](auto name){
		//last argument
		auto identifier = as_string(item.name.value);
		t.name = Body_Token_Name::BODY_PARAMETER;
		t.value = item.name.value;
		body.push_back(t);
		t.name = Body_Token_Name::REGULAR;
		t.value = L" == ";
		t.value += as_wstring(Enum_Value_Creator::Create(identifier,name,options));
		body.push_back(t);
	}
	);


    t.name = Body_Token_Name::REGULAR;
    t.value =  L";\n";
    body.push_back(t);
    
    //assign
    m.body = body;
❱



