class


❪"code/utilities/linguistics/computer/frontends/parts/data_member/data_member_options"❫
⚯
❪"code/utilities/types/converters/lib"❫
❪"code/utilities/types/strings/transformers/removing/lib"❫
❪"code/utilities/types/strings/observers/other/lib"❫
⚞⚟

◀public: static▶ std::vector<Body_Token_Value> ☀Create_Printf_Statement(Data_Member_Item const& item, C_Language_Version const& version, Printf_Statement_Kind const& kind)❰
  std::vector<Body_Token_Value> body;
  Body_Token_Value t;
  
  
  //attempt to get code for special type printing
  bool found=false;
  Special_Printf_Specifier_Settings special_settings;
  auto special_code = Special_Type_Printf_Specifier_Getter::Get(special_settings,as_string(item.type.value),found);
  
  if (found){
    body += Print_Special(special_code,item,version,kind);
  }
  else{
    body += Print_Non_Special(item,version,kind);
  }
  
  return body;
❱

◀private: static▶ std::vector<Body_Token_Value> ☀Print_Special(Special_Printf_Type type, Data_Member_Item const& item, C_Language_Version const& version, Printf_Statement_Kind const& kind)❰
    
	Mustache_Like_Fill_In(type,item);
    
    //create special printf
    std::vector<Body_Token_Value> body;
    Body_Token_Value t;
    
	if (kind == Printf_Statement_Kind::REGULAR_PRINT){
		body += Printf_Print_Statement_Creator::Create(type,item,version);
	}
	else if(kind == Printf_Statement_Kind::REGULAR_TRANSITION){
		body += Printf_Transition_Statement_Creator::Create(type,item,version);
	}
    
    return body;
❱

◀private: static▶ void ☀Mustache_Like_Fill_In(Special_Printf_Type & type, Data_Member_Item const& item)❰
	//{{MUSTACHE-LIKE FILL IN}} for the the data member name
    for (auto & it: type.body){
      if (it.name == Body_Token_Name::SELF_DATA_MEMBER){
        it.value = item.name.value;
      }
      else if (it.name == Body_Token_Name::SELF_DATA_MEMBER_WITHOUT_OBJ){
        it.value = item.name.value;
      }
    }
    for (auto & it: type.transition_body){
      if (it.name == Body_Token_Name::SELF_DATA_MEMBER){
        it.value = item.name.value;
      }
      else if (it.name == Body_Token_Name::SELF_DATA_MEMBER_WITHOUT_OBJ){
        it.value = item.name.value;
      }
    }
❱

◀private: static▶ std::vector<Body_Token_Value> ☀Print_Non_Special(Data_Member_Item const& item, C_Language_Version const& version, Printf_Statement_Kind const& kind)❰
    
    std::vector<Body_Token_Value> body;
    Body_Token_Value t;


	 //get the specifier
     Printf_Specifier_Settings settings;
     auto specifier = Printf_Specifier_Getter::Get(version,settings,as_string(item.type.value));
     
     //print fundamental type
     if (!specifier.empty()){
        body += Print_Fundamental(item,as_string(item.type.value),version,kind);
     }
     
     //print non-fundamental
     else{
      body += Print_NonFundamental(item,version,kind);
     }
    
    return body;
❱



◀private: static▶ std::vector<Body_Token_Value> ☀Print_Fundamental(Data_Member_Item const& item, std::string const& specifier, C_Language_Version const& version, Printf_Statement_Kind const& kind)❰
    
    std::vector<Body_Token_Value> body;
    Body_Token_Value t;
    
    Special_Printf_Type type;
    type.unilang_type_name = specifier;
    
    t.name = Body_Token_Name::SELF_DATA_MEMBER;
    t.value = item.name.value;
    type.body.push_back(t);


	//possibly add transition parameter
	if (kind == Printf_Statement_Kind::REGULAR_TRANSITION){

		t.name = Body_Token_Name::BODY_PARAMETER;
		t.value =  as_wstring("before");
		type.transition_body.push_back(t);

		t.name = Body_Token_Name::REGULAR;
		t.value =  as_wstring("->");
		type.transition_body.push_back(t);

		t.name = Body_Token_Name::SELF_DATA_MEMBER_WITHOUT_OBJ;
		t.value =  item.name.value;
		type.transition_body.push_back(t);

		t.name = Body_Token_Name::REGULAR;
		t.value =  as_wstring(",");
		type.transition_body.push_back(t);

	    //same as print body + more
		type.transition_body += type.body;

	}
    
    
    return Print_Special(type,item,version,kind);
❱

◀private: static▶ std::vector<Body_Token_Value> ☀Print_NonFundamental(Data_Member_Item const& item, C_Language_Version const& version, Printf_Statement_Kind const& kind)❰
    
    std::vector<Body_Token_Value> body;
    
    if (Enum_Data_Member(item)){
      return Print_Enum_Data_Member(item,version,kind);
    }
    
    //if its a custom data type, we assume it has a print function
    body += Print_Custom_Type_Call_Header(item);
    body += Print_Custom_Type_Call(item);
    
    return body;
❱

◀private: static▶ std::vector<Body_Token_Value> ☀Print_Enum_Data_Member(Data_Member_Item const& item, C_Language_Version const& version, Printf_Statement_Kind const& kind)❰
      
	std::vector<Body_Token_Value> body;
      Body_Token_Value t;
      
      Special_Printf_Type type;
      type.unilang_type_name = "ascii_string";
    
      auto function_name = As_Last_Char_Removed(as_string(item.type.value));
      function_name += "ToStr"; //TODO: derive
      
      t.name = Body_Token_Name::REGULAR;
      t.value =  as_wstring(function_name) + L"(";
      type.body.push_back(t);
      
      t.name = Body_Token_Name::SELF_DATA_MEMBER;
      t.value = item.name.value;
      type.body.push_back(t);
      
      t.name = Body_Token_Name::REGULAR;
      t.value =  L")";
      type.body.push_back(t);

	//possibly add transition parameter
	if (kind == Printf_Statement_Kind::REGULAR_TRANSITION){

		t.name = Body_Token_Name::REGULAR;
		t.value =  as_wstring(function_name) + L"(";
		type.transition_body.push_back(t);

		t.name = Body_Token_Name::BODY_PARAMETER;
		t.value =  as_wstring("before");
		type.transition_body.push_back(t);

		t.name = Body_Token_Name::REGULAR;
		t.value =  as_wstring("->");
		type.transition_body.push_back(t);

		t.name = Body_Token_Name::SELF_DATA_MEMBER_WITHOUT_OBJ;
		t.value =  item.name.value;
		type.transition_body.push_back(t);

		t.name = Body_Token_Name::REGULAR;
		t.value =  L")";
		type.transition_body.push_back(t);

		t.name = Body_Token_Name::REGULAR;
		t.value =  as_wstring(",");
		type.transition_body.push_back(t);

		//same as print body + more
		type.transition_body += type.body;
	}
      
      return Print_Special(type,item,version,kind);
❱







//PRINT SPECIFIC
◀private: static▶ std::vector<Body_Token_Value> ☀Print_Custom_Type_Call_Header(Data_Member_Item const& item)❰

    std::vector<Body_Token_Value> body;
    Body_Token_Value t;
    
    t.name = Body_Token_Name::REGULAR;
    t.value =  L"printf(\"%s%s: ";
    body.push_back(t);
    
    t.name = Body_Token_Name::REGULAR;
    t.value =  L"\\n\",AsciiStringCStr(&tIndent),\"" + item.name.value + L"\"";
    body.push_back(t);
    
    t.name = Body_Token_Name::REGULAR;
    t.value =  L");\n";
    body.push_back(t);
    
    return body;
❱
◀private: static▶ std::vector<Body_Token_Value> ☀Print_Custom_Type_Call(Data_Member_Item const& item)❰

    std::vector<Body_Token_Value> body;
    Body_Token_Value t;
    
    //if its a custom data type, we assume it has a print function
    auto function_name = As_Last_Char_Removed(as_string(item.type.value));
    function_name += "Print";
    
    t.name = Body_Token_Name::REGULAR;
    t.value =  as_wstring(function_name) + L"(&";
    body.push_back(t);
    
    t.name = Body_Token_Name::SELF_DATA_MEMBER;
    t.value = item.name.value;
    body.push_back(t);
    
    t.name = Body_Token_Name::REGULAR;
    t.value =   L",";
    body.push_back(t);
    
    t.name = Body_Token_Name::BODY_PARAMETER;
    t.value =  L"depth";
    body.push_back(t);
    
    t.name = Body_Token_Name::REGULAR;
    t.value =  L"+1";
    body.push_back(t);
    
    t.name = Body_Token_Name::REGULAR;
    t.value =  L");\n";
    body.push_back(t);
    
    return body;
❱



//util
◀private: static▶  bool ☀Enum_Data_Member(Data_Member_Item const& item)❰
  //TODO: not good to look for the E at the end because hungarian notation should be an implementation
  //detail and it can change and we should be bale to reference the type from the unilang name
  return Ends_With(as_string(item.type.value),"E");
❱
◀private: static▶  bool ☀Custom_Type_Data_Member(Data_Member_Item const& item)❰
  //TODO: not good to look for the T at the end because hungarian notation should be an implementation
  //detail and it can change and we should be bale to reference the type from the unilang name
  return Ends_With(as_string(item.type.value),"T");
❱
