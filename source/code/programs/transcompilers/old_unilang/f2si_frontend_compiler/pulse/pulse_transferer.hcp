class

❪string❫
❪iostream❫
❪"pulse_settings"❫
❪"pulse_transfer_action"❫
❪"code/utilities/program/call/lib"❫
❪"code/utilities/program/processes/lib"❫
❪"code/utilities/colors/lib"❫
❪"code/utilities/types/strings/observers/splitting/lib"❫
⚯

⚞⚟

◀public: static▶ void ☀Transfer(Pulse_Settings const& settings, Pulse_Transfer_Action const& action)❰
    //the paths
	//std::cout << full_path << std::endl;
	//std::cout << dest_path << std::endl;
	
    Make_Sure_Pulse_Is_Running_If_It_Needs_To_Be(settings);
    
    std::string command;
    if (action.directory){
        command = create_lftp_command_for_directory(settings.lftp_tool_to_use,settings.computer_user,action.password,settings.computer_name,action.from,action.to);
        std::cout << command << std::endl;
    }
    else{
	   command = create_lftp_command_for_single_file(settings.lftp_tool_to_use,settings.computer_user,action.password,settings.computer_name,action.from,action.to);
    }

    //waiting for the program to fail works, but takes a long time to time out.  
    //hopefully this shouldn't happen since we ensure the client is running before hand.  
    //it still can, but the usual case it would hang and fail is because I wasnt the client at all.
	if (Unsuccessful_Run_Of_Command(command)){
		std::cout << "command failed:\n" << command << std::endl;
	}
    else {
        Possibly_Show_Transfer_Output(settings,action);
    }
❱

◀private: static▶ void ☀Possibly_Show_Transfer_Output(Pulse_Settings const& settings, Pulse_Transfer_Action const& action)❰
    if (settings.show_file_progress){
        Green_Then_Regular_Message("transfer ",Get_Path_After_Desktop(action.from));
    }
❱

◀private: static▶ void ☀Make_Sure_Pulse_Is_Running_If_It_Needs_To_Be(Pulse_Settings const& settings)❰

    if (settings.pulse_required){
        if (!Pulse_Is_Running(settings)){
            std::cout << "Can't transfer.  Expects " << settings.expected_process_name << " to be running.\n";
            //todo.  maybe start the program for the user
            //program might be running but not connected
            //really just need a non-gui connect program
            return;
        }
    }
❱

◀private: static▶ bool ☀Pulse_Is_Running(Pulse_Settings const& settings)❰

    //usr/local/pulse/PulseClient.sh doesn't support multi-auth or something.
    //dumb.  we'll have to call the gui for now.
    return Process_Is_Running(settings.expected_process_name);

❱


◀private: static▶ std::string ☀create_lftp_command_for_single_file(std::string const& tool, std::string const& user, std::string const& pass, std::string const& computer, std::string const& from, std::string const& to)❰
	std::string command;
    command += tool;
	command += " ";
    command += "-c ";
    command += "'";
    command += "open -u ";
    command += user;
    command += ",";
    command += pass;
    command += " ";
	command += "sftp://";
    command += user;
	command += "@";
	command += computer;
    command += "; ";
    command += "put ";
	command += " -e -O ";
	command += to;
	command += " ";
	command += from;
	command += "'";
	return command;
❱
◀private: static▶ std::string ☀create_lftp_command_for_directory(std::string const& tool, std::string const& user, std::string const& pass, std::string const& computer, std::string const& from, std::string const& to)❰
    std::string command;
    command += tool;
    command += " ";
    command += "-c ";
    command += "'";
    command += "open -u ";
    command += user;
    command += ",";
    command += pass;
    command += " ";
    command += "sftp://";
    command += user;
    command += "@";
    command += computer;
    command += "; ";
    command += "mirror ";
    command += " -e -R ";
    command += from;
    command += " ";
    command += to;
    command += "'";
    return command;
❱
