class

❪iostream❫
❪fstream❫
⚯
❪"code/utilities/types/strings/transformers/appending/lib"❫
❪"code/utilities/types/strings/transformers/removing/lib"❫
❪"code/utilities/types/vectors/transformers/lib"❫
❪"code/utilities/filesystem/paths/lib"❫
❪"code/utilities/streams/filestreams/lib"❫
❪"code/utilities/system/lib"❫
⚞⚟

◀public: static▶ Pulse_Transfer_Action ☀Get(Pulse_Settings const& settings, std::string const& file_name)❰

    //create mirrored directory location
    std::string full_path = Full_Path();
    full_path += "/" + file_name;
    
    //create workspace location
    auto workspace_path = Get_Remote_Workspace(settings);
    auto extra_workspace = As_All_Chars_Removed_From_Back_Until_Char_Is_Seen(file_name, '/');
    if (!extra_workspace.empty()){
        workspace_path += "/" + extra_workspace;
    }

    //Build pulse transfer action
    Pulse_Transfer_Action action;
    action.password = Get_First_Line_Of_File(settings.lftp_password_location);
    action.from = full_path;
    action.to = workspace_path;
    return action;
❱

◀public: static▶ std::string ☀Get_Remote_Workspace(Pulse_Settings const& settings)❰
    auto parts = Current_Path_In_Parts();
    Remove_First_Element(parts);    
    parts[1] = settings.computer_user;

    std::string dest_path;
    for (auto p: parts){
        dest_path += "/" + p;
    }
    return dest_path;
❱
