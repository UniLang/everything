class


⚯
❪"code/utilities/personal/life/company_getter"❫

⚞⚟

◀public: static▶ Build_Rule_Settings ☀Get()❰
    Build_Rule_Settings settings;
    
    //FOR BAZEL BUILD FILES
    settings.loads.entries.emplace_back(Hidl_Load());
    settings.loads.entries.emplace_back(Config_Hidl_Load());
    settings.loads.entries.emplace_back(Cpp_Library_Load());
    settings.loads.entries.emplace_back(Cpp_Include_Library_Load());
    settings.loads.entries.emplace_back(XIS_Task_Load());
    settings.loads.entries.emplace_back(GTest_Load());
    settings.loads.entries.emplace_back(GTest_Binary());
    
    
    
    //prints in meta block
    settings.portion.meta.project_name = "";
    settings.portion.meta.contract_number = "";
    settings.portion.meta.task_order = "";
    settings.portion.meta.contract_statement = "";
    settings.portion.meta.copyright_statement = Company_Getter::Current() + " (c)";
    settings.portion.meta.copyright.use_tag = false;
    settings.portion.meta.copyright.print_method = Meta_Copyright_Print_Method::DERIVED_START_DATE_ONLY;
    settings.portion.meta.copyright.copyright_date_prefix_statement = "(c)";
    settings.portion.meta.copyright.show_company_before = true;
    settings.portion.meta.classification = "";
    settings.portion.meta.distribution_statement = "";
    
    //organization name also shows up in meta block
    Organization org;
    org.company_phone_number = "";
    org.company_abbreviation = "";
    org.company_name = Company_Getter::Current();
    org.address.number = "";
    org.address.street = "";
    org.address.city = "";
    org.address.state = "";
    org.address.zip = "";
    settings.portion.meta.organizations.push_back(org);
    
    return settings;
❱

◀private: static▶ Bazel_Load_Data ☀Hidl_Load()❰
    Bazel_Load_Data o;
    o.file = "bazel/cookbook/hub/idl.bzl";
    o.rule = "av_cc_hidl_library";
    o.object = Bazel_Build_Object::HIDL;
    return o;
❱
◀private: static▶ Bazel_Load_Data ☀Config_Hidl_Load()❰
    Bazel_Load_Data o;
    o.file = "bazel/cookbook/hub/idl.bzl";
    o.rule = "av_cc_hidl_config_library";
    o.object = Bazel_Build_Object::CONFIG_HIDL;
    return o;
❱
◀private: static▶ Bazel_Load_Data ☀Cpp_Library_Load()❰
    Bazel_Load_Data o;
    o.file = "bazel/cookbook/av.bzl";
    o.rule = "av_cc_library";
    o.object = Bazel_Build_Object::CPP_LIBRARY;
    return o;
❱
◀private: static▶ Bazel_Load_Data ☀Cpp_Include_Library_Load()❰
    Bazel_Load_Data o;
    o.file = "bazel/cookbook/av.bzl";
    o.rule = "av_cc_inc_library";
    o.object = Bazel_Build_Object::CPP_INCLUDE_LIBRARY;
    return o;
❱
◀private: static▶ Bazel_Load_Data ☀XIS_Task_Load()❰
    Bazel_Load_Data o;
    o.file = "bazel/cookbook/av.bzl";
    o.rule = "av_cc_task";
    o.object = Bazel_Build_Object::XIS_TASK;
    return o;
❱
◀private: static▶ Bazel_Load_Data ☀GTest_Load()❰
    Bazel_Load_Data o;
    o.file = "bazel/cookbook/av.bzl";
    o.rule = "av_cc_gtest";
    o.object = Bazel_Build_Object::GTEST;
    return o;
❱
◀private: static▶ Bazel_Load_Data ☀GTest_Binary()❰
    Bazel_Load_Data o;
    o.file = "bazel/cookbook/av.bzl";
    o.rule = "av_cc_binary";
    o.object = Bazel_Build_Object::CPP_BINARY;
    return o;
❱