class


❪"code/utilities/linguistics/computer/frontends/parts/enum/enum_options"❫
⚯
❪"code/utilities/types/strings/transformers/casing/case_modifier"❫
❪"code/utilities/types/strings/transformers/casing/case_format_style"❫
❪"enum_argument_printer"❫
❪"enum_boilerplate_printer"❫
❪"code/utilities/streams/filestreams/lib"❫
❪"code/utilities/types/strings/transformers/other/lib"❫
❪"code/utilities/types/converters/lib"❫
❪"code/utilities/types/general/lib"❫
❪"code/utilities/types/strings/transformers/casing/lib"❫
❪"code/utilities/types/vectors/observers/lib"❫
⚞⚟

◀public: static▶ void ☀Print_Type(std::wofstream & out, Enum_Item const& item, Enum_Options const& options, General_Options const& general, Portion_Options const& portion)❰

    auto identifier = as_string(item.name.value);

    Enum_Boilerplate_Printer::Print_Beginning_Part(out,item,general,portion);
    
    //values part
    Call_Function_On_All_Elements_Except_Last_Element_Then_Call_Function_On_Last_Element(item.args
        ,[&](Enum_Arg x){Print_Not_Last_Value(out,identifier,x,options);}
        ,[&](Enum_Arg x){Print_Last_Value(out,identifier,x,options);});
    Print_To_Stream_With_Newline(out,"");
    
    Enum_Boilerplate_Printer::Print_End_Part(out,item,portion);
    
❱

◀private: static▶ void ☀Print_Not_Last_Value(std::wofstream & out, std::string base_type_name, Enum_Arg arg, Enum_Options const& options)❰
    Enum_Argument_Printer::Print(4,out,base_type_name,arg,false,options);
❱
◀private: static▶ void ☀Print_Last_Value(std::wofstream & out, std::string base_type_name, Enum_Arg arg, Enum_Options const& options)❰
    Enum_Argument_Printer::Print(4,out,base_type_name,arg,true,options);
❱
