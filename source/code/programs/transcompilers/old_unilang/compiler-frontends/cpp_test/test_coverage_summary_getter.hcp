class

❪vector❫
❪string❫
❪iostream❫
❪fstream❫
❪"code/utilities/types/converters/lib"❫

⚯
❪"code/utilities/types/strings/transformers/casing/case_modifier"❫
❪"code/utilities/types/strings/transformers/appending/lib"❫
❪"code/utilities/types/char/lib"❫
❪"code/utilities/types/strings/transformers/other/lib"❫
❪"code/utilities/types/strings/transformers/inflection/settings/inflection_settings"❫
❪"code/utilities/types/strings/transformers/inflection/inflection_converter"❫
❪"code/utilities/types/strings/transformers/inflection/getters/inflection_settings_getter"❫
❪"code/utilities/types/vectors/observers/lib"❫
⚞⚟

◀public: static▶ std::string ☀Get(Structure const& structure, Cpp_Test_Export_Settings const& settings)❰
    std::string str;
    str += Notes_About_Test_Coverage(structure,settings);
    str += Total_Number_Of_Tests_Statment(structure,settings);
    str += Get_Existing_Public_Test_Case_Ratio(structure,settings);
    str += Decide_Test_Coverage_Title(structure,settings);
    str += Grouped_Test_Summary(structure,settings);
    Append_To_Front_Of_Each_Line(str,"///   ");
    
    
    return str;
❱

◀private: static▶ std::string ☀Notes_About_Test_Coverage(Structure const& structure, Cpp_Test_Export_Settings const& settings)❰
    std::string str;
    
    //phabricator
    std::string domain = "https://code.int.uberatc.com";
    std::string link_to_dashboard = domain + "/w/software_development/code-coverage/automated_phab/";
    std::string link_to_recent_reports = domain + "/repos/";
    
    str += "These unit tests are intended to test the behavior of individual APIs.\n";
    str += "We track the percentage of public APIs that have tests below.\n";
    str += "For overall code coverage metrics check the latest coverage report:\n";
    str += link_to_dashboard;
    str += "\n";
    str += link_to_recent_reports;
    str += "\n";
    str += "\n";
    return str;
❱

◀private: static▶ std::string ☀Total_Number_Of_Tests_Statment(Structure const& structure, Cpp_Test_Export_Settings const& settings)❰
    
    //count number of tests
    int test_count = 0;
    for (auto method: structure.methods.methods){
        if (method.class_access == Class_Access::PUBLIC){
            test_count += method.unit_tests.test_cases.size();
        }
    }
    
    //turn count into string
    auto inflection_settings = Inflection_Settings_Getter::Get();
    std::string str;
    str += std::to_string(test_count);
    str += " ";
    str += Inflection_Converter::Inflect_Based_On_Count(settings.name_for_test_case,inflection_settings,test_count);
    str += "\n";
    return str;
❱

◀private: static▶ std::string ☀Get_Existing_Public_Test_Case_Ratio(Structure const& structure, Cpp_Test_Export_Settings const& settings)❰

    //calculate ratio
    int total_public_methods = 0;
    int total_tested_methods = 0;
    for (auto method: structure.methods.methods){
        if (method.class_access == Class_Access::PUBLIC){
            ++total_public_methods;
            if (!method.unit_tests.test_cases.empty()){
                ++total_tested_methods;
            }
        }
    }
    
    //TODO: move to settings
    std::string title = "Public APIs Tested";
    bool print_ratio = true;
    bool print_percentage = true;
    
    std::string str;
    str += title;
    str += ":";
    
    if (print_ratio){
        str += " ";
        str += "(";
        str += std::to_string(total_tested_methods);
        str += "/";
        str += std::to_string(total_public_methods);
        str += ")";
    }
    if (print_percentage){
        str += " ";
        auto ratio = static_cast<float>(total_tested_methods) / static_cast<float>(total_public_methods);
        str += std::to_string(static_cast<int>(ratio * 100));
        str += "%";
    }
    str += "\n";
    return str;
❱

◀private: static▶ std::string ☀Decide_Test_Coverage_Title(Structure const& structure, Cpp_Test_Export_Settings const& settings)❰
    std::string str;
    str += "Test Coverage Over Specific ";
    if (settings.use_the){
        str += "the ";
    }
    str += Case_Modifier::As_Modified_Casing(settings.summary_title_casing_format,structure.name) + " APIs";
    str += ":\n\n";
    return str;
❱

◀private: static▶ std::string ☀Grouped_Test_Summary(Structure const& structure, Cpp_Test_Export_Settings const& settings)❰
    std::string all;
    auto sorted_methods = Method_Sorter::Get_As_Sorted(structure.methods.methods,settings.portion.method_options.sorting.interface);
    for (auto group: sorted_methods.subgroups){
        
        //if all the methods are private, we don't care about testing them
        if (Group_Has_Public_Functions(group)){
            all += Get_Summary_Stats_For_Group(group,settings);
        }
    }
    
    return all;
❱

◀private: static▶ std::string ☀Get_Summary_Stats_For_Group(Subgroup_Methods const& group, Cpp_Test_Export_Settings const& settings)❰
    std::string all;
    
    all += "   ";
    all += Case_Modifier::As_Modified_Casing(settings.group_casing_format,group.subgroup);
    all += ":\n";
    
    //build test table
    std::vector<std::vector<std::string>> table;
    for (auto method: group.methods){
        
        if (method.class_access == Class_Access::PUBLIC){
        
            //get row data
            auto id_name = Case_Modifier::As_Modified_Casing(settings.function_casing_format,as_string(method.names.function_name.value));
            auto test_tag = Get_Test_Info(method,settings);
            
            //add row to table
            std::vector<std::string> row;
            row.emplace_back(id_name);
            row.emplace_back(test_tag);
            table.emplace_back(row);
        }
    }
    
    auto aligned_table = Table_As_Column_Aligned(table);
    Append_To_Front_Of_Each_Line(aligned_table,"   ");
    all += aligned_table;
    all += "\n";
    
    return all;
❱

◀private: static▶ bool ☀Group_Has_Public_Functions(Subgroup_Methods const& group)❰
    for (auto method: group.methods){
        if (method.class_access == Class_Access::PUBLIC){
            return true;
        }
    }
    return false;
❱

◀private: static▶ std::string ☀Get_Test_Info(Method_Item const& method, Cpp_Test_Export_Settings const& settings)❰
    
    
    std::string str;
    str += " (";
    if (method.unit_tests.test_cases.empty()){
        str += settings.no_direct_test_name;
    }
    else{
        auto amount = method.unit_tests.test_cases.size();
        str += std::to_string(amount) + " ";
        auto inflection_settings = Inflection_Settings_Getter::Get();
        str += Inflection_Converter::Inflect_Based_On_Count(settings.name_for_test_case,inflection_settings,amount);
        
    }
    str += ")";
    return str;
❱