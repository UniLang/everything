class

❪vector❫
❪string❫
❪iostream❫
❪fstream❫
❪"code/utilities/contributor/contributor"❫
❪"code/utilities/types/vectors/operators/lib"❫
❪"code/utilities/linguistics/computer/source_language"❫
❪"code/utilities/types/converters/lib"❫
❪"code/utilities/filesystem/paths/lib"❫
❪"code/utilities/linguistics/computer/export_file_settings/export_file_settings"❫

⚯
❪"code/utilities/types/strings/transformers/casing/case_modifier"❫
❪"code/utilities/types/strings/transformers/appending/lib"❫
❪"code/utilities/types/char/lib"❫
⚞⚟

◀public: static▶ std::vector<std::string> ☀Export(Structure structure, std::vector<Contributor> const& contributors, Cpp_Test_Export_Settings const& settings)❰


    std::vector<std::string> files_created;
    
    //force structure changes
    //TODO: we need to store adjustment phases.  Different tools might want the structure
    //at different phases in its transition.  For now, and this is a hack, I'll make a copy
    //for the test wrapper
    Structure copy = structure;
    Structure_Adjuster::Adjust(copy,settings.manipulations,Source_Language::CPP);
    
        Export_File_Settings file_settings;
        file_settings.language = Source_Language::CPP;
        file_settings.code = Code_Type::GLOBAL;
        file_settings.special = Special_File_Type::NORMAL;
        file_settings.file = File_Type::IMPLEMENTATION;
    
    files_created += Possibly_Create_Test(copy,file_settings,settings);
    
    return files_created;
❱

◀private: static▶ std::string ☀Create_Path_To_Test_File(Structure const& structure, Export_File_Settings const& file_settings, Cpp_Test_Export_Settings const& settings)❰
    
        //create base file name with file extension
        auto file_name = File_Name_Getter::Get(file_settings,structure.name + settings.file_test_suffix,settings.general.filesystem_naming);
        
        //create the test directory we will create a file in
        Create_Path_If_It_Doesnt_Already_Exist(Current_Path() + "/" + settings.file_test_directory);
        
        std::string full_path = settings.file_test_directory + "/" + file_name;
        return full_path;
❱


◀private: static▶ std::vector<std::string> ☀Possibly_Create_Test(Structure const& structure, Export_File_Settings const& file_settings, Cpp_Test_Export_Settings const& settings)❰
    std::vector<std::string> files_created;
    
    if (Has_Unit_Tests(structure)){
        
        //create file name
        auto full_path = Create_Path_To_Test_File(structure,file_settings,settings);
        files_created.emplace_back(full_path);
        
        std::wofstream out(full_path);
        
        out << as_wstring(Boilerplate_Printer::Get_Top_Comment(structure,file_settings,settings.portion.meta,full_path));
        
        if (settings.print_test_coverage_information){
            out << as_wstring(Test_Coverage_Summary_Getter::Get(structure,settings));
            out << as_wstring("\n");
        }
        
        out << as_wstring(Get_Include_Section(structure));
        
        
    auto BAD_DONT_DO_THIS = dont_do_this(settings);
    Namespace_Printer::Print_Namespace(out,structure.namespaces,BAD_DONT_DO_THIS.portion.namespace_options);
        out << as_wstring(Structure_As_Unit_Test(structure,settings));
    Namespace_Printer::Print_Namespace_End(out,structure.namespaces,BAD_DONT_DO_THIS.portion.namespace_options);
    Boilerplate_Printer::Print_End(out,structure,file_settings,BAD_DONT_DO_THIS);
        out.close();
    }
    return files_created;
❱


◀private: static▶ std::string ☀Get_Include_Section(Structure const& structure)❰
    std::string result;
    
    Append(result,"#include ");
    result += Get_Double_Quote();
    auto path = Get_Path_Of_Directory_After_Found_Folder("source");
    Append(result,path);
    Append(result,structure.name);
    Append(result,".hh");
    result += Get_Double_Quote();
    result += "\n";
    
    for (auto const& it: structure.imports.test_dependencies){
        Append(result,"#include ");
        result += Get_Double_Quote();
        Append(result,as_string(it.name.value));
        Append(result,".hh");
        result += Get_Double_Quote();
        result += "\n";
    }
    
    
    Append(result,"#include ");
    result += "<";
    Append(result,"gtest/gtest.h");
    result += ">";
    result += "\n";
    
    Append(result,"#include ");
    result += "<";
    Append(result,"gmock/gmock.h");
    result += ">";
    result += "\n";

    return result;
❱


◀private: static▶ bool ☀Has_Unit_Tests(Structure const& structure)❰
    for (auto const& it: structure.methods.methods){
        if (!it.unit_tests.test_cases.empty()){
            return true;
        }
    }
    
    return false;
❱

◀private: static▶ std::string ☀Structure_As_Unit_Test(Structure const& structure, Cpp_Test_Export_Settings const& settings)❰
    std::string result;
    result += Get_Each_Unit_Test_Section(structure,settings);
    return result;
❱

◀private: static▶ std::string ☀Get_Each_Unit_Test_Section(Structure const& structure, Cpp_Test_Export_Settings const& settings)❰
    std::string result;
    
    for (auto const& it: structure.methods.methods){
        
        result += Maybe_Get_Divider(settings.portion.method_options.test_case.before_test_group);
        
        for (auto const& j: it.unit_tests.test_cases){
            
            result += Maybe_Get_Divider(settings.portion.method_options.test_case.before_test_case);
            
            
            //add test comment
            auto settings2 = dont_do_this(settings);
            auto func_name = Shared_Printer::Derive_Function_Name(structure.name,Code_Type::GLOBAL,it,settings2);
            result += Test_Comment_Getter::Get(structure,func_name,j,settings.test_case_attributes);
            
            
            
            result += Get_Test_Signature(j,settings);
            result += Test_Body_Getter::Get(j);
            
            result += Maybe_Get_Divider(settings.portion.method_options.test_case.after_test_case);
        }
        
        result += Maybe_Get_Divider(settings.portion.method_options.test_case.after_test_group);
    }
    return result;
❱

◀private: static▶ std::string ☀Get_Test_Signature(Test_Case const& test_case, Cpp_Test_Export_Settings const& settings)❰
    
    //extract all the data into strings
    std::string test_name = Case_Modifier::As_Modified_Casing(settings.portion.method_options.test_case.test_name_casing,as_string(test_case.name.value));
    std::string test_tag = Case_Modifier::As_Modified_Casing(settings.portion.method_options.test_case.test_tag_casing,as_string(test_case.tag.value));
    std::string construct = settings.test_case_construct_word;
    
    //build signature
    std::string str;
    str += construct + "(";
    str += test_name;
    str += ", ";
    str += test_tag;
    str += ")";
    
    return str;
❱


//TODO: REMOVE THIS
◀private: static▶ C_Export_Settings ☀dont_do_this(Cpp_Test_Export_Settings const& settings)❰
    C_Export_Settings x;
    x.portion = settings.portion;
    x.general = settings.general;
    x.manipulations = settings.manipulations;
    return x;
❱

◀private: static▶ std::string ☀Maybe_Get_Divider(Divider_Settings const& divider)❰
    if (divider.print){
        return divider.divider +"\n\n";
    }
    return "";
❱
