class

❪fstream❫
❪iostream❫
❪"code/utilities/contributor/contributor"❫
⚯
❪"code/utilities/types/strings/transformers/appending/lib"❫
❪"code/utilities/types/converters/lib"❫
❪"code/utilities/types/strings/observers/other/lib"❫
❪"code/utilities/types/strings/transformers/casing/case_modifier"❫
❪"code/utilities/program/call/lib"❫
❪"code/utilities/filesystem/paths/lib"❫
❪"code/utilities/types/vectors/observers/lib"❫
❪"code/utilities/types/vectors/operators/lib"❫
❪"code/utilities/types/char/lib"❫
❪"code/utilities/linguistics/grammar/grammar_adjuster"❫
❪"code/utilities/linguistics/computer/file_extension/file_extension_getter"❫
❪"code/utilities/program/common_actions/exits/lib"❫
❪"code/utilities/filesystem/files/creating/lib"❫
⚞⚟

◀public: static▶ std::vector<std::string> ☀Export(Structure const& structure, std::vector<Contributor> const& contributors, Slidy_Settings const& settings)❰
   
   //Structure_Adjuster::Adjust(structure,settings.manipulations,Source_Language::Markdown);
   
  //created files
  std::vector<std::string> created;
  
  Create_Markdown_And_Slides(structure,contributors,settings,structure.name);
  
  //store files for reference
  std::string source_code_filename_md = markdown_file_name(structure.name);
  std::string source_code_filename_html = html_file_name(structure.name);
  created.emplace_back(source_code_filename_md);
  created.emplace_back(source_code_filename_html);
  
  return created;
❱

◀public: static▶ void ☀Create_Markdown_And_Slides(Structure const& structure, std::vector<Contributor> const& contributors, Slidy_Settings const& settings, std::string const& base_name)❰

  std::string source_code_filename_md = markdown_file_name(base_name);
  std::string source_code_filename_html = html_file_name(base_name);
  
  //create the markdown
  std::ofstream outfile(source_code_filename_md);
  //std::string str = Markdown_Str_Getter::Get(structure,contributors,settings.markdown);
  //Write_To_File(source_code_filename_md,str);
  outfile.close();
  
  //create the slides
  std::string style = "slidy";
  
  std::string command = settings.sl.program + " -t ";
  command += style;
  command += " -i -s ";
  command += source_code_filename_md;
  command += " -o ";
  command += source_code_filename_html;
  if (Unsuccessful_Run_Of_Command(command)){
      Exit_With_Error("failed to create html slides");
  }
  
❱

◀private: static▶ std::string ☀markdown_file_name(std::string const& base_name)❰
  return base_name + "." + File_Extension_Getter::Get_For_Interface(Source_Language::MARKDOWN);
❱
◀private: static▶ std::string ☀html_file_name(std::string const& base_name)❰
  return base_name + "." + File_Extension_Getter::Get_For_Interface(Source_Language::HTML);
❱
