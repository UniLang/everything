class
❪iostream❫
❪string❫
❪cstdlib❫
❪iostream❫
❪string❫
❪vector❫
❪set❫
❪"code/programs/transcompilers/hcp-compiler/official/program_options/program_options"❫
❪"code/utilities/program/common_actions/exits/lib"❫
❪"code/utilities/types/strings/observers/path/lib"❫
❪"code/utilities/filesystem/files/observers/lstat_wrap/lib"❫
❪"code/programs/transcompilers/hcp-compiler/official/class_structure"❫
❪"code/utilities/types/wstrings/transformers/other/lib"❫
⚯
❪"hcp_parser"❫
❪"hcp_compiler"❫
❪"code/utilities/types/converters/lib"❫
❪"code/utilities/types/strings/transformers/removing/lib"❫
⚞⚟


◀public: static▶ void ☀Possibly_Give_Bazel_Deps(Class_Structure const& c, Program_Options const& program_options)❰
    if (program_options.Print_Bazel_Deps()){
        auto headers = Get_All_Local_Headers(c);
        for (auto it: headers){
            std::cout << path_to_bazel(Remove_First_And_Last_Char(it)) << '\n';
        }
        exit(0);
    }
❱

◀private: static▶ std::string ☀path_to_bazel(std::string dep_lib)❰
    
    //settings
    std::string bazel_path_prefix = "//";
    char bazel_last_path_part_delim = ':';
    std::string path_delim = "/";
    
    //convert to path
    std::string p = bazel_path_prefix;
    auto it = dep_lib.find_last_of(path_delim);
    dep_lib[it] = bazel_last_path_part_delim;
    p+= dep_lib;
    
    return p;
❱

◀private: static▶ std::set<std::string> ☀Get_All_Local_Headers(Class_Structure const& c)❰
     std::set<std::string> result;
    for (auto j: c.Header_Includes()){
        if (j.second){
            if (Begins_And_Ends_With(j.first,L'"')){
                result.insert(as_string(j.first));
            }
        }
    }
    for (auto j: c.Source_Includes()){
        if (j.second){
            if (Begins_And_Ends_With(j.first,L'"')){
                result.insert(as_string(j.first));
            }
        }
    }

    return result;
❱
