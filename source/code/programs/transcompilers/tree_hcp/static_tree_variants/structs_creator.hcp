class
❪vector❫
❪string❫
❪unordered_map❫
❪fstream❫
❪"code/programs/transcompilers/hcp-compiler/programatic/data/function"❫
❪"code/utilities/data_structures/tree/generic/string_tree"❫
❪"code/utilities/data_structures/tree/generic/string_to_string_tree"❫
❪"code/utilities/types/strings/transformers/appending/lib"❫
❪"code/utilities/code/references/reference_lookup_map"❫
❪"code/utilities/formats/json/converters/json_file_io"❫
⚯
❪"code/programs/transcompilers/hcp-compiler/programatic/data/code"❫
❪"code/programs/transcompilers/hcp-compiler/programatic/code_getter"❫
❪"code/utilities/types/strings/transformers/wrap/lib"❫
❪"code/utilities/streams/filestreams/read_all/lib"❫
❪"code/utilities/types/strings/transformers/removing/lib"❫
❪"code/utilities/types/vectors/transformers/lib"❫
❪"code/utilities/types/strings/transformers/casing/case_modifier"❫
❪"code/utilities/types/tree/shortest_unique_name"❫
❪"code/utilities/types/tree/converters/tree_full_paths_getter"❫
❪"code/utilities/types/tree/children_path_names"❫
❪"code/utilities/types/strings/transformers/search_replace/lib"❫
❪"code/utilities/types/strings/observers/characteristic/is_cpp_keyword_checker"❫
❪"code/programs/transcompilers/tree_hcp/shared/path_naming"❫
❪"code/programs/transcompilers/shared/json_gen"❫
⚞⚟

◀public: static▶ void ☀Create(std::string const& tree_file, std::string const& reference_file, std::string const& path_without_extension)❰
    
    std::cout << tree_file << std::endl;
    std::cout << reference_file << std::endl;
    
    //create string tree
    auto all_text = Read_Entire_File_Into_String(tree_file);
    auto str_tree = String_To_String_Tree::Convert(all_text);
    
    //create references
    Reference_Lookup_Map references;
    Json_File_Io::Read_Json_From_File(references,reference_file);
    
    //create source files
    Create_Header(str_tree,references,path_without_extension);
    Create_Source(str_tree,references,path_without_extension);
❱

◀private: static▶ void ☀Create_Header(String_Tree const& str_tree, Reference_Lookup_Map const& references, std::string const& path_without_extension)❰
    std::string filename = path_without_extension + ".hpp";
    std::ofstream outfile(filename);
    outfile << Get_All_Header_Includes();
    outfile << std::endl;
    
    outfile << "namespace model {\n";
    
    
    
    outfile << "} //namespace: model\n";
❱

◀private: static▶ std::string ☀Get_All_Header_Includes()❰
    std::string x;
    x += "#pragma once\n";
    x += "#include <vector>\n";
    x += "#include <string>\n";
    x += "#include <variant>\n";
    x += "#include " + As_Wrapped_In_Double_Quotes("src/tree.hh") + "\n";
    x += Json_Gen::all_nlohmann_serialization_headers() + "\n";
    return x;
❱


◀private: static▶ void ☀Create_Source(String_Tree const& str_tree, Reference_Lookup_Map const& references, std::string const& path_without_extension)❰
    std::ofstream outfile(path_without_extension + ".cpp");
    outfile << "#include ";
    outfile << '"';
    outfile << path_without_extension << ".hpp";
    outfile << '"';
    outfile << std::endl;
    
    
    outfile.close();
❱
