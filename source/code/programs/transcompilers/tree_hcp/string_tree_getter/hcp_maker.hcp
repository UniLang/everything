class
❪vector❫
❪string❫
❪unordered_map❫
❪fstream❫
❪"code/programs/transcompilers/hcp-compiler/programatic/data/function"❫
❪"code/programs/transcompilers/hcp-compiler/programatic/data/headers"❫
⚯
❪"code/programs/transcompilers/hcp-compiler/programatic/data/code"❫
❪"code/programs/transcompilers/hcp-compiler/programatic/code_getter"❫
❪"code/utilities/types/strings/transformers/wrap/lib"❫
❪"code/utilities/streams/filestreams/read_all/lib"❫
❪"code/utilities/types/strings/transformers/removing/lib"❫
❪"code/utilities/types/vectors/transformers/lib"❫
⚞⚟

◀public: static▶ void ☀Create(std::string const& input_file, std::string const& output_file)❰


    Code code;
    code.headers = Get_Headers(input_file);
    code.functions.emplace_back(Get_Function(input_file));
    auto file_content = Code_Getter::Get(code);
    
    Write_Output(output_file,file_content);
❱

◀private: static▶ Headers ☀Get_Headers(std::string const& input_file)❰

    Headers x;
    x.public_headers.emplace_back("string");
    x.public_headers.emplace_back(As_Wrapped_In_Double_Quotes("code/utilities/data_structures/tree/generic/string_tree"));
    x.public_headers.emplace_back(As_Wrapped_In_Double_Quotes("code/utilities/data_structures/tree/generic/string_to_string_tree"));
    x.public_headers.emplace_back(As_Wrapped_In_Double_Quotes("code/utilities/types/strings/transformers/appending/lib"));
    return x;
❱

◀private: static▶ Function ☀Get_Function(std::string const& input_file)❰
    Function x;
    x.name = "Get";
    x.return_val = "String_Tree";
    x.body = Get_Body(input_file);
    return x;
❱

◀private: static▶ std::string ☀Get_Body(std::string const& input_file)❰
    std::string x;
    
    x += "    std::string x;\n";
    auto lines = Read_Each_Line_Of_File_Into_Vector(input_file);
    
    //clean up
    Remove_Whitespace_Lines(lines);
    Trim_Lines(lines);
    
    for (auto const& it: lines){
        x += "    Append_With_Newline(x," + As_Wrapped_In_Double_Quotes(it) + ");\n";
    }
    
    
    x += "    return String_To_String_Tree::Convert(x);\n";
    return x;
❱

◀private: static▶ void ☀Write_Output(std::string const& output_file, std::wstring const& file_content)❰
    std::wofstream outfile(output_file);
    outfile << file_content;
    outfile.close();
❱