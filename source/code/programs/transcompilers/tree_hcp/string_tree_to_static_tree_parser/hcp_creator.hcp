class
❪vector❫
❪string❫
❪unordered_map❫
❪unordered_set❫
❪fstream❫
❪"code/programs/transcompilers/hcp-compiler/programatic/data/function"❫
❪"code/programs/transcompilers/hcp-compiler/programatic/data/headers"❫
❪"code/utilities/data_structures/tree/generic/string_tree"❫
❪"code/utilities/data_structures/tree/generic/string_to_string_tree"❫
❪"code/utilities/types/strings/transformers/appending/lib"❫
⚯
❪"code/programs/transcompilers/hcp-compiler/programatic/data/code"❫
❪"code/programs/transcompilers/hcp-compiler/programatic/code_getter"❫
❪"code/utilities/types/strings/transformers/wrap/lib"❫
❪"code/utilities/streams/filestreams/read_all/lib"❫
❪"code/utilities/types/strings/transformers/removing/lib"❫
❪"code/utilities/types/vectors/transformers/lib"❫
❪"code/utilities/types/strings/transformers/casing/case_modifier"❫
❪"code/utilities/types/tree/shortest_unique_name"❫
❪"code/utilities/types/tree/converters/tree_full_paths_getter"❫
❪"code/utilities/types/tree/children_path_names"❫
❪"code/utilities/types/strings/transformers/search_replace/lib"❫
❪"code/utilities/types/strings/observers/characteristic/is_cpp_keyword_checker"❫
❪"code/utilities/types/strings/observers/path/lib"❫
❪"code/utilities/types/tree/first_full_path_name"❫
❪"code/programs/transcompilers/tree_hcp/shared/path_naming"❫
⚞⚟

◀public: static▶ void ☀Create(std::string const& input_file, std::string const& output_file)❰

    auto all_text = Read_Entire_File_Into_String(input_file);
    auto str_tree = String_To_String_Tree::Convert(all_text);
    auto all_children = Tree_Full_Paths_Getter::Get_All_Child_Paths(str_tree);
    

    Code code;
    code.headers = Get_Headers();
    code.functions.emplace_back(Get_Function(str_tree,all_children));
    
    auto file_content = Code_Getter::Get(code);
    
    Write_Output(output_file,file_content);
    
❱

◀private: static▶ Headers ☀Get_Headers()❰

    Headers x;
    x.public_headers.emplace_back("string");
    x.public_headers.emplace_back(As_Wrapped_In_Double_Quotes("code/utilities/data_structures/tree/generic/string_tree"));
    x.public_headers.emplace_back(As_Wrapped_In_Double_Quotes("code/utilities/data_structures/tree/generic/string_to_string_tree"));
    x.public_headers.emplace_back(As_Wrapped_In_Double_Quotes("code/utilities/data_structures/tree/generic/tokens/tree_token"));
    x.public_headers.emplace_back(As_Wrapped_In_Double_Quotes("code/utilities/types/strings/transformers/appending/lib"));
    x.public_headers.emplace_back(As_Wrapped_In_Double_Quotes("code/utilities/types/vectors/observers/lib"));
    
    //TODO: make generic
    x.public_headers.emplace_back(As_Wrapped_In_Double_Quotes("code/utilities/code/concept_static_tree_structs"));
    return x;
❱

◀private: static▶ Function ☀Get_Function(String_Tree const& tree, std::unordered_set<std::string> const& all_children)❰
    Function x;
    x.name = "Parse";
    x.arguments.emplace_back("std::vector<Tree_Token> const& tokens");
    x.return_val = Root_Type(tree);
    x.body = Get_Body(tree,all_children);
    return x;
❱

◀private: static▶ std::string ☀Get_Body(String_Tree const& tree, std::unordered_set<std::string> const& all_children)❰
    std::string x;
    
    x += Root_Type(tree) + " " + Root_Identifier(tree) + ";\n";
    
    x += Classic_Index_Container_For_Start("tokens") +'\n';
    x += Append_Root_Logic(tree,all_children);
    x += "}\n";

    
    x += "return " + Root_Identifier(tree) + ";\n";
    return x;
❱

◀private: static▶ std::string ☀Append_Root_Logic(String_Tree const& tree, std::unordered_set<std::string> const& all_children)❰
    std::string x;
    auto all_paths = Tree_Full_Paths_Getter::Get_All_Paths_Ordered(tree);
    x += "if(false){}\n";
    for (auto const& it: all_paths){
        x += "else if (tokens[i].full_path == \"" + it + "\"){\n";
            auto path_combos = All_Paths_Of_Path(it);
            x += Map_Over(tree,all_children,path_combos);
            x += "\n";
        x += "}\n";
    }
    return x;
❱

◀private: static▶ std::string ☀Map_Over(String_Tree const& tree, std::unordered_set<std::string> const& all_children, std::vector<std::string> const& path_combos)❰
    std::string x;
    
    //nothing to map
    if (path_combos.size() <= 1){
        return x;
    }
    
    bool is_child_path = all_children.find(path_combos[path_combos.size()-1]) != all_children.end();
    
    if (is_child_path){
        x += "auto& x = ";
    }
    
    x += "Add_Modifiable_Last_Element(";
    
    for (size_t i = 2; i < path_combos.size(); ++i){
        x += "Safe_Modifiable_Last_Element(";
    }
    
    auto root_id = Path_Naming::Get_Struct_Identifier(tree,path_combos[0]);
    x += root_id;
    
    for (size_t i = 1; i < path_combos.size(); ++i){
        x += "." + Path_Naming::Get_Struct_Identifier(tree,path_combos[i]);
        x += ")";
    }
    x += ";\n";
    
    //fill with values if its a child
    if (is_child_path){
        x += "x.value = tokens[i].value;\n";
        x += "x.tree_id = i;\n";
    };
    
    
    return x;
❱

◀private: static▶ std::string ☀Classic_Index_Container_For_Start(std::string const& container_name)❰
    std::string x;
    x += "for (size_t i = 0; i < " + container_name + ".size(); ++i){";
    return x;
❱

◀private: static▶ std::string ☀Root_Type(String_Tree const& tree)❰
    auto path = First_Full_Path_Name::Get(tree);
    return std::string("model::") + Path_Naming::Get_Struct_Typename(tree,path);
❱
◀private: static▶ std::string ☀Root_Identifier(String_Tree const& tree)❰
    auto path = First_Full_Path_Name::Get(tree);
    return Path_Naming::Get_Struct_Identifier(tree,path);
❱

◀private: static▶ void ☀Write_Output(std::string const& output_file, std::wstring const& file_content)❰
    std::wofstream outfile(output_file);
    outfile << file_content;
    outfile.close();
❱