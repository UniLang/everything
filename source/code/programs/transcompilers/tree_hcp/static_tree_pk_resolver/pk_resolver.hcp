class
❪vector❫
❪string❫
❪unordered_map❫
❪fstream❫
❪"code/programs/transcompilers/hcp-compiler/programatic/data/function"❫
❪"code/utilities/data_structures/tree/generic/string_tree"❫
❪"code/utilities/data_structures/tree/generic/string_to_string_tree"❫
❪"code/utilities/types/strings/transformers/appending/lib"❫
❪"code/utilities/code/references/reference_lookup_map"❫
❪"code/utilities/formats/json/converters/json_file_io"❫
⚯
❪"code/programs/transcompilers/hcp-compiler/programatic/data/code"❫
❪"code/programs/transcompilers/hcp-compiler/programatic/code_getter"❫
❪"code/utilities/types/strings/transformers/wrap/lib"❫
❪"code/utilities/streams/filestreams/read_all/lib"❫
❪"code/utilities/types/strings/transformers/removing/lib"❫
❪"code/utilities/types/vectors/transformers/lib"❫
❪"code/utilities/types/strings/transformers/casing/case_modifier"❫
❪"code/utilities/types/tree/shortest_unique_name"❫
❪"code/utilities/types/tree/converters/tree_full_paths_getter"❫
❪"code/utilities/types/tree/children_path_names"❫
❪"code/utilities/types/strings/transformers/search_replace/lib"❫
❪"code/utilities/types/strings/observers/characteristic/is_cpp_keyword_checker"❫
❪"code/programs/transcompilers/tree_hcp/shared/path_naming"❫
❪"code/programs/transcompilers/shared/json_gen"❫
❪"code/utilities/types/multimap/lib"❫
❪"code/utilities/output/printers/lib"❫
❪"code/utilities/types/general/lib"❫
❪"code/utilities/types/vectors/transformers/lib"❫
❪"code/utilities/types/tree/all_paths"❫
⚞⚟

◀public: static▶ void ☀Create(std::string const& tree_file, std::string const& reference_file, std::string const& path_without_extension)❰
    
    
    //create string tree
    auto all_text = Read_Entire_File_Into_String(tree_file);
    auto str_tree = String_To_String_Tree::Convert(all_text);
    
    //create references
    std::map<std::string,std::vector<std::string>> temp;
    Json_File_Io::Read_Json_From_File(temp,reference_file);
    Reference_Lookup_Map references;
    references.map = Convert_To_Mulimap(temp);
    
    //create source files
    Create_Header(str_tree,references,path_without_extension);
    Create_Source(str_tree,references,path_without_extension);
❱

◀private: static▶ void ☀Create_Header(String_Tree const& str_tree, Reference_Lookup_Map const& references, std::string const& path_without_extension)❰
    std::string filename = path_without_extension + ".hpp";
    std::ofstream outfile(filename);
    outfile << Get_All_Header_Includes();
    outfile << std::endl;
    
    
    auto m = Convert_To_Map(references.map);
    
    
    for (auto v_type: m){
        outfile << Create_Conversion_Function_Decl(str_tree, v_type.first, v_type.second);
    }
❱

◀private: static▶ void ☀Create_Source(String_Tree const& str_tree, Reference_Lookup_Map const& references, std::string const& path_without_extension)❰
    std::ofstream outfile(path_without_extension + ".cpp");
    outfile << "#include ";
    outfile << '"';
    outfile << path_without_extension << ".hpp";
    outfile << '"';
    outfile << std::endl;
    
    auto m = Convert_To_Map(references.map);
    for (auto v_type: m){
        outfile << Create_Conversion_Function_Def(str_tree, v_type.first, v_type.second);
    }
    
    
    outfile.close();
❱


◀private: static▶ std::string ☀Function_Interface(String_Tree const& str_tree, std::string const& pk, std::vector<std::string> const& fks)❰
    std::string str;
    
    //return type
    str += "model_variants::";
    str += Path_Naming::Get_Struct_Typename(str_tree,pk);
    
    //function and argument list
    str += " Resolve(";
    str += "model::Module const& structure";
    str += ",";
    str += "model::";
    str += Path_Naming::Get_Struct_Typename(str_tree,pk);
    str += " const& pk";
    str += ")";
    
    return str;
❱

◀private: static▶ std::string ☀Create_Conversion_Function_Decl(String_Tree const& str_tree, std::string const& pk, std::vector<std::string> const& fks)❰
    std::string str;
    
    //return type
    str += Function_Interface(str_tree,pk,fks);
    str += ";\n";
    
    return str;
❱

◀private: static▶ std::string ☀Create_Conversion_Function_Def(String_Tree const& str_tree, std::string const& pk, std::vector<std::string> const& fks)❰
    std::string str;
    
    str += Function_Interface(str_tree,pk,fks);
    str += "{\n";
        str += "model_variants::";
        str += Path_Naming::Get_Struct_Typename(str_tree,pk);
        str += " result;\n";
        str += Pk_Lookup_Implementation(str_tree,pk,fks);
        str += "return result;\n";
    str += "}\n";
    return str;
❱

◀private: static▶ std::string ☀Pk_Lookup_Implementation(String_Tree const& str_tree, std::string const& pk, std::vector<std::string> const& fks)❰
    std::string str;
    
    for (auto const& it: fks){
        str += Individual_Pk_Lookup_Implementation(str_tree,pk,it);
    }
    
    //add the "didn't find it" implementation
    
    return str;
❱
◀private: static▶ std::string ☀Individual_Pk_Lookup_Implementation(String_Tree const& str_tree, std::string const& pk, std::string const& fk)❰
    std::string str;
    
    int loop_counter = 0;
    std::string current_loop_name = "structure";
    
    auto fk_breakdown = All_Paths::Get(fk);
    
    //don't need code/
    fk_breakdown.erase(fk_breakdown.begin());
    
    //don't need code/module/
    fk_breakdown.erase(fk_breakdown.begin());
    
    
    for (auto const& it: fk_breakdown){
        str += "for (auto const& a" + std::to_string(loop_counter) + " : " + current_loop_name + "." + Path_Naming::Get_Struct_Identifier(str_tree,it) + "){\n";
        
        
        
        //update for next time
        current_loop_name = "a" + std::to_string(loop_counter);
        loop_counter++;
    }
    
    
    //check if we found it
    str += "\tif ( a" + std::to_string(loop_counter-1) + ".value == pk.value){\n";
    str += "\t//it's a match\n";
    str += "\tresult = a" + std::to_string(loop_counter-1) + ";\n";
    str += "\treturn result";
    str += ";\n";
    str += "\t}\n;";
    
    
    //end for loop
    str += "\n";
    for (auto const& it: fk_breakdown){
        str += "}";
    }
    
    return str;
❱


◀private: static▶ std::string ☀Get_All_Header_Includes()❰
    std::string x;
    x += "#pragma once\n";
    
    //add system headers
    std::vector<std::string> sys_headers;
    sys_headers.emplace_back("vector");
    sys_headers.emplace_back("string");
    sys_headers.emplace_back("variant");
    x += Include_Statments_For_System_Header_Names(sys_headers);
    
    //add local headers
    std::vector<std::string> local_headers;
    local_headers.emplace_back("code/utilities/code/concept_static_tree_structs.hpp");
    local_headers.emplace_back("code/utilities/code/concept_static_tree_variants.hpp");
    local_headers.emplace_back("src/tree.hh");
    x += Include_Statments_For_Local_Header_Names(local_headers);
    
    //add other headers
    x += Json_Gen::all_nlohmann_serialization_headers() + "\n";
    
    return x;
❱

◀private: static▶ std::string ☀Include_Statments_For_System_Header_Names(std::vector<std::string> const& names)❰
    std::string str;
    for (auto const& it: names){
        str += "#include ";
        str += "<";
        str += it;
        str += ">\n";
    }
    return str;
❱

◀private: static▶ std::string ☀Include_Statments_For_Local_Header_Names(std::vector<std::string> const& names)❰
    std::string str;
    for (auto const& it: names){
        str += "#include ";
        str += As_Wrapped_In_Double_Quotes(it);
        str += "\n";
    }
    return str;
❱
