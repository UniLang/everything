class
❪vector❫
❪string❫
❪unordered_map❫
❪fstream❫
❪"code/programs/transcompilers/hcp-compiler/programatic/data/function"❫
❪"code/utilities/data_structures/tree/generic/string_tree"❫
❪"code/utilities/data_structures/tree/generic/string_to_string_tree"❫
❪"code/utilities/types/strings/transformers/appending/lib"❫
⚯
❪"code/programs/transcompilers/hcp-compiler/programatic/data/code"❫
❪"code/programs/transcompilers/hcp-compiler/programatic/code_getter"❫
❪"code/utilities/types/strings/transformers/wrap/lib"❫
❪"code/utilities/streams/filestreams/read_all/lib"❫
❪"code/utilities/types/strings/transformers/removing/lib"❫
❪"code/utilities/types/vectors/transformers/lib"❫
❪"code/utilities/types/strings/transformers/casing/case_modifier"❫
❪"code/utilities/types/tree/shortest_unique_name"❫
❪"code/utilities/types/tree/converters/tree_full_paths_getter"❫
❪"code/utilities/types/tree/children_path_names"❫
❪"code/utilities/types/strings/transformers/search_replace/lib"❫
❪"code/utilities/types/strings/observers/characteristic/is_cpp_keyword_checker"❫
⚞⚟

◀public: static▶ std::string ☀Get_Struct_Typename(String_Tree const& str_tree, std::string const& full_path)❰
    auto short_path = Shortest_Unique_Name::Get(str_tree,full_path);
    auto name = replace_fwd_slash_with_space(short_path);
    auto struct_name = Case_Modifier::As_Modified_Casing(Case_Format_Style::CAPS_PUSHED,name);
    return struct_name;
❱
◀public: static▶ std::string ☀Get_Struct_Identifier(String_Tree const& str_tree, std::string const& full_path)❰

    //we don't need to make the identifier unique in the same way that we did the typename

    auto parts = Split_Into_Parts_From_Fwd_Slash(full_path);
    auto last_part = parts[parts.size()-1];
    auto identifier = Case_Modifier::As_Modified_Casing(Case_Format_Style::SNAKE_CASE,last_part);
    Adjust_To_Avoid_Cpp_Keyword_Conflict(identifier);
    return identifier;
❱

◀private: static▶ void ☀Adjust_To_Avoid_Cpp_Keyword_Conflict(std::string & str)❰
    if (Is_Cpp_Keyword_Checker::Check(str)){
        str += "_";
    }
❱