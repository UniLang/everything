class
❪iostream❫
❪string❫
❪set❫
❪map❫
❪"code/programs/gcalviz/exporters/data/node_edge_data"❫
❪"code/programs/gcalviz/exporters/data/edge_data"❫
❪"code/utilities/time/date/rfc333_datetime_to_epoch_converter"❫
❪"code/utilities/time/date/rfc333_datetime_within_range_checker"❫
❪"code/utilities/web/endpoints/gcal/data/gcal_sorted_events"❫
❪"code/utilities/data_structures/counters/unique_counter/unique_counter"❫
⚯
❪"code/utilities/types/strings/transformers/search_replace/lib"❫
❪"code/utilities/filesystem/files/creating/lib"❫
❪"code/utilities/formats/json/converters/lib"❫
❪"code/utilities/types/strings/transformers/appending/lib"❫
❪"code/utilities/filesystem/paths/lib"❫
❪"code/utilities/types/strings/observers/comparing/lib"❫
❪"code/utilities/types/strings/observers/other/lib"❫
❪"code/programs/gcalviz/exporters/formatters/gexf_formatter"❫
❪"code/programs/gcalviz/exporters/formatters/graphml_formatter"❫
❪"code/utilities/formats/json/attribute_check/json_attribute_check_settings"❫
❪"code/utilities/formats/json/attribute_check/json_attribute_checker"❫
❪"code/utilities/formats/json/converters/json_file_io"❫
⚞⚟



◀public: static▶ void ☀CreateGraphML(std::string const& sorted_room_events_file, std::string const& sorted_room_event_connections_file, std::string const& gexf_file, std::string const& user_info_path) ❰

        //read in data
        Gcal_Sorted_Events pit_rooms;
        std::cout << "loading..." << std::endl;
        Json_File_Io::Read_Json_From_File(pit_rooms,sorted_room_events_file);
        
        
        auto range = Analyzed_Time_Range();
        
        
        auto node_edge_data = Extract_Node_Edge_Data(pit_rooms,range);
        
        
        //load user data
        std::map<std::string,nlohmann::json> user_data;
        std::cout << "loading user data..." << std::endl;
        Json_File_Io::Read_Json_From_File(user_data,user_info_path);
        
        auto file_results = Gexf_Formatter::Format(node_edge_data,user_data);
        Write_To_File(gexf_file,file_results);
❱

◀private: static▶ Rfc333_Datetime_Range ☀Analyzed_Time_Range()❰
        Rfc333_Datetime_Range range;
        range.start = "2019-06-1T08:00:00-07:00";
        //range.end = "2019-07-4T08:00:00-07:00";
        range.end = "2019-07-31T08:00:00-07:00";
        return range;
❱


◀private: static▶ Node_Edge_Data ☀Extract_Node_Edge_Data(Gcal_Sorted_Events const& rooms, Rfc333_Datetime_Range const& range)❰
    Node_Edge_Data result;
    
    for (auto const& y: rooms.events){
        
        std::string event_time = y["originalStartTime"]["dateTime"];
        if (Rfc333_Datetime_Within_Range_Checker::Is_Within(event_time,range)){
            Add_Event_Data(result,y);
        }
    }
    
    return result;
❱

◀private: static▶ void ☀Add_Event_Data(Node_Edge_Data & result, nlohmann::json const& y)❰

    Add_Undirected_Nodes_And_Edges_From_Event_Attendance(result,y);
    //Add_Directed_Nodes_And_Edges_From_Event_Attendance(result,y);
❱

◀private: static▶ void ☀Add_Undirected_Nodes_And_Edges_From_Event_Attendance(Node_Edge_Data & result, nlohmann::json const& y)❰

    for (size_t i = 0; i < y["attendees"].size(); ++i){
        
        std::string str = y["attendees"][i]["email"];
        if (Valid_Node_Name(str)){
            result.nodes.insert(str);
            for (size_t j = i+1; j < y["attendees"].size(); ++j){
                
                Connection connection;
                connection.source = y["attendees"][i]["email"];
                connection.target = y["attendees"][j]["email"];
                
                Event_Interval interval;
                interval.start = y["originalStartTime"]["dateTime"];
                interval.end = y["end"]["dateTime"];
                
                
                Add_Undirected_Edge(result.edges,connection,interval);
            }
        }
    }
❱

◀private: static▶ void ☀Add_Directed_Nodes_And_Edges_From_Event_Attendance(Node_Edge_Data & result, nlohmann::json const& y)❰

    Json_Attribute_Check_Settings check_settings;
        
    std::string creator = "";
    std::string organizer = "";
    
    check_settings.attributes = {{"creator"}};
    if (Json_Attribute_Checker::Has_Attributes(y,check_settings)){
        creator = y["creator"]["email"];
    }
    
    check_settings.attributes = {{"organizer"}};
    if (Json_Attribute_Checker::Has_Attributes(y,check_settings)){
        organizer = y["organizer"]["email"];
    }
    
    if (creator.empty() && organizer.empty()){
        return;
    }
    
    //for some reason google calendar has meta information for both creator and organizer
    //these seem like the same thing to me.  We will extract both (I'm not sure if they are both always present or not)
    //and warn when they are different
    if (creator != organizer){
        //std::cout << "different " << creator << " != " << organizer << std::endl;
    }
    else{
        //std::cout << "same " << creator << " == " << organizer << std::endl;
    }
    
    std::string event_starter = organizer;
    if (Valid_Node_Name(event_starter)){
        result.nodes.insert(event_starter);
        for (size_t i = 0; i < y["attendees"].size(); ++i){
            std::string attendee = y["attendees"][i]["email"];
            if (Valid_Node_Name(attendee)){
                
                result.nodes.insert(attendee);
                
                Connection connection;
                connection.source = attendee;
                connection.target = event_starter;
                
                Event_Interval interval;
                interval.start = y["originalStartTime"]["dateTime"];
                interval.end = y["end"]["dateTime"];
                
                
                Add_Directed_Edge(result.edges,connection,interval);
            }
        }
    }
    
❱


◀private: static▶ void ☀Add_Undirected_Edge(Unique_Counter<std::string> & edges, Connection connection, Event_Interval const& interval)❰
    
    if (!Valid_Connection(connection)){
        return;
    }
    
    //since the connection is undirected, we should force a source/destination order before storing
    //this decision is to ensure we don't count undirected A-B as a different connection than undirected B-A.
    if (Case_Insensitive_String_Compare(connection.source,connection.target)){
        std::swap(connection.source,connection.target);
    }

    Edge_Data edge;
    edge.connection = connection;
    edge.interval = interval;
    edge.connection.type = Edge_Type::UNDIRECTED;
    edges.Add(Type_To_Json_String::As_Minified_JSON_String(edge));
❱

◀private: static▶ void ☀Add_Directed_Edge(Unique_Counter<std::string> & edges, Connection connection, Event_Interval const& interval)❰
    
    if (!Valid_Connection(connection)){
        return;
    }

    Edge_Data edge;
    edge.connection = connection;
    edge.interval = interval;
    edge.connection.type = Edge_Type::DIRECTED;
    edges.Add(Type_To_Json_String::As_Minified_JSON_String(edge));
❱



◀private: static▶ bool ☀Valid_Connection(Connection const& connection)❰

    //make sure we aren't adding rooms and other miscellaneous node data
    //(things that might show up that aren't people)
    if (!Valid_Node_Name(connection.source)){
        return false;
    }
    if (!Valid_Node_Name(connection.target)){
        return false;
    }
    
    //you can't connect with yourself (in the context of this analysis)
    if (connection.source == connection.target){
        return false;
    }
    
    return true;
❱


◀private: static▶ bool ☀Valid_Node_Name(std::string const& name)❰
    if (Begins_With(name,"uber.com_")){
        return false;
    }
    return true;
❱

◀private: static▶ std::string ☀Adjust_Node_Name(std::string str)❰
    //I had a hunch that weird emails might break gephi or something downstream
    //leaving this function in case I want to adjust the unique IDs (emails) of nodes before they are inserted
    return str;
❱