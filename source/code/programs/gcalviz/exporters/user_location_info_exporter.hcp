class
❪iostream❫
❪string❫
❪set❫
❪utility❫
⚯
❪"code/utilities/web/endpoints/gcal/data/gcal_sorted_events"❫
❪"code/utilities/types/strings/transformers/search_replace/lib"❫
❪"code/utilities/filesystem/files/creating/lib"❫
❪"code/utilities/formats/json/converters/lib"❫
❪"code/utilities/time/date/rfc333_datetime_to_epoch_converter"❫
❪"code/utilities/time/date/rfc333_datetime_within_range_checker"❫
❪"code/utilities/data_structures/counters/unique_counter/unique_counter"❫
❪"code/utilities/types/strings/transformers/appending/lib"❫
❪"code/utilities/filesystem/paths/lib"❫
❪"code/utilities/types/strings/observers/comparing/lib"❫
❪"code/utilities/types/strings/observers/other/lib"❫
❪"code/utilities/web/endpoints/gcal/data/gcal_rooms"❫
❪"code/utilities/formats/json/attribute_check/json_attribute_check_settings"❫
❪"code/utilities/formats/json/attribute_check/json_attribute_checker"❫
❪"code/utilities/program/common_actions/signals/lib"❫
❪pybind11/embed.h❫
❪"code/utilities/web/automate/navigation/browser_navigator"❫
❪"code/utilities/web/automate/browser/browser_settings"❫
❪"code/utilities/web/automate/browser/browser_creator"❫
❪"code/utilities/web/automate/browser/default_browser_settings_getter"❫
⚞⚟

//This is to scrape desk locations
//TODO: implement
◀public: static▶ void ☀Export_Info(std::string const& email_file, std::string const& whober_file) ❰

        //read in data
        //std::set<std::string> emails;
        //std::cout << "loading..." << std::endl;
        //Read_Json_From_File(emails,email_file);
        
        //make sure we have a python environment going for the duration of the program (RAII)
        //enable signal handle so we can ctrl+C exit
        signal_SIGINT_to_exit();
        pybind11::scoped_interpreter py_guard{};
        
        //create a selenium browser
        Browser_Settings b_settings = Default_Browser_Settings_Getter::Get();
        b_settings.headless = false;
        b_settings.start_maximized = false;
        Browser_Creator::Create(b_settings);
        
        
        
        //loop over each email, and try to bind it to user data
        // std::map<std::string,nlohmann::json> user_data;
        // int count = 1;
        // for (auto const& email: emails){
        //     std::cout << count << " / " << emails.size() << " ";
        //     ++count;
            
        //     //add entry if we can find it
        //     std::string url = "https://whober.uberinternal.com/";
        //     auto source = Browser_Navigator::Get_React_State_Of_Page(b_settings,url + email);
        //     if (source){
        //         source->erase("badges");
        //         user_data.insert(std::make_pair(email,*source));
        //         std::cout << "found: " << email << std::endl;
        //     }
        //     else{
        //         std::cout << "not found: " << email << std::endl;
        //     }
        // }
        
        // std::cout << "amount: " << user_data.size() << std::endl;
        // Write_Json_To_File(user_data,whober_file);
        
❱