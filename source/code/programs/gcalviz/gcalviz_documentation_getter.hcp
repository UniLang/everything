class
❪iostream❫
❪fstream❫
❪string❫
❪"code/utilities/documentation/common_documentation_getter"❫
⚯
❪"code/utilities/types/converters/lib"❫
❪"code/utilities/formats/json/converters/lib"❫
⚞⚟


    //https://gephi.org/
    
    //automating gephi:
    //https://gephi.org/toolkit/
    //https://github.com/kwonoh/gephi-cli
    
    //socnetv
    
    
    //Calculating The Betweenness Centrality In Gephi
    //tells us the importance of an individual as an intermediator
    //https://www.youtube.com/watch?v=PuWNYB0u_gM
    
    //Identifying Influencers Using Pagerank Analysis.
    //https://www.youtube.com/watch?v=OzyPZwSisZ0
    
    //centrality - a general term for how close a node is relative to the network as a whole
    //degree = the number of links connected to a node (two types of directed networks)
    //closeness = average length of the shortest path between the node and al    
    
    //centrality - a general term for how close a nl other nodes in the graph
    //betweenness = based on the number of times a node is crossed by each of the least cost paths (shortest route between nodes)
    
    //clustering
    //clustering coefficient = compares the number of connections to other nodes
    //compared to the potential number of connections to the other nodes in the group
    //a clustering coefficient of 1 indicates a clique; a set where each node is connected all others in the set
    
    
    //gephi require Java 8.  Anything higher seems to not work
    //sudo apt install openjdk-8-jdk-headless
    //sudo apt install oracle-java8-set-default
    //worked for me when
    //javac -version
    //javac 1.8.0_222

◀public: static▶ Structure ☀Get() ❰
    Structure s;
    s.name = "gcalviz";
    s.literature.paragraphs.emplace_back(Title());
    s.literature.paragraphs.emplace_back(Introduction());
    s.literature.paragraphs.emplace_back(Common_Documentation_Getter::Common_Installation_Instructions("gcalviz"));
    s.literature.paragraphs.emplace_back(Setting_Up_Your_Calendar());
    s.literature.paragraphs.emplace_back(Types_Of_Analysis());
        s.literature.paragraphs.emplace_back(Layout());
        s.literature.paragraphs.emplace_back(Degree());
    //s.literature.paragraphs.emplace_back(Presentation_Commentary());
    return s;
❱


◀private: static▶ Paragraph ☀Title() ❰
    Paragraph p;
    p.depth.value = as_wstring("0");
    p.title.value = as_wstring("Visualize your google calendar as a social network");
    
    Sentence s;
    Sentence_Image img;
    img.alternative_text.value = as_wstring("Gcalviz");
    s.images.emplace_back(img);
    p.sentences.emplace_back(s);
    return p;
❱

◀private: static▶ Paragraph ☀Introduction() ❰
    Paragraph p;
    p.depth.value = as_wstring("0");
    p.title.value = as_wstring("Introduction");
    
    Add_Sentence(p,"employee interactions within an organization contribute and shape that organization's social network");
    Add_Sentence(p,"these interactions occur through many different channels; email, slack, and face-to-face to name a few");
    Add_Sentence(p,"one of the communication channels calnet is interested in are scheduled meetings");
    Add_Sentence(p,"google calendar is often used to schedule meetings");
    Add_Sentence(p,"each individual in google calendar has a personal calendar often public to others");
    Add_Sentence(p,"the events that individuals attend may or may not be public to others");
    Add_Sentence(p,"often times the location where people meet (conference rooms) are also calendars");
    Add_Sentence(p,"if these rooms can be scheduled by other people often the events that occur in these rooms are public");
    Add_Sentence(p,"by traversing and scraping room calendars, we can construct a graph of iterations between participants of meetings");
    Add_Sentence_With_Image(p,"doing so may gleam insight into the inter-workings of an organization's social structure","img/network_example.png");
    return p;
❱

◀private: static▶ Paragraph ☀Setting_Up_Your_Calendar() ❰
    Paragraph p;
    p.depth.value = as_wstring("0");
    p.title.value = as_wstring("Setting up your calendar");
    
    Add_Sentence(p,"We'll assume you have access to various calendars in which you want to turn into a social network");
    Add_Sentence(p,"you can use any number of calendars to form your network");
    Add_Sentence(p,"In order for the scraper to detect these calendars however, you have to explicitly add yourself as a subscriber");
    Add_Sentence(p,"This can be done by using the \"other calendars\" panel found on the left side of the google calendar app and selecting various calendars to subscribe to");
    Add_Sentence(p,"the calendars do not have to remain visible for the analysis");
    Add_Sentence(p,"they only need to be listed in your \"other calendars\" side panel");
    Add_Sentence_With_Image(p,"Be careful adding too many calendars at one time as you will freeze google calendar and will be unable to hide calendars to unfreeze it","img/crowded_cal.png");
    Add_Sentence(p,"You should instead add some calendars, turn off their visibility, and repeat");
    return p;
❱

◀private: static▶ Paragraph ☀Types_Of_Analysis() ❰
    Paragraph p;
    p.depth.value = as_wstring("0");
    p.title.value = as_wstring("Types Of Analysis");
    
    Add_Sentence(p,"Here we show some of the analysis you can perform once the data is imported");
    
    return p;
❱

◀private: static▶ Paragraph ☀Layout() ❰
    Paragraph p;
    p.depth.value = as_wstring("1");
    p.title.value = as_wstring("Fruchterman Reingold Layout");
    
    Add_Sentence(p,"Since the nodes and edges are compressed together and hard to read, we will use this force-directed layout to better position them");
    Add_Sentence(p,"In this case, directed does not mean a directed graph, it means the nodes in this layout algorithm will be given a direction that they want to move to");
    Add_Sentence(p,"without going into too much detail, nodes are given an electrical property akin to Coulomb's law, and the edges are given spring like behavior akin to Hooke's law");
    Add_Sentence(p,"Positioning nodes in the social network is done through the simulation of entities given properties commonly found in physics");
    Add_Sentence(p,"through this iterative approach, the social network will begin to take shape");
    
    return p;
❱

◀private: static▶ Paragraph ☀Degree() ❰
    Paragraph p;
    p.depth.value = as_wstring("1");
    p.title.value = as_wstring("Degree (valency)");
    
    Add_Sentence(p,"Degree");
    Add_Sentence(p,"degree is the number of edges that are incident to the vertex");
    
    return p;
❱

◀private: static▶ Paragraph ☀Presentation_Commentary() ❰
    Paragraph p;
    p.depth.value = as_wstring("0");
    p.title.value = as_wstring("Presentation Commentary");
    
    Add_Sentence(p,"How the experiment is presented through dialog");
    return p;
❱

◀private: static▶ void ☀Add_Sentence(Paragraph & p, std::string const& str) ❰
    Sentence s;
    s.text.value = as_wstring(str);
    p.sentences.emplace_back(s);
❱
◀private: static▶ void ☀Add_Sentence_With_Code(Paragraph & p, std::string const& str, std::string const& code) ❰
    Sentence s;
    s.text.value = as_wstring(str);
    
    Code_Line line;
    line.line.value = as_wstring(code);
    s.codes.emplace_back(line);
    p.sentences.emplace_back(s);
❱

◀private: static▶ void ☀Add_Sentence_With_Image(Paragraph & p, std::string const& str, std::string const& image_path) ❰
    Sentence s;
    s.text.value = as_wstring(str);
    
    Sentence_Image img;
    img.image_path.value = as_wstring(image_path);
    s.images.emplace_back(img);
    p.sentences.emplace_back(s);
❱