class
❪string❫
❪iostream❫
❪"code/utilities/linguistics/computer/frontends/markdown/settings/markdown_settings"❫
⚯
❪"code/utilities/filesystem/files/getting/lib"❫
❪"code/utilities/filesystem/paths/lib"❫
❪"code/utilities/types/strings/observers/path/lib"❫
❪"code/utilities/types/vectors/observers/lib"❫
❪"code/utilities/formats/pdf/pdf_settings"❫
❪"code/utilities/formats/pdf/pdf_creator"❫
❪"code/utilities/filesystem/files/moving/lib"❫
❪"code/utilities/program/wrappers/git/update/git_updater"❫
❪"code/utilities/filesystem/files/creating/lib"❫
❪"code/utilities/personal/hosting/hosting_repo"❫
⚞⚟



◀private: static▶ void ☀Find_Debs_And_Copy_Over(std::vector<std::string> const& debs, std::string const& program_name)❰

      //find program's debs and copy them over
      auto specific_debs = Filter(debs,[&](std::string const& file){
          auto deb_files_should_start_with = program_name + "_";
          return File_Name_Starts_With(file,deb_files_should_start_with);
      });
      Copy_Files_To_Current_Directory(specific_debs);
      
      //copy over raw binary
      std::string raw_binary_name = Replace_File_Name(specific_debs[0],program_name);
      Copy_File_To_Dir(raw_binary_name,".");
      execute("chmod 777 " + raw_binary_name);
❱

◀private: static▶ void ☀Create_Program_Documentation(Structure const& doc_structure, std::string const& program_name)❰

    Create_Path_And_Temporarily_Move_To_It_To_Call_Function("docs",[&](){
      //create pdf documentation
      Pdf_Settings pdf_settings;
      pdf_settings.pandoc_settings.latex_template = "temp_latex.tex";
      pdf_settings.pandoc_settings.md_format = "temp_markdown.md";
      pdf_settings.pandoc_settings.resulting_pdf = program_name + ".pdf";
      pdf_settings.pandoc_settings.font_size = 10;
      pdf_settings.markdown_settings = Get_Pdf_Markdown_Settings();
      //Pdf_Creator::Create_Pdf(doc_structure,pdf_settings);
      
      std::string markdown_file_name = program_name + ".md";
      std::string html_file_name = program_name + ".html";
      Create_Markdown(doc_structure,markdown_file_name);
      
      // create html file
      execute("pandoc " + program_name + ".md --from markdown --to html5 > " + html_file_name);
      
    });
❱

◀private: static▶ Markdown_Settings ☀Get_Pdf_Markdown_Settings()❰

    Program_Input input;
    input.settings = Root_Settings_Getter::Get();

    auto md_settings = input.settings.compiler_settings.trevor.settings.foreign_language.markdown;
    md_settings.headers.allow_labeled_image_titles = false;
    md_settings.headers.h1_as_details_tags = false;
    md_settings.headers.h1_as_summary_tags = false;
    md_settings.tables.print = true;
    md_settings.tables.as_list = true;
    md_settings.image.style = Markdown_Image_Style::CLASSIC;

    return md_settings;
❱



◀private: static▶ void ☀Create_Packages_File()❰
  
  //why does this create a different file each time?
  execute("dpkg-scanpackages -m . | gzip -c > Packages.gz");
❱

◀private: static▶ void ☀Create_List_File(std::string const& program_name)❰
  
  std::string content = "deb [trusted=yes] https://github.com/luxe/luxe.github.com/raw/master/releases/" + program_name + " /";
  std::string file_name = program_name + ".list";
  Write_To_File(file_name,content);
❱

◀private: static▶ void ☀Create_Markdown(Structure const& structure, std::string const& file_name)❰

    Program_Input input;
    input.settings = Root_Settings_Getter::Get();
    auto contributors = input.settings.compiler_settings.trevor.contributors;
    auto md_settings = input.settings.compiler_settings.trevor.settings.foreign_language.markdown;
    
    md_settings.headers.allow_labeled_image_titles = false;
    md_settings.headers.h1_as_details_tags = false;
    md_settings.headers.h1_as_summary_tags = false;
    md_settings.tables.print = false;
    
    //auto result = Markdown_Str_Getter::Get(structure,contributors,md_settings);
    //Write_To_File(file_name,result);
    
❱

