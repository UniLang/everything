class
❪"code/programs/noogle/settings/noogle_settings"❫
❪"code/programs/noogle/state/noogle_running_stats"❫
❪unordered_set❫
⚯
❪iostream❫
❪"code/utilities/types/strings/transformers/search_replace/lib"❫
❪"code/utilities/types/strings/transformers/squeeze/lib"❫
❪"code/utilities/types/strings/observers/other/lib"❫
❪"code/utilities/types/strings/observers/splitting/lib"❫
❪"code/utilities/types/strings/observers/other/lib"❫
❪"code/utilities/types/vectors/observers/lib"❫
❪"code/utilities/types/strings/observers/char/lib"❫
❪"code/utilities/types/vectors/transformers/lib"❫
❪"code/utilities/types/vectors/operators/lib"❫
❪"code/utilities/types/strings/transformers/casing/lib"❫
❪"code/utilities/types/strings/observers/characteristic/english_number_to_integral_converter"❫
❪"code/utilities/types/strings/observers/characteristic/is_english_number_checker"❫
❪"code/utilities/types/strings/observers/characteristic/spirit_numeric_checker"❫
⚞⚟

◀public: static▶ void ☀Decide_If_Token_Is_A_Result(Noogle_Running_Stats & stats, std::string const& token, std::vector<std::string> const& tokens, size_t index,  std::unordered_set<std::string> & local_site_results, Noogle_Settings const& settings)❰

    
    if (Token_Passes_Numeric_Identification(settings.token_identifier,token)){
        auto as_number = English_Number_To_Integral_Converter::Convert(token);
        Add_Window_Phrases(stats,as_number,tokens,index,local_site_results,settings);
    }
❱

◀private: static▶ bool ☀Token_Passes_Numeric_Identification(Token_Identifier_Settings const& settings, std::string const& token)❰
    
    if (settings.use_spirit_numeric_identity){
        if (Spirit_Numeric_Checker::Is_Numeric(token)){
            return true;
        }
    }
    
    if (settings.use_english_name_identity){
        if (Is_English_Number_Checker::Check(token)){
            return true;
        }
    }
    
    return false;
❱
◀private: static▶ void ☀Add_Window_Phrases(Noogle_Running_Stats & stats, std::string const& token, std::vector<std::string> const& tokens, size_t index, std::unordered_set<std::string> & local_site_results, Noogle_Settings const& settings)❰
    Add_Left_Window(stats,token,tokens,index,local_site_results,settings);
    Add_Right_Window(stats,token,tokens,index,local_site_results,settings);
❱

◀private: static▶ void ☀Add_Left_Window(Noogle_Running_Stats & stats, std::string const& token, std::vector<std::string> const& tokens, size_t index, std::unordered_set<std::string> & local_site_results, Noogle_Settings const& settings)❰
    if (index != 0){
        auto window_word = tokens[index-1];
        if (Word_Passes_Filter(settings.word_filter,window_word)){
            local_site_results.insert(window_word + " " + token);
        }
    }
❱
◀private: static▶ void ☀Add_Right_Window(Noogle_Running_Stats & stats, std::string const& token, std::vector<std::string> const& tokens, size_t index, std::unordered_set<std::string> & local_site_results, Noogle_Settings const& settings)❰
    
    auto window_words = Build_Window_Words_Right(tokens,index,settings);
    std::string growing_word = token;
    for (auto const& it: window_words){
        growing_word += " " + it;
        local_site_results.insert(growing_word);
    }
❱

◀private: static▶ std::vector<std::string> ☀Build_Window_Words_Left(std::vector<std::string> const& tokens, size_t index, Noogle_Settings const& settings)❰
    int slide_amount = 1;
    std::vector<std::string> window_words;
    for(size_t i = 0; i < slide_amount; ++i){
        if (index > i){
            auto window_word = tokens[index-i+1];
            if (Word_Passes_Filter(settings.word_filter,window_word)){
                window_words.emplace_back(window_word);
            }
            else{
                break;
            }
        }
        else{
            break;
        }
    }
    return window_words;
❱

◀private: static▶ std::vector<std::string> ☀Build_Window_Words_Right(std::vector<std::string> const& tokens, size_t index, Noogle_Settings const& settings)❰
    int slide_amount = 1;
    std::vector<std::string> window_words;
    for(size_t i = 0; i < slide_amount; ++i){
        if (index+i+1 < tokens.size()){
            auto window_word = tokens[index+i+1];
            if (Word_Passes_Filter(settings.word_filter,window_word)){
                window_words.emplace_back(window_word);
            }
            else{
                break;
            }
        }
        else{
            break;
        }
    }
    return window_words;
❱


◀private: static▶ void ☀Add_Exact(Noogle_Running_Stats & stats, std::string const& token, std::vector<std::string> const& tokens, size_t index, std::unordered_set<std::string> & local_site_results)❰
    local_site_results.insert(token);
❱

◀private: static▶ bool ☀Word_Passes_Filter(Word_Filter_Settings const& settings, std::string const& word)❰

    if (settings.use_spirit_numerical){
        if (Spirit_Numeric_Checker::Is_Numeric(word)){
            return false;
        }
    }
    
    if (settings.use_blacklisted){
        if (Word_Is_Blacklisted(word,settings.blacklisted_words)){
            return false;
        }
    }
    
    if (settings.use_has_numeric){
        if (Has_A_Numeric_Character(word)){
            return false;
        }
    }
    
    if (settings.use_has_nonprintable){
        if (!Is_Only_Printable_Characters(word)){
            return false;
        }
    }
    
    return true;
❱



◀private: static▶ bool ☀Word_Is_Blacklisted(std::string const& word, std::vector<std::string> const& blist)❰
    return String_In_Vector(blist,As_Lowercase(word));
❱

