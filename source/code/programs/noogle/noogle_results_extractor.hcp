class
❪"code/programs/noogle/settings/noogle_settings"❫
❪"code/utilities/data_structures/queue/finishable_safe_queue.h"❫
❪"code/programs/noogle/state/noogle_running_stats"❫
❪"code/programs/noogle/noogle_result"❫
⚯
❪"code/programs/noogle/token_adder"❫
❪"code/utilities/types/strings/observers/splitting/lib"❫
❪vector❫
❪string❫
❪unordered_set❫
⚞⚟

◀public: static▶ void ☀Extract_Results(Noogle_Settings const& settings, Noogle_Running_Stats & stats, FinishableSafeQueue<std::string> & sanitized_text, FinishableSafeQueue<Noogle_Result> & noogle_results)❰
    while(!sanitized_text.is_finished() || !sanitized_text.is_empty()){
        
        auto blob = sanitized_text.get();
        Parse_Html_Blob(blob,stats,noogle_results,settings);
    }
    
    noogle_results.mark_finished();
❱
◀private: static▶ void ☀Parse_Html_Blob(std::string const& blob, Noogle_Running_Stats & stats, FinishableSafeQueue<Noogle_Result> & noogle_results, Noogle_Settings const& settings)❰

    std::unordered_set<std::string> local_site_results;
    auto tokens = Default_Boost_Tokenize(blob);
    for (size_t i = 0; i < tokens.size(); ++i){
        Token_Adder::Decide_If_Token_Is_A_Result(stats,tokens[i],tokens,i,local_site_results,settings);
    }
    
    //add local site results to global
    for (auto const& it: local_site_results){
        Noogle_Result result;
        result.number = it;
        noogle_results.add(result);
        stats.currated_results.Add(result.number);
        ++stats.results;
        
    }
❱


