class
❪"code/programs/noogle/meta_settings"❫
❪"code/utilities/web/automate/browser/browser_settings"❫
❪"code/programs/noogle/settings/noogle_settings"❫
❪"code/utilities/data_structures/queue/finishable_safe_queue.h"❫
❪"code/programs/noogle/state/noogle_running_stats"❫
❪"code/programs/noogle/state/noogle_state_getter"❫
❪"code/programs/noogle/noogle_result"❫
❪atomic❫
❪unordered_set❫
❪"code/programs/noogle/program_options/program_options"❫
❪"code/utilities/web/search_engines/search_engine_url_deviser"❫
⚯
❪iostream❫
❪thread❫
❪"code/utilities/web/chrome/driver/chrome_driver_selector"❫
❪pybind11/embed.h❫
❪"code/utilities/web/automate/browser/browser_creator"❫
❪"code/utilities/web/automate/navigation/browser_navigator"❫
❪"code/programs/noogle/settings/default_settings_getter"❫
❪"code/utilities/types/strings/transformers/search_replace/lib"❫
❪"code/utilities/types/strings/transformers/squeeze/lib"❫
❪"code/utilities/time/sleeping/lib"❫
❪"code/utilities/types/strings/observers/other/lib"❫
❪"code/utilities/web/google/google_search_url_deviser"❫
❪"code/utilities/web/google/google_json_url_deviser"❫
❪"code/utilities/web/bing/bing_json_url_deviser"❫
❪"code/utilities/web/lib"❫
❪"code/utilities/program/common_actions/exits/lib"❫
❪boost/asio/thread_pool.hpp❫
❪boost/asio/post.hpp❫
❪"code/utilities/output/printers/lib"❫
❪"code/utilities/types/strings/observers/splitting/lib"❫
❪"code/utilities/types/strings/observers/other/lib"❫
❪"code/utilities/types/strings/observers/characteristic/spirit_numeric_checker"❫
❪"code/utilities/types/vectors/observers/lib"❫
❪"code/utilities/types/strings/observers/char/lib"❫
❪"code/utilities/types/vectors/transformers/lib"❫
❪"code/utilities/types/vectors/operators/lib"❫
❪"code/utilities/types/strings/transformers/casing/lib"❫
❪"code/utilities/chart/ascii/chart_getter"❫
❪"code/utilities/web/url/url_parser"❫
❪"code/utilities/types/sets/lib"❫
❪"code/utilities/types/strings/observers/characteristic/english_number_to_integral_converter"❫
❪"code/utilities/types/strings/observers/characteristic/is_english_number_checker"❫
❪"code/programs/noogle/results_shower"❫
❪"code/utilities/filesystem/files/creating/lib"❫
❪"code/utilities/types/strings/transformers/html/html_raw_text_getter"❫
❪"code/programs/noogle/query_extender"❫
❪"code/utilities/program/common_actions/signals/lib"❫
❪"code/utilities/formats/json/converters/lib"❫
❪"code/programs/noogle/results_url_getter"❫
❪"code/programs/noogle/results_url_to_html_converter"❫
❪"code/programs/noogle/html_sanitizer"❫
❪"code/programs/noogle/input_poller"❫
❪"code/utilities/ncurses/scoped_getch"❫
❪"code/programs/noogle/noogle_results_extractor"❫
⚞⚟

//apt-get install python3-bs4

//can you noogle a googol?
//should return a very large number (mpz support)


//most data is time (points & durations)
//points = dates (June 2019)
//durations =  (3 years)

◀public: static▶ void ☀Run(Meta_Settings const& meta, Program_Options const& options) ❰


    //when the python scoped interpreter exists, I can't ctrl+c out of the program.
    //we'll remedy this problem with a custom signal handler.
    //but find out why this is the case, maybe we can do something better?
    //https://github.com/pybind/pybind11/issues/1813
    //it would be nice to not even embed the python interpreter for selenium usage.
    //I'm not sure how feasible that is (apart from spawning a whole other process (undesirable)).
    signal_SIGINT_to_exit();
    
    //make sure we have a python environment going for the duration of the program (RAII)
    pybind11::scoped_interpreter py_guard{};
    ScopedGetch getch_guard{};
    
    //add python implementations for extracting raw text out of a webpage (ignores css,js, and parses html)
    Html_Raw_Text_Getter::add_beautiful_soup_function();
    
    auto state = Noogle_State_Getter::Get(meta);
    
    auto search_engine_uninriched_fetch_settings = Get_Search_Engine_Uninriched_Fetch_Settings(state.current_settings,options);
    
    Run_Jobs(state.current_settings,state,search_engine_uninriched_fetch_settings);
❱

◀public: static▶ std::vector<Search_Engine_Fetch_Settings> ☀Get_Search_Engine_Uninriched_Fetch_Settings(Noogle_Settings const& settings, Program_Options const& options)❰

    //expand the user's query to many enriched queries to help increase our search
    auto queries = Query_Extender::Expand_Query(settings.query_expand,options.Query());
    
    //turn the queries into html fetch settings
    //in terms of credentials, these will still need enriched.
    //the reason we do this instead of adding the credentials now, is because credentials don't always work.
    //there are usage limits and restrictions, and we want the ability to round-robin different credentials when they fail.
    auto search_engine_uninriched_fetch_settings = Search_Engine_Url_Deviser::Devise(queries,settings.devise);
    return search_engine_uninriched_fetch_settings;

❱

◀public: static▶ void ☀Run_Jobs(Noogle_Settings const& settings, Noogle_State & state, std::vector<Search_Engine_Fetch_Settings> const& search_engine_uninriched_fetch_settings)❰

    // construct and run the jobs communicating over shared queues
    std::vector<std::thread> jobs;
    jobs.emplace_back(Input_Poller::Poll_User_Input,std::ref(state.stats));
    jobs.emplace_back(Results_Shower::Show_Results,std::cref(settings),std::cref(state.stats),std::ref(state.queues.noogle_results));
    
    //network related tasks
    jobs.emplace_back(Results_Url_Getter::Derive_From_Search_Engine_Urls,std::ref(state.stats),std::cref(settings),search_engine_uninriched_fetch_settings,std::ref(state.queues.result_urls));
    jobs.emplace_back(Results_Url_To_Html_Converter::Convert,std::cref(settings), std::ref(state.stats),std::ref(state.queues.result_urls),std::ref(state.queues.html_results));

    jobs.emplace_back(Html_Sanitizer::Extract_Raw_Text,std::cref(settings),std::ref(state.stats),std::ref(state.queues.html_results),std::ref(state.queues.sanitized_text));
    jobs.emplace_back(Noogle_Results_Extractor::Extract_Results,std::cref(settings),std::ref(state.stats),std::ref(state.queues.sanitized_text),std::ref(state.queues.noogle_results));
    for (auto & it: jobs){
        it.join();
    }
❱




