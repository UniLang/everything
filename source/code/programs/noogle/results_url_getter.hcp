class
❪"code/utilities/web/automate/browser/browser_settings"❫
❪"code/programs/noogle/settings/noogle_settings"❫
❪"code/utilities/data_structures/queue/finishable_safe_queue.h"❫
❪"code/programs/noogle/state/noogle_running_stats"❫
❪unordered_set❫
❪"code/utilities/web/search_engines/search_engine_fetch_settings"❫
⚯
❪iostream❫
❪pybind11/embed.h❫
❪"code/utilities/web/automate/browser/browser_creator"❫
❪"code/utilities/web/automate/navigation/browser_navigator"❫
❪"code/programs/noogle/settings/default_settings_getter"❫
❪"code/utilities/types/strings/transformers/search_replace/lib"❫
❪"code/utilities/types/strings/transformers/squeeze/lib"❫
❪"code/utilities/types/strings/observers/other/lib"❫
❪"code/utilities/web/google/google_search_url_deviser"❫
❪"code/utilities/web/google/google_json_url_deviser"❫
❪"code/utilities/web/bing/bing_json_url_deviser"❫
❪"code/utilities/web/lib"❫
❪"code/utilities/program/common_actions/exits/lib"❫
❪"code/utilities/types/vectors/observers/lib"❫
❪"code/utilities/types/strings/observers/char/lib"❫
❪"code/utilities/types/vectors/transformers/lib"❫
❪"code/utilities/types/vectors/operators/lib"❫
❪"code/utilities/types/strings/transformers/casing/lib"❫
❪"code/utilities/chart/ascii/chart_getter"❫
❪"code/utilities/web/url/url_parser"❫
❪"code/utilities/types/sets/lib"❫
❪"code/utilities/types/strings/observers/characteristic/english_number_to_integral_converter"❫
❪"code/utilities/types/strings/observers/characteristic/is_english_number_checker"❫
❪"code/programs/noogle/results_shower"❫
❪"code/utilities/filesystem/files/creating/lib"❫
❪"code/utilities/types/strings/transformers/html/html_raw_text_getter"❫
❪"code/utilities/web/search_engines/search_engine_url_deviser"❫
❪"code/utilities/formats/json/converters/lib"❫
❪fmt/format.h❫
⚞⚟

◀public: static▶ void ☀Derive_From_Search_Engine_Urls(Noogle_Running_Stats & stats, Noogle_Settings const& settings, std::vector<Search_Engine_Fetch_Settings> const& search_urls, FinishableSafeQueue<std::string> & q)❰
    
    //optionally used if we don't want to store duplicate host urls
    std::unordered_set<std::string> seen_hosts;
    
    for (auto const& it: search_urls){
        auto result_urls = Get_Result_Urls(stats,settings,it);
        
        if (settings.stop_at_max_sites){
            if (stats.sites.total >= settings.max_sites_count){
                break;
            }
        }
        
        
        for (auto const& x: result_urls){
            Possibly_Add_Url(stats,settings,x,q,seen_hosts);
        }
    }
    
    //visual book-keeping
    q.mark_finished();
    stats.sites.finished = true;
❱

◀private: static▶ std::vector<std::string> ☀Get_Result_Urls(Noogle_Running_Stats & stats, Noogle_Settings const& settings, Search_Engine_Fetch_Settings const& search_url)❰
    
    std::vector<std::string> results;
    while (results.empty()){
        auto enriched_search_url = Enrich_Url(stats,settings,search_url);
        results = Query_And_Extract(enriched_search_url);
        
        if (results.empty()){
            Try_Next_Credential(stats,settings,search_url);
        }
    }
    return results;
❱


◀private: static▶ Search_Engine_Fetch_Settings ☀Enrich_Url(Noogle_Running_Stats & stats, Noogle_Settings const& settings, Search_Engine_Fetch_Settings const& search_url)❰
    Search_Engine_Fetch_Settings results = search_url;
    
    if (results.search_provider == Search_Engine_Type::GOOGLE_BROWSER){
        //no need to enrich
    }
    else if (results.search_provider == Search_Engine_Type::GOOGLE_API){
        results.fetch.url = fmt::format(results.fetch.url,settings.credentials.google_api_credentials[stats.google_credential_index]);
    }
    else if (results.search_provider == Search_Engine_Type::BING_API){
        results.fetch.headers.emplace_back("Ocp-Apim-Subscription-Key: " + settings.credentials.bing_api_credentials[stats.bing_credential_index]);
    }
    
    return results;
❱

◀private: static▶ std::vector<std::string> ☀Query_And_Extract(Search_Engine_Fetch_Settings const& search_url)❰
    std::vector<std::string> results;
    
    auto response = Get_Html_Of_Site(search_url.fetch);
    auto j = nlohmann::json::parse(response);
    
    if (search_url.search_provider == Search_Engine_Type::GOOGLE_BROWSER){
        //implemented but not integrated
    }
    else if (search_url.search_provider == Search_Engine_Type::GOOGLE_API){
        for (auto it: j["items"]){
            auto result_url = it["link"].get<std::string>();
            results.emplace_back(result_url);
        }
    }
    else if (search_url.search_provider == Search_Engine_Type::BING_API){
        for (auto it: j["webPages"]["value"]){
            auto result_url = it["url"].get<std::string>();
            results.emplace_back(result_url);
        }
    }
    
    return results;
❱


◀private: static▶ void ☀Try_Next_Credential(Noogle_Running_Stats & stats, Noogle_Settings const& settings, Search_Engine_Fetch_Settings const& search_url)❰

    if (search_url.search_provider == Search_Engine_Type::GOOGLE_BROWSER){
        //no credentials needed (might try proxies / user agents though)
    }
    else if (search_url.search_provider == Search_Engine_Type::GOOGLE_API){
        stats.google_credential_index = Next_Index_In_Round_Robin(settings.credentials.google_api_credentials,stats.google_credential_index);
    }
    else if (search_url.search_provider == Search_Engine_Type::BING_API){
        stats.bing_credential_index = Next_Index_In_Round_Robin(settings.credentials.bing_api_credentials,stats.bing_credential_index);
    }
❱





//good: filter + adding
◀private: static▶ void ☀Possibly_Add_Url(Noogle_Running_Stats & stats, Noogle_Settings const& settings, std::string const& url, FinishableSafeQueue<std::string> & q, std::unordered_set<std::string> & seen_hosts)❰
    if (Is_Result_Url_Valid_For_Exploring(settings,url,seen_hosts)){
        ++stats.sites.total;
        q.add(url);
        ++stats.sites.current;
    }
❱


◀private: static▶ bool ☀Is_Result_Url_Valid_For_Exploring(Noogle_Settings const& settings, std::string const& url,std::unordered_set<std::string> & seen_hosts)❰
   
   
   try {
       std::string new_host_name = Url_Parser::Get_Hostname(url);
       
        if (Begins_With_Any(url,settings.url_filter.blacklist_urls_start_with)){
            return false;
        }
        
        if (settings.url_filter.dont_traverse_host_more_than_once){
            if (seen_hosts.find(new_host_name) != seen_hosts.end()){
                return false;
            }
        }
        
        //std::cout << new_host_name << std::endl;
        seen_hosts.insert(new_host_name);
    }
    catch(...){
    }
    return true;
❱