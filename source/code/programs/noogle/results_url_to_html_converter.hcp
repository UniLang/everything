class
❪"code/programs/noogle/settings/noogle_settings"❫
❪"code/utilities/data_structures/queue/finishable_safe_queue.h"❫
❪"code/programs/noogle/state/noogle_running_stats"❫
❪unordered_set❫
⚯
❪iostream❫
❪thread❫
❪"code/utilities/types/strings/observers/other/lib"❫
❪"code/utilities/web/lib"❫
❪boost/asio/thread_pool.hpp❫
❪boost/asio/post.hpp❫
❪"code/utilities/web/url/url_parser"❫
❪"code/utilities/types/sets/lib"❫
❪"code/utilities/filesystem/files/creating/lib"❫
⚞⚟


◀public: static▶ void ☀Convert(Noogle_Settings const& settings, Noogle_Running_Stats & stats, FinishableSafeQueue<std::string> & urls_in, FinishableSafeQueue<std::string> & html_out)❰
    
    std::unordered_set<std::string> duplicate_htmls;
    boost::asio::thread_pool pool(settings.result_to_html.threadNumbers);
    while(!urls_in.is_finished() || !urls_in.is_empty()){
        
        if (!urls_in.is_empty()){
            auto str = urls_in.get();
            ++stats.htmls.total;
            boost::asio::post(pool, [&,str]() {
                Html_Fetch_Settings fetch_settings;
                fetch_settings.url = str;
                auto html = Get_Html_Of_Site(fetch_settings);
                
                if (Should_Add_Html(settings.result_to_html.avoid_duplicate_htmls,html,duplicate_htmls)){
                    html_out.add(html);
                    duplicate_htmls.insert(html);
                    
                   if (settings.result_to_html.write_html_files){
                        Write_To_File(settings.result_to_html.dump_html_location + Url_Parser::Get_Hostname(fetch_settings.url),html);
                    }
                }
                ++stats.htmls.current;
                
                if (html.empty()){
                    // why did this happen? timeout?
                    //std::cout << fetch_settings.url << std::endl;
                }
            });
        }
    }
    pool.join();
    html_out.mark_finished();
    stats.htmls.finished = true;
❱


◀private: static▶ bool ☀Should_Add_Html(const bool dup_check, std::string const& html, std::unordered_set<std::string> const& duplicate_htmls)❰
    if (!dup_check){
        return true;
    }
    
    if (duplicate_htmls.find(html) == duplicate_htmls.end()){
        return true;
    }
    
    return false;
❱