class
❪vector❫
❪string❫
❪"code/utilities/types/vectors/converters/lib"❫
❪"code/utilities/types/vectors/observers/lib"❫
❪"code/utilities/types/vectors/transformers/lib"❫
❪"code/utilities/types/strings/observers/splitting/lib"❫
❪"code/utilities/types/strings/observers/other/lib"❫
❪"code/utilities/types/strings/observers/counters/lib"❫
❪"code/utilities/types/strings/transformers/removing/lib"❫
❪"code/utilities/types/strings/observers/char/lib"❫
❪"code/utilities/types/char/lib"❫
❪"code/utilities/output/printers/lib"❫
❪"code/utilities/types/string_grid/string_grid_builder"❫
❪"code/utilities/data_structures/compass_directions/compass_direction_diagnonal_movement"❫
❪"code/utilities/data_structures/compass_directions/compass_direction_diagnonal_movements"❫
❪"code/utilities/data_structures/graph/object_to_counted_objects"❫
❪"code/utilities/simulate/int_computer/instruction"❫
❪"code/utilities/simulate/int_computer/instructions_getter"❫
❪"code/utilities/simulate/int_computer/int_computer_runner"❫
❪"code/utilities/data_structures/range/range"❫
❪"Graph.h"❫
⚯
❪"code/utilities/data_structures/point/point"❫
❪"code/utilities/data_structures/point/point_mover"❫
❪"code/utilities/types/strings/transformers/trimming/lib"❫
❪"code/utilities/types/range/range_shrinker"❫
❪"code/utilities/data_structures/counters/unique_counter/unique_counter"❫
❪"code/utilities/types/vectors/transformers/lib"❫
❪"code/utilities/linguistics/counted_object/counted_object_parser"❫
❪"code/utilities/formats/json/converters/type_to_json_string"❫
❪"code/utilities/types/strings/transformers/inflection/inflection_converter"❫
❪"code/utilities/types/strings/transformers/inflection/getters/inflection_settings_getter"❫
❪"code/utilities/types/strings/transformers/search_replace/lib"❫
❪"code/utilities/data_structures/graph/graph_builder"❫
❪"code/utilities/program/common_actions/exits/lib"❫
❪"code/utilities/types/vectors/observers/index_range_algorithms"❫
⚞⚟

◀public: static▶ void ☀Part_1(std::vector<std::string> lines) ❰
    
    int range_length = 25;
    auto numbers = VecStringToVecInt(lines);
    auto search = Create_0_to_N_Range(range_length);
    
    int answer = 0;
    for (size_t i = range_length; i < numbers.size(); ++i){
        auto valid = Index_Range_Algorithms::Two_Values_From_Vec_Range_Can_Sum_To_Value(numbers,search,numbers[i]);
        if (!valid){
            answer = numbers[i];
            break;
        }
        search.low++;
        search.high++;
    }
    
    Exit_If_Not_Equal(answer,14144619);
❱

◀public: static▶ void ☀Part_2(std::vector<std::string> lines) ❰

    auto numbers = VecStringToVecInt(lines);
    auto range = Index_Range_Algorithms::Find_Contiguous_Range_That_Equals_Num(numbers,14144619);
    
    int answer = Index_Range_Algorithms::Min_Element(numbers,range) + Index_Range_Algorithms::Max_Element(numbers,range);
    Exit_If_Not_Equal(answer,1766397);
❱




◀private: static▶ Range ☀Create_0_to_N_Range(int num) ❰
    Range search;
    search.low = 0;
    search.high = num;
    return search;
❱