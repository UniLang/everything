class
❪vector❫
❪string❫
❪"code/utilities/types/vectors/converters/lib"❫
❪"code/utilities/types/vectors/observers/lib"❫
❪"code/utilities/types/vectors/transformers/lib"❫
❪"code/utilities/types/strings/observers/splitting/lib"❫
❪"code/utilities/types/strings/observers/other/lib"❫
❪"code/utilities/types/strings/observers/counters/lib"❫
❪"code/utilities/types/strings/transformers/removing/lib"❫
❪"code/utilities/types/strings/observers/char/lib"❫
❪"code/utilities/types/char/lib"❫
❪"code/utilities/output/printers/lib"❫
❪"code/utilities/types/string_grid/string_grid_builder"❫
❪"code/utilities/data_structures/compass_directions/compass_direction_diagnonal_movement"❫
❪"code/utilities/data_structures/compass_directions/compass_direction_diagnonal_movements"❫
❪"code/utilities/data_structures/graph/object_to_counted_objects"❫
❪"code/utilities/simulate/int_computer/instruction"❫
❪"code/utilities/simulate/int_computer/instructions_getter"❫
❪"code/utilities/simulate/int_computer/int_computer_runner"❫
❪"Graph.h"❫
⚯
❪"code/utilities/data_structures/point/point"❫
❪"code/utilities/data_structures/point/point_mover"❫
❪"code/utilities/types/strings/transformers/trimming/lib"❫
❪"code/utilities/types/range/range_shrinker"❫
❪"code/utilities/data_structures/range/range"❫
❪"code/utilities/data_structures/counters/unique_counter/unique_counter"❫
❪"code/utilities/types/vectors/transformers/lib"❫
❪"code/utilities/linguistics/counted_object/counted_object_parser"❫
❪"code/utilities/formats/json/converters/type_to_json_string"❫
❪"code/utilities/types/strings/transformers/inflection/inflection_converter"❫
❪"code/utilities/types/strings/transformers/inflection/getters/inflection_settings_getter"❫
❪"code/utilities/types/strings/transformers/search_replace/lib"❫
❪"code/utilities/data_structures/graph/graph_builder"❫
❪"code/utilities/program/common_actions/exits/lib"❫
⚞⚟

◀public: static▶ void ☀Part_1(std::vector<std::string> lines) ❰

    Int_Computer computer;
    computer.instructions = Instructions_Getter::Get_Instructions(lines);
    
    Int_Computer_Runner::Run(computer);
    Exit_If_Not_Equal(computer.acc,1832);
❱
◀public: static▶ void ☀Part_2(std::vector<std::string> lines) ❰

    //original computer
    Int_Computer computer;
    computer.instructions = Instructions_Getter::Get_Instructions(lines);
    
    auto answer = 0;
    for (size_t i = 0; i < computer.instructions.size(); ++i){
        
        //flip operation
        if (computer.instructions[i].op_code == Operation_Type::NOP){
            Int_Computer tmp_computer = computer;
            tmp_computer.instructions[i].op_code = Operation_Type::JMP;
            auto result = Int_Computer_Runner::Run(tmp_computer);
            if (result == Halting_Problem_Result::HALTS){
                answer = tmp_computer.acc;
            }
        }
        
        //flip operation
        else if (computer.instructions[i].op_code == Operation_Type::JMP){
            Int_Computer tmp_computer = computer;
            tmp_computer.instructions[i].op_code = Operation_Type::NOP;
            auto result = Int_Computer_Runner::Run(tmp_computer);
            if (result == Halting_Problem_Result::HALTS){
                answer = tmp_computer.acc;
            }
        }
    }
    Exit_If_Not_Equal(answer,662);
    
❱