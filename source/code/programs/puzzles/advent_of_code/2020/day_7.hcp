class
❪vector❫
❪string❫
❪"code/utilities/types/vectors/converters/lib"❫
❪"code/utilities/types/vectors/observers/lib"❫
❪"code/utilities/types/vectors/transformers/lib"❫
❪"code/utilities/types/strings/observers/splitting/lib"❫
❪"code/utilities/types/strings/observers/other/lib"❫
❪"code/utilities/types/strings/observers/counters/lib"❫
❪"code/utilities/types/strings/transformers/removing/lib"❫
❪"code/utilities/types/strings/observers/char/lib"❫
❪"code/utilities/types/char/lib"❫
❪"code/utilities/output/printers/lib"❫
❪"code/utilities/types/string_grid/string_grid_builder"❫
❪"code/utilities/data_structures/compass_directions/compass_direction_diagnonal_movement"❫
❪"code/utilities/data_structures/compass_directions/compass_direction_diagnonal_movements"❫
❪"code/utilities/data_structures/graph/object_to_counted_objects"❫
❪"Graph.h"❫
⚯
❪"code/utilities/data_structures/point/point"❫
❪"code/utilities/data_structures/point/point_mover"❫
❪"code/utilities/types/strings/transformers/trimming/lib"❫
❪"code/utilities/types/range/range_shrinker"❫
❪"code/utilities/data_structures/range/range"❫
❪"code/utilities/data_structures/counters/unique_counter/unique_counter"❫
❪"code/utilities/types/vectors/transformers/lib"❫
❪"code/utilities/linguistics/counted_object/counted_object_parser"❫
❪"code/utilities/formats/json/converters/type_to_json_string"❫
❪"code/utilities/types/strings/transformers/inflection/inflection_converter"❫
❪"code/utilities/types/strings/transformers/inflection/getters/inflection_settings_getter"❫
❪"code/utilities/types/strings/transformers/search_replace/lib"❫
❪"code/utilities/data_structures/graph/graph_builder"❫
❪"code/utilities/program/common_actions/exits/lib"❫
⚞⚟

◀public: static▶ void ☀Part_1(std::vector<std::string> lines) ❰

    std::string start_node = "shiny gold bag";
    auto rels = Create_Relationships(lines);
    auto graph = Graph_Builder::Build_Cpp_Graph(rels);
    auto reachable = graph.explore(start_node);
    
    //-1 because we don't want to count ourselves
    auto answer = reachable.size()-1;
    Exit_If_Not_Equal(answer,128);
    
    
❱
◀public: static▶ void ☀Part_2(std::vector<std::string> lines) ❰

    std::string start_node = "shiny gold bag";
    auto rels = Create_Relationships(lines);
    auto answer = Recurse(rels,start_node)-1;
    Exit_If_Not_Equal(answer,20189);
    
❱


◀private: static▶ int ☀Recurse(std::vector<Object_To_Counted_Objects> const& rels, std::string const& start_node)❰

    int total = 1;
    auto find = Find(rels,start_node);
    if (!find.from.empty()){
        for (auto const& it2: find.to){
            total += (it2.count * Recurse(rels,it2.object));
        }
    }
    
    return total;
❱


◀private: static▶ Object_To_Counted_Objects ☀Find(std::vector<Object_To_Counted_Objects> const& rels, std::string const& name)❰
    for (auto const& it: rels){
        if (it.from == name){
            return it;
        }
    }
    
    Object_To_Counted_Objects empty;
    return empty;
❱

◀private: static▶ std::vector<Object_To_Counted_Objects> ☀Create_Relationships(std::vector<std::string> const& lines) ❰
    std::vector<Object_To_Counted_Objects> results;

    for (auto const& it: lines){
        auto split = Split_Into_Parts_From_Delimiter(it,"contain");
        auto counted_objects = Counted_Object_Parser::Parse_Statement_Into_Counted_Objects(split[1]);
        
            trim(split[0]);
            
            
            auto settings = Inflection_Settings_Getter::Get();
            auto from = Inflection_Converter::As_Singular_Simple(split[0],settings);
            
            
            Object_To_Counted_Objects temp;
            temp.from = from;
            temp.to = counted_objects;
            results.emplace_back(temp);
    }
    
    return results;
❱