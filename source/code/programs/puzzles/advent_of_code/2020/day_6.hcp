class
❪vector❫
❪string❫
❪"code/utilities/types/vectors/converters/lib"❫
❪"code/utilities/types/vectors/observers/lib"❫
❪"code/utilities/types/vectors/transformers/lib"❫
❪"code/utilities/types/strings/observers/splitting/lib"❫
❪"code/utilities/types/strings/observers/other/lib"❫
❪"code/utilities/types/strings/observers/counters/lib"❫
❪"code/utilities/types/strings/transformers/removing/lib"❫
❪"code/utilities/types/strings/observers/char/lib"❫
❪"code/utilities/types/char/lib"❫
❪"code/utilities/output/printers/lib"❫
❪"code/utilities/types/string_grid/string_grid_builder"❫
❪"code/utilities/data_structures/compass_directions/compass_direction_diagnonal_movement"❫
❪"code/utilities/data_structures/compass_directions/compass_direction_diagnonal_movements"❫
⚯
❪"code/utilities/data_structures/point/point"❫
❪"code/utilities/data_structures/point/point_mover"❫
❪"code/utilities/types/strings/transformers/trimming/lib"❫
❪"code/utilities/types/range/range_shrinker"❫
❪"code/utilities/data_structures/range/range"❫
❪"code/utilities/data_structures/counters/unique_counter/unique_counter"❫
❪"code/utilities/types/vectors/transformers/lib"❫
⚞⚟

◀public: static▶ void ☀Part_1(std::vector<std::string> lines) ❰
    auto parts = Split_By_Spaces(lines);
    
    std::vector<int> totals;
    for (auto const& it: parts){
        totals.emplace_back(Unique_Counts(it));
    }
    std::cout << Accumulate(totals) << std::endl;
❱
◀public: static▶ void ☀Part_2(std::vector<std::string> lines) ❰
    auto parts = Split_By_Spaces(lines);
    
    std::vector<int> totals;
    for (auto const& it: parts){
        totals.emplace_back(Occured_On_Every_Line(it));
    }
    std::cout << Accumulate(totals) << std::endl;
❱

◀public: static▶ int ☀Unique_Counts(std::vector<std::string> answers) ❰
    Unique_Counter<char> counter;
    for (auto const& x: answers){
        for (auto const& y: x){
            counter.Add(y);
        }
    }
    return counter.Number_Of_Unique_Entries();
❱
◀public: static▶ int ☀Occured_On_Every_Line(std::vector<std::string> answers) ❰
    Unique_Counter<char> counter;
    for (auto const& x: answers){
        for (auto const& y: x){
            counter.Add(y);
        }
    }
    
    int total = 0;
    for (auto const it: counter.hash_table){
        if (it.second == answers.size()){
            ++total;
        }
    }
    
    return total;
❱