class
❪"code/utilities/data_structures/compass_directions/compass_direction_diagnonal_movement"❫
❪"code/utilities/data_structures/point/point_line"❫
❪"code/utilities/data_structures/point/point_mover"❫
⚯
❪"code/utilities/types/general/lib"❫
❪"code/utilities/types/vectors/operators/lib"❫
❪"code/utilities/types/vectors/transformers/lib"❫
❪"code/utilities/types/strings/observers/converting/lib"❫
❪"code/utilities/types/strings/observers/splitting/lib"❫
❪"code/utilities/types/strings/transformers/removing/lib"❫
❪"code/utilities/program/common_actions/exits/lib"❫
❪"code/utilities/web/lib"❫
❪"code/utilities/output/printers/lib"❫
❪"code/utilities/web/automate/browser/default_browser_settings_getter"❫
❪"code/utilities/web/automate/browser/browser_creator"❫
❪"code/utilities/web/automate/navigation/browser_navigator"❫

❪"code/utilities/formats/json/converters/lib"❫
❪"code/utilities/data_structures/point/point"❫
❪"code/utilities/data_structures/point/point_line_intersections_getter"❫
❪"code/utilities/data_structures/point/point_line_to_points"❫
⚞⚟

◀public: static▶ void ☀Part_1(std::vector<std::string> lines) ❰
    auto parts = Split_Into_Parts_From_Dash(lines[0]);
    size_t start = as_signed(parts[0]);
    size_t end = as_signed(parts[1]);
    
    size_t valid_passes = 0;
    for (size_t i = start; i < end; ++i){
        if (Valid_Pass(i)){
            ++valid_passes;
        }
    }
    std::cout << valid_passes << std::endl;
❱


◀public: static▶ void ☀Part_2(std::vector<std::string> const& lines) ❰
    
❱


◀private: static▶ bool ☀Valid_Pass(int num) ❰
    auto str = std::to_string(num);
    std::cout << str << std::endl;
    
    int at_num = -1;
    int consec_count = 1;
    
    bool c_yes = false;
    
    for (auto it: str){
        std::string x(1,it);
        auto curr_num = as_signed(x);
        
        
        if (curr_num == at_num){
            consec_count++;
        }
        else{
            if (consec_count == 2){
                c_yes = true;
            }
            consec_count = 1;
        }
        
        
        
        //consecutive check
        if (curr_num < at_num){
            return false;
        }
        at_num = curr_num;
    }
    
    if (consec_count == 2){
        c_yes = true;
    }
    
    std::cout << "here" << std::endl;
    return c_yes;
❱