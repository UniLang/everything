class
❪"code/utilities/data_structures/compass_directions/compass_direction_diagnonal_movement"❫
❪"code/utilities/data_structures/point/point_line"❫
❪"code/utilities/data_structures/point/point_mover"❫
❪"Graph.h"❫
⚯
❪"code/utilities/types/general/lib"❫
❪"code/utilities/types/vectors/operators/lib"❫
❪"code/utilities/types/vectors/transformers/lib"❫
❪"code/utilities/types/strings/observers/converting/lib"❫
❪"code/utilities/types/strings/observers/splitting/lib"❫
❪"code/utilities/types/strings/transformers/removing/lib"❫
❪"code/utilities/program/common_actions/exits/lib"❫
❪"code/utilities/web/lib"❫
❪"code/utilities/output/printers/lib"❫
❪"code/utilities/web/automate/browser/default_browser_settings_getter"❫
❪"code/utilities/web/automate/browser/browser_creator"❫
❪"code/utilities/web/automate/navigation/browser_navigator"❫

❪"code/utilities/formats/json/converters/lib"❫
❪"code/utilities/data_structures/point/point"❫
❪"code/utilities/data_structures/point/point_line_intersections_getter"❫
❪"code/utilities/data_structures/point/point_line_to_points"❫
⚞⚟

◀public: static▶ void ☀Part_1(std::vector<std::string> lines) ❰

    
    // auto G = Build_Graph(lines);
    
    // //unique nodes
    // std::set<std::string> s;
    // for (auto const& it: orbs){
    //     s.insert(it.first);
    //     s.insert(it.second);
    // }
    
    // int total = 0;
    // for (auto it: s){
    //     auto path = G.BFS(it,"COM");
    //     total += path.size()-1;
    // }
    
    // std::cout << total << std::endl;
    
    // auto path = G.DFS("YOU","SAN");
    // std::cout << path << std::endl;
    // std::cout << path.size()-3 << std::endl;
    

❱
◀public: static▶ void ☀Part_2(std::vector<std::string> const& lines) ❰

❱

◀private: static▶ Graph ☀Build_Graph(std::vector<std::string> const& lines)❰

    //get vertex connections
    std::vector<std::pair<std::string,std::string>> orbs;
    for (auto const& it: lines){
        auto split = Split_Into_Parts_From_Close_Paren(it);
        std::pair<std::string,std::string> p;
        p.first = split[0];
        p.second = split[1];
        orbs.emplace_back(p);
    }
    
    //build graph
    Graph G;
    for (auto const& it: orbs){
        G.addNode(it.first);
        G.addNode(it.second);
        G.addEdge(it.second,it.first);
        G.addEdge(it.first,it.second);
    }
    
    return G;
❱