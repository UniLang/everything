class
❪"code/utilities/data_structures/compass_directions/compass_direction_diagnonal_movement"❫
❪"code/utilities/data_structures/point/point_line"❫
❪"code/utilities/data_structures/point/point_mover"❫
⚯
❪"code/utilities/types/general/lib"❫
❪"code/utilities/types/vectors/operators/lib"❫
❪"code/utilities/types/vectors/transformers/lib"❫
❪"code/utilities/types/vectors/converters/lib"❫
❪"code/utilities/types/vectors/observers/lib"❫
❪"code/utilities/types/strings/observers/converting/lib"❫
❪"code/utilities/types/strings/observers/splitting/lib"❫
❪"code/utilities/types/strings/transformers/removing/lib"❫
❪"code/utilities/program/common_actions/exits/lib"❫
❪"code/utilities/web/lib"❫
❪"code/utilities/output/printers/lib"❫
❪"code/utilities/web/automate/browser/default_browser_settings_getter"❫
❪"code/utilities/web/automate/browser/browser_creator"❫
❪"code/utilities/web/automate/navigation/browser_navigator"❫

❪"code/utilities/formats/json/converters/lib"❫
❪"code/utilities/data_structures/point/point"❫
❪"code/utilities/data_structures/point/point_line_intersections_getter"❫
❪"code/utilities/data_structures/point/point_line_to_points"❫
❪"code/utilities/types/int/int"❫
❪"code/programs/puzzles/advent_of_code/2019/int_code_computer"❫
⚞⚟

◀public: static▶ void ☀Part_1(std::vector<std::string> lines) ❰

    //get program input
    //auto num_strs = Split_Into_Parts_From_Comma(lines[0]);
    // auto nums = VecStringToVecULong(num_strs);
    
    // auto combos = Int::permutations(5,5);
    
    
    // std::vector<int> totals;
    // for (auto combo: combos){
    //     auto nums2 = nums;
        
    //     std::vector<long> outs;
    //     unsigned long result = 0;
    //     unsigned long e_output = 0;
        
    //     Int_Code_Computer_State state1;
    //     state1.memory = nums;
    //     state1.pc = 0;
        
    //     Int_Code_Computer_State state2;
    //     state2.memory = nums;
    //     state2.pc = 0;
        
    //     Int_Code_Computer_State state3;
    //     state3.memory = nums;
    //     state3.pc = 0;
        
    //     Int_Code_Computer_State state4;
    //     state4.memory = nums;
    //     state4.pc = 0;
        
    //     Int_Code_Computer_State state5;
    //     state5.memory = nums;
    //     state5.pc = 0;
        
    //     outs = Int_Code_Computer::Run(state1,{static_cast<unsigned long>(combo[0]),result});
    //     result = outs[0];
        
    //     outs = Int_Code_Computer::Run(state2,{static_cast<unsigned long>(combo[1]),result});
    //     result = outs[0];
        
    //     outs = Int_Code_Computer::Run(state3,{static_cast<unsigned long>(combo[2]),result});
    //     result = outs[0];
        
    //     outs = Int_Code_Computer::Run(state4,{static_cast<unsigned long>(combo[3]),result});
    //     result = outs[0];
        
    //     outs = Int_Code_Computer::Run(state5,{static_cast<unsigned long>(combo[4]),result});
    //     result = outs[0];
    //     e_output = outs[0];
        
    //     while (true){
            
    //         outs = Int_Code_Computer::Run(state1,{result});
    //         if (outs.empty()){ break; }
    //         result = outs[0];
            
    //         outs = Int_Code_Computer::Run(state2,{result});
    //         if (outs.empty()){ break; }
    //         result = outs[0];
            
    //         outs = Int_Code_Computer::Run(state3,{result});
    //         if (outs.empty()){ break; }
    //         result = outs[0];
            
    //         outs = Int_Code_Computer::Run(state4,{result});
    //         if (outs.empty()){ break; }
    //         result = outs[0];
            
    //         outs = Int_Code_Computer::Run(state5,{result});
    //         if (outs.empty()){ break; }
    //         result = outs[0];
    //         e_output = outs[0];
    //     }
        
    //     totals.emplace_back(e_output);
    // }
    
    // Sort_And_Remove_Duplicates(totals);
    // std::cout << totals << std::endl;
    

❱
◀public: static▶ void ☀Part_2(std::vector<std::string> const& lines) ❰

❱



