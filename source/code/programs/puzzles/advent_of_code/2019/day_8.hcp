class
❪"code/utilities/data_structures/compass_directions/compass_direction_diagnonal_movement"❫
❪"code/utilities/data_structures/point/point_line"❫
❪"code/utilities/data_structures/point/point_mover"❫
⚯
❪"code/utilities/types/general/lib"❫
❪"code/utilities/types/vectors/operators/lib"❫
❪"code/utilities/types/vectors/transformers/lib"❫
❪"code/utilities/types/strings/observers/converting/lib"❫
❪"code/utilities/types/strings/observers/splitting/lib"❫
❪"code/utilities/types/strings/observers/counters/lib"❫
❪"code/utilities/types/strings/transformers/removing/lib"❫
❪"code/utilities/program/common_actions/exits/lib"❫
❪"code/utilities/web/lib"❫
❪"code/utilities/output/printers/lib"❫
❪"code/utilities/web/automate/browser/default_browser_settings_getter"❫
❪"code/utilities/web/automate/browser/browser_creator"❫
❪"code/utilities/web/automate/navigation/browser_navigator"❫

❪"code/utilities/formats/json/converters/lib"❫
❪"code/utilities/data_structures/point/point"❫
❪"code/utilities/data_structures/point/point_line_intersections_getter"❫
❪"code/utilities/data_structures/point/point_line_to_points"❫
❪"code/utilities/types/int/int"❫
⚞⚟

◀public: static▶ void ☀Part_1(std::vector<std::string> lines) ❰

    //get layer data
    auto parts = Split_Into_Parts(lines[0],25,6);
    
    //find layer with the fewest zeros
    int fewest_zeros = 10000;
    int found_index = 0;
    for (size_t i = 0; i < parts.size(); ++i){
        auto count = Count_Instances_Of_Zeros(parts[i]);
        if (count < fewest_zeros){
            fewest_zeros = count;
            found_index = i;
        }
    }
    
    //print answer
    std::cout << Count_Instances_Of_Ones(parts[found_index]) * Count_Instances_Of_Twos(parts[found_index]) << std::endl;
    

❱
◀public: static▶ void ☀Part_2(std::vector<std::string> const& lines) ❰
    
    //get layer data
    auto parts = Split_Into_Parts(lines[0],25,6);
    
    //reverse layers
    std::vector<std::vector<std::string>> revered;
    for (auto it = parts.rbegin(); it != parts.rend(); ++it)
    {
        revered.emplace_back(*it);
    }
    
    //place layers
    auto main_layer = revered[0];
    for (auto const& it: revered){
        for (size_t i = 0; i < it.size(); ++i){
            for (size_t j = 0; j < it[i].size(); ++j){
                if (it[i][j] == '0'){
                    main_layer[i][j] = ' ';
                }
                else if (it[i][j] == '1'){
                    main_layer[i][j] = '@';
                }
            }
        }
        // for (auto const& it: main_layer){std::cout << it << std::endl;}
        // std::cout << std::endl;
    }
    for (auto const& it: main_layer){std::cout << it << std::endl;}
    
    
❱