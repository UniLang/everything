class
❪vector❫
❪"code/programs/puzzles/advent_of_code/2019/int_code_computer_state"❫
❪"code/programs/puzzles/advent_of_code/2019/int_code_instruction"❫
❪"code/utilities/language_basic/std_hackery/std_aliases"❫
⚯
❪"code/utilities/types/general/lib"❫
❪"code/utilities/types/vectors/operators/lib"❫
❪"code/utilities/types/vectors/transformers/lib"❫
❪"code/utilities/types/vectors/transformers/machine/lib"❫
❪"code/utilities/types/vectors/converters/lib"❫
❪"code/utilities/types/vectors/observers/lib"❫
❪"code/utilities/types/strings/observers/converting/lib"❫
❪"code/utilities/types/strings/observers/splitting/lib"❫
❪"code/utilities/types/strings/transformers/removing/lib"❫
❪"code/utilities/program/common_actions/exits/lib"❫
❪"code/utilities/web/lib"❫
❪"code/utilities/output/printers/lib"❫
❪"code/utilities/web/automate/browser/default_browser_settings_getter"❫
❪"code/utilities/web/automate/browser/browser_creator"❫
❪"code/utilities/web/automate/navigation/browser_navigator"❫

❪"code/utilities/formats/json/converters/lib"❫
❪"code/utilities/data_structures/point/point"❫
❪"code/utilities/data_structures/point/point_line_intersections_getter"❫
❪"code/utilities/data_structures/point/point_line_to_points"❫
❪"code/utilities/types/int/int"❫
❪"code/utilities/math/gmp/lib"❫
⚞⚟

◀public: static▶ strings ☀Run(Int_Code_Computer_State & state, strings const& inputs) ❰


    

    // settings
    int opcode_stop = 99;
    int opcode_add = 1;
    int opcode_mul = 2;
    int opcode_input = 3;
    int opcode_output = 4;
    int jump_if_true = 5;
    int jump_if_false = 6;
    int less_than = 7;
    int equals = 8;
    int adjust_relative_base = 9;

    size_t current_input = 0;
    strings outputs;
    
    
    auto instruction = Extract_Instruction(state);
    
    while(instruction.op_code != opcode_stop){
        
        if (instruction.op_code == opcode_add){
            Mode_Linear_Addition(state.memory,state.extra_mem,state.pc,state.relative_base,instruction.arg1,instruction.arg2,instruction.arg3);
        }
        else if (instruction.op_code == opcode_mul){
            Mode_Linear_Multiply(state.memory,state.extra_mem,state.pc,state.relative_base,instruction.arg1,instruction.arg2,instruction.arg3);
        }
        else if (instruction.op_code == opcode_input){
            
            if (inputs.size() <= current_input ){
                std::cerr << "input out of range" << std::endl;
                exit(0);
            }
            Mode_Set(state.memory,state.extra_mem,state.pc,state.relative_base,instruction.arg1,inputs[current_input]);
            ++current_input;
        }
        else if (instruction.op_code == opcode_output){
            outputs.emplace_back(Mode_Get(state.memory,state.extra_mem,state.pc,state.relative_base,instruction.arg1));
            if (state.return_on_output){
                return outputs;
            }
            //std::cout << "outs so far:" << outputs << std::endl;
        }
        else if (instruction.op_code == jump_if_true){
            Mode_Jump_If_True(state.memory,state.extra_mem,state.pc,state.relative_base,instruction.arg1,instruction.arg2);
        }
        else if (instruction.op_code == jump_if_false){
            Mode_Jump_If_False(state.memory,state.extra_mem,state.pc,state.relative_base,instruction.arg1,instruction.arg2);
        }
        else if (instruction.op_code == less_than){
            Mode_Jump_Less_Than(state.memory,state.extra_mem,state.pc,state.relative_base,instruction.arg1,instruction.arg2,instruction.arg3);
        }
        else if (instruction.op_code == equals){
            Mode_Jump_Equals(state.memory,state.extra_mem,state.pc,state.relative_base,instruction.arg1,instruction.arg2,instruction.arg3);
        }
        else if (instruction.op_code == adjust_relative_base){
            
            auto val = Get_Mode_Index(state.memory,state.extra_mem,add_big_numbers(state.pc,"1"),state.relative_base,instruction.arg1);
            state.relative_base = add_big_numbers(state.relative_base,val);
            
            //auto final_index = as_signed(add_big_numbers(state.pc,"1"));
            //std::cout << "final:" << final_index << std::endl;
            //std::cout << "final index:" << final_index << std::endl;
            //std::cout << "relative base: " << state.relative_base << std::endl;
            //std::cout << state.memory[final_index] << std::endl;
            //state.relative_base = add_big_numbers(state.relative_base,state.memory[final_index]);
            //std::cout << as_signed(add_big_numbers(state.pc,"1")) << std::endl;
            state.pc = add_big_numbers(state.pc,"2");
            //std::cout << "new base: " <<  state.relative_base << std::endl;
        }
        
        instruction = Extract_Instruction(state);
        
    }
    
    return outputs;
❱

◀private: static▶ Int_Code_Instruction ☀Extract_Instruction(Int_Code_Computer_State const& state)❰
    Int_Code_Instruction instruction;
    instruction.op_code = Int::get_last_n_digits(as_signed(state.memory[as_signed(state.pc)]),2);
    instruction.arg1 = static_cast<Index_Mode>(Int::get_nth_digit_from_back(as_signed(state.memory[as_signed(state.pc)]),2));
    instruction.arg2 = static_cast<Index_Mode>(Int::get_nth_digit_from_back(as_signed(state.memory[as_signed(state.pc)]),3));
    instruction.arg3 = static_cast<Index_Mode>(Int::get_nth_digit_from_back(as_signed(state.memory[as_signed(state.pc)]),4));
    //std::cout << std::endl << "instruction: " << "op[" << instruction.op_code << "] " << "arg1[" << instruction.arg1 << "] " << "arg2[" << instruction.arg2<< "] " << "arg2[" << instruction.arg3 << "]" << std::endl;
    return instruction;
❱