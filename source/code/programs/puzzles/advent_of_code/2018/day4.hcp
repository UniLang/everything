class
❪"utilities"❫
❪"systems"❫
❪"encryption"❫
⚯
⚞⚟

◀public: static▶ void ☀Go()❰
    
    //file I/O
    auto input = Read_Each_Line_Of_File_Into_Vector("data/4.txt");
    Remove_All_Empty_String_Elements(input);
    
    std::vector<Encryption> lines;
    
    for (auto it: input){
        lines.push_back(Parse(it));
    }
    
    for (auto it: lines){
        //std::cout << it.name << "|" << it.id << "|" << it.check << std::endl;
    }
    
    std::vector<Encryption> valid;
    std::vector<Encryption> invalid;
    
    Decide_Valids_And_Invalids(lines,valid,invalid);
    
    //std::cout << valid.size() << std::endl;
    //std::cout << invalid.size() << std::endl;
    
    int total=0;
    for (auto it: valid){
        total += as_signed(it.id);
    }
    
    std::cout << total << '\n';
    
    for (auto it: valid){
        auto shift_amount = as_signed(it.id);
        auto answer = As_Shifted(it.name,shift_amount);
        std::cout << it.id << " = " << answer << std::endl;
    }
❱

◀private: static▶ std::string ☀As_Shifted(std::string name, int shift_amount)❰
    for (auto & it: name){
        CycleThroughLowercase(it,shift_amount);
    }
    return name;
❱

◀private: static▶ void ☀CycleThroughLowercase(char & ch, int skipcount)❰

    for (int i = 0; i < skipcount; ++i){
        if (ch == 'z'){
            ch = 'a';
        }
        else{
            ch+=1;
        }
    }

    return;
❱

◀private: static▶ Encryption ☀Parse(std::string str)❰
    Encryption line;
    line.name = Strip_Out_From_Front_Until_Number_Is_Found(str);
    //Remove_All_Instances_Of_Char(line.name,'-');
    line.id = Strip_Out_All_Numbers(str);
    
    auto new_str = Strip_Out_Data_Between_First_Set_Of_Square_Brackets(str);
    Remove_First_And_Last_Char(new_str);
    line.check = new_str;
    
    return line;
❱



◀private: static▶ void ☀Decide_Valids_And_Invalids(std::vector<Encryption> const& lines,std::vector<Encryption> & valid, std::vector<Encryption> & invalid)❰

    for (auto it: lines){
        if (Valid(it)){
            valid.push_back(it);
        }else{
            invalid.push_back(it);
        }
    }
❱


◀private: static▶ bool ☀Valid(Encryption const& line)❰
    std::map<char,int> m;
    
    for (auto it: line.name){
        if (it != '-'){
            auto search = m.find(it);
            if (search != m.end()){
                m.insert_or_assign(it,search->second+1);
            }
            else{
                m.insert_or_assign(it,1);
            }
        }
    }
    
    std::vector<std::pair<char,int>> v(m.begin(),m.end());
    std::sort(v.begin(),v.end(),[](auto a, auto b){
        if (a.second != b.second){ return a.second > b.second; }
         return a.first < b.first;
    });
    
    for (int i = 0; i < line.check.size(); ++i){
        if (v[i].first == line.check[i]){
        }else{
            return false;
        }
    }
    
    
    return true;
❱

