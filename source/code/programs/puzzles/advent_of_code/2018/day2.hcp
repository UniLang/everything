class
❪"utilities"❫
❪"systems"❫
❪"key_pad_analysis"❫ //2
⚯
⚞⚟

◀public: static▶ void ☀Go()❰
    auto lines = Read_Each_Line_Of_File_Into_Vector("data/2.txt");
    Remove_All_Empty_String_Elements(lines);
    
    auto square_marker = Key_Pad_Analysis::Create_Square_Start();
    auto diamond_marker = Key_Pad_Analysis::Create_Diamond_Start();
    
    std::string square_code;
    std::string diamond_code;
    for (auto it: lines){
        for (auto c: it){
            Only_Change_Marker_If_In_Range(square_marker,diamond_marker,c);
        }
        square_code += Square_Marker_To_Number(square_marker);
        diamond_code += Diamond_Marker_To_Number(diamond_marker);
    }
    
    //answer 1
    std::cout << square_code << std::endl;
    
    //answer 2
    std::cout << diamond_code << std::endl;
❱
◀private: static▶ void ☀Only_Change_Marker_If_In_Range(std::pair<int,int> & square, std::pair<int,int> & diamond, char const& direction)❰
    
    auto square_copy = square;
    auto diamond_copy = diamond;
    
    //change copy
    Move_In_Direction(square_copy,direction);
    Move_In_Direction(diamond_copy,direction);
    
    //apply if copy is in range
    if (Square_In_Range(square_copy)){square = square_copy;}
    if (Diamond_In_Range(diamond_copy)){diamond = diamond_copy;}
❱
◀private: static▶ void ☀Move_In_Direction(std::pair<int,int> & marker, char const& direction)❰
    if (direction == 'U'){marker.second -= 1;}
    else if (direction == 'D'){marker.second += 1;}
    else if (direction == 'L'){marker.first -= 1;}
    else if (direction == 'R'){marker.first += 1;}
    else { Exit_With_Error(std::string("bad data: ") + direction); }
❱

◀private: static▶ bool ☀Square_In_Range(std::pair<int,int> const& marker)❰
    if (marker.first < 0 || marker.first > 2) {return false;}
    if (marker.second < 0 || marker.second > 2) {return false;}
    return true;
❱
◀private: static▶ bool ☀Diamond_In_Range(std::pair<int,int> const& marker)❰
   
   //even in square?
    if (marker.first < 0 || marker.first > 4) {return false;}
    if (marker.second < 0 || marker.second > 4) {return false;}
    
    //check diamond
    bool pad[5][5] = {
        {0,0,1,0,0},
        {0,1,1,1,0},
        {1,1,1,1,1},
        {0,1,1,1,0},
        {0,0,1,0,0}};
        
    return pad[marker.second][marker.first];
❱

//marker to string
◀private: static▶ std::string ☀Square_Marker_To_Number(std::pair<int,int> const& marker)❰
    return std::to_string(marker.first+1 + (3 * marker.second));
❱
◀private: static▶ std::string ☀Diamond_Marker_To_Number(std::pair<int,int> const& marker)❰
    char pad[5][5] = {
        {'x','x','1','x','x'},
        {'x','2','3','4','x'},
        {'5','6','7','8','9'},
        {'x','A','B','C','x'},
        {'x','x','D','x','x'}};
        
    char c = pad[marker.second][marker.first];
    std::string s; s+= c; return s;
❱