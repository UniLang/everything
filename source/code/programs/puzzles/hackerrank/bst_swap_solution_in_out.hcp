class
❪iostream❫
❪vector❫
❪string❫
❪"code/utilities/output/printers/lib.hpp"❫
❪"code/utilities/data_structures/tree/bst/binary_node.hpp"❫
❪"code/utilities/types/tree/bst/tree_traversal.hpp"❫
❪"code/utilities/types/tree/bst/tree_node_properties.hpp"❫
⚯
⚞⚟


◀private:
template <typename T>
static bool inorder_discrepancy_found(std::pair<T*,T*> const& window){
    return window.first->val > window.second->val;
}
▶

◀private:
template <typename T>
static bool outorder_discrepancy_found(std::pair<T*,T*> const& window){
    return window.first->val < window.second->val;
}
▶

◀public:
template <typename T>
static void fix_bst(T *root){
    
    try {
        Tree_Traversal::perform_inorder_with_previous(Tree_Traversal::get_earliest_nullptr_inorder(root),root,[&](std::pair<T*,T*> window){
            if (inorder_discrepancy_found(window)){
                throw window.first;
            }
        });
    }
    catch(T* ptr1){
        
        try {
            Tree_Traversal::perform_outorder_with_previous(Tree_Traversal::get_earliest_nullptr_outorder(root),root,[&](std::pair<T*,T*> window){
                if (outorder_discrepancy_found(window)){
                    throw window.first;
                }
            });
        }
        catch(T* ptr2){
            std::swap(ptr1->val,ptr2->val);
        }
    }
}
▶