class
❪iostream❫
❪vector❫
❪string❫
❪"code/utilities/output/printers/lib.hpp"❫
❪"code/utilities/data_structures/tree/bst/binary_node.hpp"❫
❪"code/utilities/types/tree/bst/tree_traversal.hpp"❫
❪"code/utilities/types/tree/bst/tree_node_properties.hpp"❫
❪"code/programs/puzzles/hackerrank/bst_swap_algorithm.hpp"❫
❪"code/programs/puzzles/hackerrank/bst_swap_solution_sliding_window_two_ptrs"❫
❪"code/programs/puzzles/hackerrank/bst_swap_solution_in_out"❫
❪"code/programs/puzzles/hackerrank/bst_swap_solution_geeks_five_ptrs"❫
❪"code/programs/puzzles/hackerrank/bst_swap_solution_geeks_four_ptrs"❫
❪"code/programs/puzzles/hackerrank/bst_swap_solution_geeks_three_ptrs"❫
❪"code/programs/puzzles/hackerrank/bst_swap_solution_morris_hickey"❫
⚯
⚞⚟

◀public:
template <typename T>
static void fix_bst(T *root, Bst_Swap_Algorithm const& algorithm){
    switch (algorithm){
        
        //Evolution from 5 to 3
        case Bst_Swap_Algorithm::HACKERRANK_RECURSIVE_FIVE:
        Bst_Swap_Solution_Geeks_Five_Ptrs::fix_bst(root);
        break;
        
        case Bst_Swap_Algorithm::HACKERRANK_RECURSIVE_FOUR:
        Bst_Swap_Solution_Geeks_Four_Ptrs::fix_bst(root);
        break;
        
        case Bst_Swap_Algorithm::HACKERRANK_RECURSIVE_THREE:
        Bst_Swap_Solution_Geeks_Three_Ptrs::fix_bst(root);
        break;
        
        // 4 with a sliding window (functions)
        case Bst_Swap_Algorithm::SLIDING_WINDOW_AND_PAIR:
        Bst_Swap_Solution_Sliding_Window_Two_Ptrs::fix_bst(root);
        break;
        
        // 3 with an inorder / outorder (functions)
        case Bst_Swap_Algorithm::INORDER_OUTORDER_THREE:
        Bst_Swap_Solution_In_Out::fix_bst(root);
        break;
        
        //two with serious BST hacking
        case Bst_Swap_Algorithm::MORRIS_HICKEY_TWO:
        Bst_Swap_Solution_Morris_Hickey::fix_bst(root);
        break;
        
    }
}
▶