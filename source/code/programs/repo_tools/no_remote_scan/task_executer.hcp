class
❪iostream❫
❪fstream❫
❪"code/programs/repo_tools/no_remote_scan/program_options/program_options"❫
⚯
❪"code/utilities/build/build_repo_establisher/build_repo_establisher"❫
❪"code/utilities/program/wrappers/bazel/query/bazel_aquery_runner"❫
❪"code/utilities/program/wrappers/bazel/query/bazel_query_runner"❫
❪"code/utilities/filesystem/paths/lib"❫
❪"code/utilities/filesystem/files/observers/lstat_wrap/lib"❫
❪"code/utilities/program/wrappers/bazel/test/bazel_test_runner"❫
❪"code/utilities/types/general/lib"❫
⚞⚟


◀public: static▶ void ☀Execute_Needed_Tasks(Program_Options const& options) ❰

    //We establish a repo and a context for building artifacts in it.
    //This setup tries to be agnostic to any expectations about the repo's hosting, layout, and build system.
    //It tries to derive things like:
    //where/how the repository is cloned from, what branch it should be on or whether the repo already exists on the system.
    //Analyze the repository to learn how to build it
    auto repo_context = Build_Repo_Establisher::Establish_Repo_For_Building(options.Run_Dir(),options.Url(),options.Branch());
    
    //get all the no-remote tests 
    auto targets = Bazel_Query_Runner::Get_All_Test_Targets_Tagged_No_Remote(repo_context.program_to_run_build);
    std::cout << targets.size() << " tests marked no-remote" << std::endl;
    
    //filter out the ones that already pass
    std::cout << "filtering out tests that don't already pass" << std::endl;
    std::vector<std::string> passing_tests;
    Loop_With_Progress(targets,[&](size_t const& current, size_t const& end, std::string const& target){
        std::cout << current << "/" << end << " " << target << " ";
        auto results = Bazel_Test_Runner::Test(repo_context.program_to_run_build,target);
        if (results){
            passing_tests.emplace_back(target);
            std::cout << "PASS" << std::endl;
        }
        else{
            std::cout << "FAIL" << std::endl;
        }
    });
    std::cout << passing_tests.size() << " passing tests marked no-remote" << std::endl;
    
    //attempt to fix each test
    Loop_With_Progress(passing_tests,[&](size_t const& current, size_t const& end, std::string const& target){
        std::cout << current << "/" << end << " " << target << std::endl;
    });
    
❱