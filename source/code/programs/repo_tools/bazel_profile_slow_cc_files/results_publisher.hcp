class
❪iostream❫
❪algorithm❫
❪cstdlib❫
❪"code/utilities/output/printers/lib"❫
❪"code/programs/repo_tools/bazel_profile_slow_cc_files/program_options/program_options"❫
❪"code/utilities/types/strings/observers/path/lib"❫
❪"code/utilities/filesystem/paths/lib"❫
❪"code/utilities/filesystem/files/creating/lib"❫
❪"code/utilities/types/strings/observers/splitting/lib"❫
❪"code/utilities/types/strings/observers/other/lib"❫
❪"code/utilities/build/profile_parser/file_duration_extractor"❫
❪"code/utilities/build/profile_parser/data/flat_owned_duration_file"❫
⚯
❪"code/utilities/web/honeycomb/honeycomb_poster"❫
❪"code/utilities/output/printers/lib"❫
❪"code/utilities/formats/json/converters/type_to_json_string"❫
⚞⚟


◀public: static▶ void ☀Publish(Program_Options const& options, std::vector<Owned_Duration_File> & durations)❰

    //print them
    auto results = As_Printable_List(durations);
    std::cout << results << std::endl;
    //Write_To_File(options.Output(),results);
    
    //upload them to honeycomb
    Upload_To_Honeycomb(options,durations);
❱

◀private: static▶ void ☀Upload_To_Honeycomb(Program_Options const& options, std::vector<Owned_Duration_File> & durations)❰

    std::cout << "posting to honeycomb" << std::endl;
    for (auto const& it: durations){
        
        //data for sending
        std::string dataset = Get_Dataset_Url(options);
        std::string api_key = Get_API_Key(options);
        
        std::string data = Type_To_Json_String::As_Minified_JSON_String(Flatten(it));
        
        //send and report errors
        auto result = Honeycomb_Poster::Post(dataset,api_key,data);
        if (!result.empty()){
            std::cerr << result << std::endl;
        }
    }
❱

◀private: static▶ std::string ☀Get_Dataset_Url(Program_Options const& options)❰
    std::string dataset = "https://api.honeycomb.io/1/events/" + options.Honeycomb_Dataset();
    return dataset;
❱
◀private: static▶ std::string ☀Get_API_Key(Program_Options const& options)❰
    if (!options.Honeycomb_API_Key().empty()){
        return options.Honeycomb_API_Key();
    }
    return std::getenv("HONEYCOMB_WRITE_KEY");
❱


◀private: static▶ Flat_Owned_Duration_File ☀Flatten(Owned_Duration_File x)❰
    Flat_Owned_Duration_File result;
    result.file = x.file.file;
    result.duration_s = x.file.duration_s;
    result.owners = x.owners;
    return result;
❱

◀private: static▶ std::string ☀As_Printable_List(std::vector<Owned_Duration_File> const& durations)❰
    std::stringstream ss;
    
    for (auto const& it: durations){
        ss << it.file.duration_s << " " << it.file.file << " " << it.owners << std::endl;
    }
    
    return ss.str();
❱