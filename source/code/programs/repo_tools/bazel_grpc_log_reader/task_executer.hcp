class
❪iostream❫
❪fstream❫
❪"code/programs/repo_tools/bazel_grpc_log_reader/program_options/program_options"❫
❪google/protobuf/timestamp.pb.h❫
⚯
❪"code/utilities/program/wrappers/bazel/grpc/grpc_log_parser"❫
❪"code/utilities/profiling/chrome_tracing/data/chrome_trace"❫
❪"code/utilities/formats/json/converters/json_file_io"❫
❪"code/utilities/types/strings/observers/path/lib"❫
⚞⚟


◀public: static▶ void ☀Execute_Needed_Tasks(Program_Options const& options) ❰

    auto x = Grpc_Log_Parser::Parse(options.Path());
    std::cout << x.entries.size() << std::endl;
    
    for (auto const& it: x.entries){
        
        //1. metadata
        // std::cout << it.metadata().tool_details().tool_name() << std::endl;
        // std::cout << it.metadata().tool_details().tool_version() << std::endl;
        // std::cout << it.metadata().action_id() << std::endl;
        // std::cout << it.metadata().tool_invocation_id() << std::endl;
        // std::cout << it.metadata().correlated_invocations_id() << std::endl;
        // std::cout << it.metadata().action_mnemonic() << std::endl;
        // std::cout << it.metadata().target_id() << std::endl;
        // std::cout << it.metadata().configuration_id() << std::endl;
            
        //2. status
        std::cout << it.status().code() << " ";
        std::cout << "[" << it.status().message() << "] ";
        //std::cout <<  it.status().details() << std::endl;
        
        //3. method name
        std::cout << it.method_name() << " ";
        
        //4. details
        
        
        
        
        //5. time range
        std::cout << it.start_time().seconds() << " " << it.start_time().nanos() << " - ";
        std::cout << it.end_time().seconds() << " " << it.end_time().nanos();
        std::cout << std::endl;
    }
    
    Chrome_Trace trace;
    
    //we'll use this as the pid/tid to identify the beginning and end of events
    int counter = 1;
    
    //chrome tracing uses a timestamp, and the grpc log timestamps are very big
    //we'll take the seconds that things start at, and substract it so our timestamps better fit the tracing model
    int seconds_offset = x.entries[0].start_time().seconds();
    
    for (auto const& it: x.entries){
        
        Chrome_Trace_Event event;
        
        event.name = Get_File_Name(it.method_name());
        event.cat = Get_File_Name(it.method_name());
        event.pid = 1;
        event.tid = 1;
        event.ph = "B";
        event.ts = Get_Timestamp_Ms(it.start_time(),seconds_offset);
        trace.traceEvents.emplace_back(event);
        
        event.name = Get_File_Name(it.method_name());
        event.cat = Get_File_Name(it.method_name());
        event.pid = 1;
        event.tid = 1;
        event.ph = "E";
        event.ts = Get_Timestamp_Ms(it.end_time(),seconds_offset);
        trace.traceEvents.emplace_back(event);
        
        ++counter;
    }
    


    Json_File_Io::Write_Json_To_File(trace,options.Path() + ".json");
❱



◀private: static▶ int ☀Get_Timestamp_Ms(google::protobuf::Timestamp time, int seconds_offset) ❰
    auto start_ts_ms = time.seconds() - seconds_offset;
    start_ts_ms *= 1000;
    start_ts_ms += (time.nanos() / 1000000);
    return start_ts_ms;
❱


