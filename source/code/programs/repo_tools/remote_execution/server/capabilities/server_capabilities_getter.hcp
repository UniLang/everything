class
❪iostream❫
❪string❫
❪set❫
❪utility❫
❪memory❫
❪grpcpp/grpcpp.h❫
❪grpcpp/health_check_service_interface.h❫
❪grpcpp/ext/proto_server_reflection_plugin.h❫
❪"build/bazel/remote/execution/v2/remote_execution.grpc.pb.h"❫
❪"code/utilities/formats/serialization/protobuf"❫
❪"code/programs/repo_tools/remote_execution/server/settings/server_settings"❫
❪"code/utilities/remote_execution/services/grpc_glue"❫
❪"include/semver"❫
⚯
⚞⚟

◀public: static▶ build::bazel::remote::execution::v2::ServerCapabilities ☀Get(Server_Settings const& settings)❰
  build::bazel::remote::execution::v2::ServerCapabilities x;
  
  *x.mutable_cache_capabilities() = Get_Cache_Capabilities(settings);
  *x.mutable_execution_capabilities() = Get_Execution_Capabilities(settings);
  *x.mutable_deprecated_api_version() = As_Semantic_Version("2.0.0");
  *x.mutable_low_api_version()  = As_Semantic_Version("2.0.0");
  *x.mutable_high_api_version()  = As_Semantic_Version("2.0.0");
  return x;
❱

◀private: static▶ build::bazel::semver::SemVer ☀As_Semantic_Version(std::string const& str)❰
  build::bazel::semver::SemVer sem;
  semver::version parsed(str);
  sem.set_major(int(parsed.major));
  sem.set_minor(int(parsed.minor));
  sem.set_patch(int(parsed.patch));
  return sem;
❱


◀private: static▶ build::bazel::remote::execution::v2::CacheCapabilities ☀Get_Cache_Capabilities(Server_Settings const& settings)❰
  build::bazel::remote::execution::v2::CacheCapabilities x;
  x.add_digest_function(build::bazel::remote::execution::v2::DigestFunction_Value_SHA256); //could add more
  *x.mutable_action_cache_update_capabilities() = Get_Action_Cache_Update_Capabilities(settings);
  *x.mutable_cache_priority_capabilities() = Get_Action_Cache_Priority_Capabilities(settings);
  x.set_max_batch_total_size_bytes(0); //unlimited
  x.set_max_batch_total_size_bytes(4 * 1024 * 1024);
  x.set_symlink_absolute_path_strategy(build::bazel::remote::execution::v2::SymlinkAbsolutePathStrategy_Value_DISALLOWED);
  
  return x;
❱
◀private: static▶ build::bazel::remote::execution::v2::ActionCacheUpdateCapabilities ☀Get_Action_Cache_Update_Capabilities(Server_Settings const& settings)❰
  build::bazel::remote::execution::v2::ActionCacheUpdateCapabilities x;
  x.set_update_enabled(true);
  return x;
❱
◀private: static▶ build::bazel::remote::execution::v2::PriorityCapabilities ☀Get_Action_Cache_Priority_Capabilities(Server_Settings const& settings)❰
  build::bazel::remote::execution::v2::PriorityCapabilities x;
  
  build::bazel::remote::execution::v2::PriorityCapabilities_PriorityRange range;
  range.set_min_priority(0);
  range.set_max_priority(0);
  
  auto new_range = x.add_priorities(); //could add more
  *new_range = range;
  return x;
❱
◀private: static▶ build::bazel::remote::execution::v2::PriorityCapabilities ☀Get_Execution_Priority_Capabilities(Server_Settings const& settings)❰
  build::bazel::remote::execution::v2::PriorityCapabilities x;
  
  build::bazel::remote::execution::v2::PriorityCapabilities_PriorityRange range;
  range.set_min_priority(0);
  range.set_max_priority(0);
  
  auto new_range = x.add_priorities(); //could add more
  *new_range = range;
  return x;
❱

◀private: static▶ build::bazel::remote::execution::v2::ExecutionCapabilities ☀Get_Execution_Capabilities(Server_Settings const& settings)❰
  build::bazel::remote::execution::v2::ExecutionCapabilities x;
  x.set_digest_function(build::bazel::remote::execution::v2::DigestFunction_Value_SHA256); //could add more
  x.set_exec_enabled(true);
  *x.mutable_execution_priority_capabilities() = Get_Execution_Priority_Capabilities(settings);
  x.add_supported_node_properties("test");
  return x;
❱

