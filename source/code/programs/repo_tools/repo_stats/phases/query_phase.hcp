class
❪iostream❫
❪fstream❫
❪"code/programs/repo_tools/repo_stats/program_options/program_options"❫
❪"code/utilities/build/build_repo_establisher/build_repo_establisher"❫
❪"code/utilities/program/wrappers/bazel/fetch/fetch_results"❫
❪"code/utilities/data_structures/endpoint/endpoint"❫
⚯
❪"code/utilities/program/wrappers/bazel/query/bazel_aquery_runner"❫
❪"code/utilities/program/wrappers/bazel/query/bazel_cquery_runner"❫
❪"code/utilities/program/wrappers/bazel/query/bazel_query_runner"❫
❪"code/utilities/program/wrappers/bazel/fetch/bazel_fetch_runner"❫
❪"code/utilities/program/wrappers/bazel/clean/bazel_clean_runner"❫
❪"code/utilities/filesystem/paths/lib"❫
❪"code/utilities/filesystem/files/observers/lstat_wrap/lib"❫
❪"code/utilities/output/printers/lib"❫
❪"code/utilities/formats/json/converters/type_to_json_string"❫
❪"code/utilities/web/statsd/statsd_nc_poster"❫
❪"code/utilities/data_structures/counters/unique_counter/unique_counter"❫
❪"code/utilities/types/strings/observers/counters/lib"❫
❪"code/utilities/types/strings/transformers/removing/lib"❫
❪"code/utilities/types/strings/observers/path/lib"❫
❪"code/utilities/metrics/metrics_publisher"❫
⚞⚟



◀public: static▶ void ☀Perform(Build_Repo_Settings const& repo_context, std::vector<Endpoint> const& endpoints) ❰

     std::cout << "getting aquery results..." << std::endl;
    auto results = Bazel_Aquery_Runner::Run_Aquery(repo_context.program_to_run_build,"deps(//...)");
    if (results.spawn_results.results.return_code != 0){
        std::cerr << results.spawn_results.results.stderr << std::endl;
    }
    
    std::cout << "publishing build graph metrics..." << std::endl;
    std::string phase_prefix = "build_graph_";
    Metrics_Publisher::Publish(endpoints,"g",phase_prefix + "fetch_time_return_code",std::to_string(results.spawn_results.results.return_code));
    Metrics_Publisher::Publish(endpoints,"g",phase_prefix + "fetch_stdout_line_count",std::to_string(Count_Newlines(results.spawn_results.results.stdout)));
    Metrics_Publisher::Publish(endpoints,"g",phase_prefix + "fetch_stderr_line_count",std::to_string(Count_Newlines(results.spawn_results.results.stderr)));
    Metrics_Publisher::Publish(endpoints,"g",phase_prefix + "fetch_stdout_line_size",std::to_string(results.spawn_results.results.stdout.size()));
    Metrics_Publisher::Publish(endpoints,"g",phase_prefix + "fetch_stderr_line_size",std::to_string(results.spawn_results.results.stderr.size()));
    Metrics_Publisher::Publish(endpoints,"g",phase_prefix + "fetch_stderr_errors",std::to_string(countSubstring(results.spawn_results.results.stderr,"ERROR:")));
    
    Metrics_Publisher::Publish(endpoints,"g",phase_prefix + "aquery_time",std::to_string(results.spawn_results.time_s.count()));
    Metrics_Publisher::Publish(endpoints,"g",phase_prefix + "aquery_deserialization_time_ms",std::to_string(results.aquery_deserialization_time_ms));
    Metrics_Publisher::Publish(endpoints,"g",phase_prefix + "aquery_file_size",std::to_string(results.aquery_file_size));
❱