class
❪iostream❫
❪fstream❫
❪"code/programs/repo_tools/repo_stats/program_options/program_options"❫
❪"code/utilities/build/build_repo_establisher/build_repo_establisher"❫
❪"code/utilities/program/wrappers/bazel/fetch/fetch_results"❫
❪"code/utilities/data_structures/endpoint/endpoint"❫
❪"code/programs/repo_tools/repo_stats/phases/data/bes_metrics"❫
⚯
❪"code/utilities/program/wrappers/bazel/query/bazel_aquery_runner"❫
❪"code/utilities/program/wrappers/bazel/query/bazel_cquery_runner"❫
❪"code/utilities/program/wrappers/bazel/query/bazel_query_runner"❫
❪"code/utilities/program/wrappers/bazel/fetch/bazel_fetch_runner"❫
❪"code/utilities/program/wrappers/bazel/clean/bazel_clean_runner"❫
❪"code/utilities/filesystem/paths/lib"❫
❪"code/utilities/filesystem/files/observers/lstat_wrap/lib"❫
❪"code/utilities/output/printers/lib"❫
❪"code/utilities/formats/json/converters/type_to_json_string"❫
❪"code/utilities/web/statsd/statsd_nc_poster"❫
❪"code/utilities/data_structures/counters/unique_counter/unique_counter"❫
❪"code/utilities/types/strings/observers/counters/lib"❫
❪"code/utilities/types/strings/transformers/removing/lib"❫
❪"code/utilities/types/strings/observers/path/lib"❫
❪"code/utilities/metrics/metrics_publisher"❫
⚞⚟



◀public: static▶ Bes_Metrics ☀Get(std::vector<build_event_stream::BuildEvent> const& build_events) ❰
    Bes_Metrics x;
    Analyze_Bes_Counts(x,build_events);
    Analyze_Abort_Reason(x,build_events);
    return x;
❱


◀private: static▶ void ☀Analyze_Bes_Counts(Bes_Metrics & x, std::vector<build_event_stream::BuildEvent> const& build_events) ❰

    //analyze bes
    x.total = build_events.size();
    
    Unique_Counter<std::string> bes_event_counts;
    bes_event_counts.Add_Empty("Progress");
    bes_event_counts.Add_Empty("Aborted");
    bes_event_counts.Add_Empty("Started");
    bes_event_counts.Add_Empty("UnstructuredCommandLine");
    bes_event_counts.Add_Empty("StructuredCommandLine");
    bes_event_counts.Add_Empty("OptionsParsed");
    bes_event_counts.Add_Empty("WorkspaceStatus");
    bes_event_counts.Add_Empty("Fetch");
    bes_event_counts.Add_Empty("Configuration");
    bes_event_counts.Add_Empty("Expanded");
    bes_event_counts.Add_Empty("Configured");
    bes_event_counts.Add_Empty("Action");
    bes_event_counts.Add_Empty("NamedSetOfFiles");
    bes_event_counts.Add_Empty("Completed");
    bes_event_counts.Add_Empty("TestResult");
    bes_event_counts.Add_Empty("TestSummary");
    bes_event_counts.Add_Empty("Finished");
    bes_event_counts.Add_Empty("BuildToolLogs");
    bes_event_counts.Add_Empty("BuildMetrics");
    bes_event_counts.Add_Empty("WorkspaceInfo");
    bes_event_counts.Add_Empty("BuildMetadata");
    bes_event_counts.Add_Empty("Unset");
    
    
    //https://github.com/bazelbuild/bazel/blob/master/src/main/java/com/google/devtools/build/lib/buildeventstream/proto/build_event_stream.proto
    for (auto const& it: build_events){
        switch (it.payload_case()){
            case build_event_stream::BuildEvent::PayloadCase::kProgress:
            bes_event_counts.Add("Progress");
            break;
            
            case build_event_stream::BuildEvent::PayloadCase::kAborted:
            bes_event_counts.Add("Aborted");
            break;
            
            case build_event_stream::BuildEvent::PayloadCase::kStarted:
            bes_event_counts.Add("Started");
            break;
            
            case build_event_stream::BuildEvent::PayloadCase::kUnstructuredCommandLine:
            bes_event_counts.Add("UnstructuredCommandLine");
            break;
            
            case build_event_stream::BuildEvent::PayloadCase::kStructuredCommandLine:
            bes_event_counts.Add("StructuredCommandLine");
            break;
            
            case build_event_stream::BuildEvent::PayloadCase::kOptionsParsed:
            bes_event_counts.Add("OptionsParsed");
            break;
            
            case build_event_stream::BuildEvent::PayloadCase::kWorkspaceStatus:
            bes_event_counts.Add("WorkspaceStatus");
            break;
            
            case build_event_stream::BuildEvent::PayloadCase::kFetch:
            bes_event_counts.Add("Fetch");
            break;
            
            case build_event_stream::BuildEvent::PayloadCase::kConfiguration:
            bes_event_counts.Add("Configuration");
            break;
            
            case build_event_stream::BuildEvent::PayloadCase::kExpanded:
            bes_event_counts.Add("Expanded");
            break;
            
            case build_event_stream::BuildEvent::PayloadCase::kConfigured:
            bes_event_counts.Add("Configured");
            break;
            
            case build_event_stream::BuildEvent::PayloadCase::kAction:
            bes_event_counts.Add("Action");
            break;
            
            case build_event_stream::BuildEvent::PayloadCase::kNamedSetOfFiles:
            bes_event_counts.Add("NamedSetOfFiles");
            break;
            
            case build_event_stream::BuildEvent::PayloadCase::kCompleted:
            bes_event_counts.Add("Completed");
            break;
            
            case build_event_stream::BuildEvent::PayloadCase::kTestResult:
            bes_event_counts.Add("TestResult");
            break;
            
            case build_event_stream::BuildEvent::PayloadCase::kTestSummary:
            bes_event_counts.Add("TestSummary");
            break;
            
            case build_event_stream::BuildEvent::PayloadCase::kFinished:
            bes_event_counts.Add("Finished");
            break;
            
            case build_event_stream::BuildEvent::PayloadCase::kBuildToolLogs:
            bes_event_counts.Add("BuildToolLogs");
            break;
            
            case build_event_stream::BuildEvent::PayloadCase::kBuildMetrics:
            bes_event_counts.Add("BuildMetrics");
            break;
            
            case build_event_stream::BuildEvent::PayloadCase::kWorkspaceInfo:
            bes_event_counts.Add("WorkspaceInfo");
            break;
            
            case build_event_stream::BuildEvent::PayloadCase::kBuildMetadata:
            bes_event_counts.Add("BuildMetadata");
            break;
            
            case build_event_stream::BuildEvent::PayloadCase::PAYLOAD_NOT_SET:
            bes_event_counts.Add("Unset");
            break;
            
        }
    }
    
    x.event_breakdown = bes_event_counts.hash_table;
❱


◀private: static▶ void ☀Analyze_Abort_Reason(Bes_Metrics & x, std::vector<build_event_stream::BuildEvent> const& build_events) ❰

    std::string abort_reason = "-1"; //-1 means we did not abort
    std::string description;
    for (auto const& it: build_events){
        switch (it.payload_case()){
            case build_event_stream::BuildEvent::PayloadCase::kAborted:
                auto abort_type = it.aborted();
                abort_reason = std::to_string(static_cast<int>(abort_type.reason()));
                description = abort_type.description();
            break;
        }
    }
    
    x.abort_type = abort_reason;
    x.abort_desc = description;
    
❱