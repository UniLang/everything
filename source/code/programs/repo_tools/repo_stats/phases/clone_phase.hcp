class
❪iostream❫
❪fstream❫
❪"code/programs/repo_tools/repo_stats/program_options/program_options"❫
❪"code/utilities/build/build_repo_establisher/build_repo_establisher"❫
❪"code/utilities/data_structures/endpoint/endpoint"❫
⚯
❪"code/utilities/program/wrappers/bazel/query/bazel_aquery_runner"❫
❪"code/utilities/program/wrappers/bazel/query/bazel_cquery_runner"❫
❪"code/utilities/program/wrappers/bazel/query/bazel_query_runner"❫
❪"code/utilities/program/wrappers/bazel/fetch/bazel_fetch_runner"❫
❪"code/utilities/program/wrappers/bazel/clean/bazel_clean_runner"❫
❪"code/utilities/filesystem/paths/lib"❫
❪"code/utilities/filesystem/files/observers/lstat_wrap/lib"❫
❪"code/utilities/output/printers/lib"❫
❪"code/utilities/formats/json/converters/type_to_json_string"❫
❪"code/utilities/web/statsd/statsd_nc_poster"❫
❪"code/utilities/data_structures/counters/unique_counter/unique_counter"❫
❪"code/utilities/types/strings/observers/splitting/lib"❫
❪"code/utilities/types/strings/transformers/trimming/lib"❫
❪"code/utilities/metrics/metrics_publisher"❫
❪"code/programs/repo_tools/repo_stats/phases/filesystem_metrics_getter"❫
⚞⚟



◀public: static▶ void ☀Perform(Build_Repo_Settings const& repo_context, std::vector<Endpoint> const& endpoints) ❰

    //get git stats
    Temporarily_Move_To_Path_To_Call_Function(repo_context.repo.path,[&](){
        
        std::cout << "publishing git  metrics..." << std::endl;
        std::string phase_prefix = "clone_phase_";
        
        std::cout << "getting git stats..." << std::endl;
        auto master_commit_count = execute("git rev-list --count master");
        auto all_commits_count = execute("git rev-list --all --count");
        auto number_of_branches = execute("git branch --all | wc -l");
        auto number_of_tags = execute("git tag | wc -l");
        auto number_of_remote_tags = execute("git ls-remote --tags | wc -l");
        
        auto count_objects_str = execute("git count-objects -v");
        auto labels = Split_Into_Parts_From_Newline(count_objects_str);
        for (auto const& it: labels){
            auto split = Split_Into_Parts_From_Colon(it);
            if (split.size() >= 2){
                auto key = trim(split[0]);
                auto val = trim(split[1]);
                Metrics_Publisher::Publish(endpoints,"g",phase_prefix + "count_objects",val,"key",key);
            }
        }
        
        //maybe use: https://github.com/github/git-sizer
        //TODO
        
        //https://stackoverflow.com/questions/10622179/how-to-find-identify-large-commits-in-git-history
        //TODO
        
        
        auto contributers_str = execute("git --no-pager shortlog -sn --no-merges");
        auto contributer_lines = Split_Into_Parts_From_Newline(contributers_str);
        //TODO
        
        
        Metrics_Publisher::Publish(endpoints,"g",phase_prefix + "clone_time",std::to_string(repo_context.repo.clone_time_ms));
        Metrics_Publisher::Publish(endpoints,"g",phase_prefix + "master_commit_count",master_commit_count);
        Metrics_Publisher::Publish(endpoints,"g",phase_prefix + "all_commits_count",all_commits_count);
        Metrics_Publisher::Publish(endpoints,"g",phase_prefix + "number_of_branches",number_of_branches);
        Metrics_Publisher::Publish(endpoints,"g",phase_prefix + "number_of_tags",number_of_tags);
        Metrics_Publisher::Publish(endpoints,"g",phase_prefix + "number_of_remote_tags",number_of_remote_tags);
        
        auto filesystem_metrics = Filesystem_Metrics_Getter::Get();
        
        Metrics_Publisher::Publish(endpoints,"g",phase_prefix + "language_file_count","language",filesystem_metrics.code_types);
        Metrics_Publisher::Publish(endpoints,"g",phase_prefix + "language_file_count_comment_coverage","language",filesystem_metrics.code_types_comment_coverage);
        
        Metrics_Publisher::Publish(endpoints,"g",phase_prefix + "total_file_count",std::to_string(filesystem_metrics.total_file_count));
        Metrics_Publisher::Publish(endpoints,"g",phase_prefix + "big_files","file",filesystem_metrics.big_files);
        
    });
    
❱