class
❪iostream❫
❪fstream❫
❪"code/programs/repo_tools/repo_stats/program_options/program_options"❫
❪"code/utilities/build/build_repo_establisher/build_repo_establisher"❫
⚯
❪"code/utilities/program/wrappers/bazel/query/bazel_aquery_runner"❫
❪"code/utilities/program/wrappers/bazel/query/bazel_cquery_runner"❫
❪"code/utilities/program/wrappers/bazel/query/bazel_query_runner"❫
❪"code/utilities/program/wrappers/bazel/fetch/bazel_fetch_runner"❫
❪"code/utilities/program/wrappers/bazel/clean/bazel_clean_runner"❫
❪"code/utilities/filesystem/paths/lib"❫
❪"code/utilities/filesystem/files/observers/lstat_wrap/lib"❫
❪"code/utilities/output/printers/lib"❫
❪"code/utilities/formats/json/converters/type_to_json_string"❫
❪"code/utilities/web/statsd/statsd_nc_poster"❫
❪"code/utilities/data_structures/counters/unique_counter/unique_counter"❫
❪"code/programs/repo_tools/repo_stats/phases/clone_phase"❫
❪"code/programs/repo_tools/repo_stats/phases/fetch_phase"❫
❪"code/programs/repo_tools/repo_stats/phases/query_phase"❫
❪"code/utilities/data_structures/endpoint/endpoint"❫
❪"code/utilities/types/strings/observers/splitting/lib"❫
❪"code/utilities/types/strings/observers/converting/lib"❫
⚞⚟


◀public: static▶ void ☀Execute_Needed_Tasks(Program_Options const& options) ❰

    //make sure we can ssh clone the repo.
    //https://serverfault.com/questions/447028/non-interactive-git-clone-ssh-fingerprint-prompt
    //https://serverfault.com/questions/132970/can-i-automatically-add-a-new-host-to-known-hosts
    //std::cout << execute("ssh-keyscan -H vault.phacility.com >> ~/.ssh/known_hosts") << std::endl;
    

    //clone phase
    //We establish a repo and a context for building artifacts in it.
    //This setup tries to be agnostic to any expectations about the repo's hosting, layout, and build system.
    //It tries to derive things like:
    //where/how the repository is cloned from, what branch it should be on or whether the repo already exists on the system.
    //Analyze the repository to learn how to build it
    auto repo_context = Build_Repo_Establisher::Establish_Repo_For_Building(options.Run_Dir(),options.Url(),options.Branch());
    
    
    //extract metrics endpoints to use
    auto endpoint_strs = options.Endpoints();
    std::vector<Endpoint> endpoints;
    for (auto const& it: endpoint_strs){
        auto parts = Split_Into_Parts_From_Colon(it);
        Endpoint x;
        x.host = parts[0];
        x.port = as_signed(parts[1]);
        endpoints.emplace_back(x);
    }
    
    Clone_Phase::Perform(repo_context,endpoints);
    
    Fetch_Phase::Perform(repo_context,endpoints);
    
    Query_Phase::Perform(repo_context,endpoints);
    
    
    
    
    
    
    // std::cout << Type_To_Json_String::As_JSON_String(fetch_result) << std::endl;
    // exit(0);
    
    // auto cquery_result = Bazel_Cquery_Runner::Run(repo_context.program_to_run_build,"deps(//...)");
    // std::cout << cquery_result.cquery_result.results().size() << std::endl;
    
    // std::cout << Type_To_Json_String::As_JSON_String(cquery_result) << std::endl;
    // exit(0);
    
    // auto query_result = Bazel_Query_Runner::Run(repo_context.program_to_run_build,"deps(//...)");
    // //auto query_result = Bazel_Query_Runner::Run(repo_context.program_to_run_build,"//...");
    // std::cout << query_result.target().size() << std::endl;
    
    // auto aquery_result = Bazel_Aquery_Runner::Run_Aquery(repo_context.program_to_run_build,"deps(//...)");
    // //auto aquery_result = Bazel_Aquery_Runner::Run_Aquery(repo_context.program_to_run_build,"//...");
    // std::cout << aquery_result.targets().size() << std::endl;
    // std::cout << aquery_result.actions().size() << std::endl;
    // std::cout << aquery_result.artifacts().size() << std::endl;
    
    // for (auto const& it: aquery_result.actions()){
    //     std::cout << "[" << it.action_key() << "]" << std::endl;
    // }
    
    // for (auto const& it: cquery_result.results()){
    //     std::cout << "[" << it.target().rule().name() << "]" << std::endl;
    // }
❱