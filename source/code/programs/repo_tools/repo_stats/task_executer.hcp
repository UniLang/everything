class
❪iostream❫
❪fstream❫
❪"code/programs/repo_tools/repo_stats/program_options/program_options"❫
⚯
❪"code/utilities/build/build_repo_establisher/build_repo_establisher"❫
❪"code/utilities/program/wrappers/bazel/query/bazel_aquery_runner"❫
❪"code/utilities/program/wrappers/bazel/query/bazel_cquery_runner"❫
❪"code/utilities/program/wrappers/bazel/query/bazel_query_runner"❫
❪"code/utilities/filesystem/paths/lib"❫
❪"code/utilities/filesystem/files/observers/lstat_wrap/lib"❫
❪"code/utilities/output/printers/lib"❫
⚞⚟


◀public: static▶ void ☀Execute_Needed_Tasks(Program_Options const& options) ❰

    //We establish a repo and a context for building artifacts in it.
    //This setup tries to be agnostic to any expectations about the repo's hosting, layout, and build system.
    //It tries to derive things like:
    //where/how the repository is cloned from, what branch it should be on or whether the repo already exists on the system.
    //Analyze the repository to learn how to build it
    auto repo_context = Build_Repo_Establisher::Establish_Repo_For_Building(options.Run_Dir(),options.Url(),options.Branch());
    
    //auto targets = Bazel_Query_Runner::Get_All_Test_Targets(repo_context.program_to_run_build);
    //std::cout << targets << std::endl;
    
    auto cquery_result = Bazel_Cquery_Runner::Run(repo_context.program_to_run_build,"deps(//...)");
    std::cout << cquery_result.cquery_result.results().size() << std::endl;
    
    auto query_result = Bazel_Query_Runner::Run(repo_context.program_to_run_build,"deps(//...)");
    //auto query_result = Bazel_Query_Runner::Run(repo_context.program_to_run_build,"//...");
    std::cout << query_result.target().size() << std::endl;
    
    auto aquery_result = Bazel_Aquery_Runner::Run_Aquery(repo_context.program_to_run_build,"deps(//...)");
    //auto aquery_result = Bazel_Aquery_Runner::Run_Aquery(repo_context.program_to_run_build,"//...");
    std::cout << aquery_result.targets().size() << std::endl;
    std::cout << aquery_result.actions().size() << std::endl;
    std::cout << aquery_result.artifacts().size() << std::endl;
    
    // for (auto const& it: aquery_result.actions()){
    //     std::cout << "[" << it.action_key() << "]" << std::endl;
    // }
    
    // for (auto const& it: cquery_result.results()){
    //     std::cout << "[" << it.target().rule().name() << "]" << std::endl;
    // }
❱