class
❪string❫
❪iostream❫
❪"code/utilities/code/concept_static_tree_structs"❫
⚯
⚞⚟

◀public: static▶ model::Module ☀Get()❰
    model::Module x;
    
    model::ModuleName name;
    name.value = "repo_stats";
    x.name.emplace_back(name);
    
    x.literature.emplace_back(MainDoc());
    
    return x;
❱

◀private: static▶ model::Literature ☀MainDoc()❰
    model::Literature x;
    x.paragraph.emplace_back(Title());
    x.paragraph.emplace_back(Introduction());
    return x;
❱

◀private: static▶ model::Paragraph ☀Title() ❰
    model::Paragraph p;
    
    model::ParagraphDepth depth;
    depth.value = "0";
    
    model::ParagraphTitle title;
    title.value = "Calculates and publishes repository metrics";
    
    p.depth.emplace_back(depth);
    p.title.emplace_back(title);
    
    model::ParagraphSentence s;
    model::Image img;
    model::AlternativeText alt;
    alt.value = "repo_stats";
    
    img.alternative_text.emplace_back(alt);
    s.image.emplace_back(img);
    p.sentence.emplace_back(s);
    
    return p;
❱

◀private: static▶ model::Paragraph ☀Introduction() ❰
    model::Paragraph p;
    
    model::ParagraphDepth depth;
    depth.value = "0";
    
    model::ParagraphTitle title;
    title.value = "Introduction";
    
    p.depth.emplace_back(depth);
    p.title.emplace_back(title);
    
    Add_Sentence(p,"This tool evaluates a repository and publishes metrics about it");
    Add_Sentence(p,"It tries to be agnostic to how the repository is setup and what build system it uses.");
    Add_Sentence(p,"It was designed specifically for bazel repositories, so many metrics will be published related to bazel's fetch / query phases");
    return p;
❱
   
   




//Utility
◀private: static▶ void ☀Add_Sentence(model::Paragraph & p, std::string const& str) ❰
    model::ParagraphSentence x;
    model::SentenceText text;
    text.value = str;
    x.text.emplace_back(text);
    p.sentence.emplace_back(x);
❱