class
❪iostream❫
❪string❫
❪utility❫
❪"code/programs/repo_tools/build_tools/program_options/program_options"❫
❪"code/programs/repo_tools/build_tools/settings/settings"❫
⚯
⚞⚟

◀public: static▶ Settings ☀Get(Program_Options const& options) ❰

    //settings
    auto settings = Default_Settings();
    
    //set via program_options
    if (!options.Url().empty()){
        settings.repo.use_clone = true;
        settings.repo.clone_url = options.Url();
    }
    else{
        settings.repo.use_clone = false;
    }
       
    if (!options.Run_Dir().empty()){
        settings.repo.use_run_path = true;
        settings.repo.run_path = options.Run_Dir();
    }
    else{
        settings.repo.use_run_path = false;
    }
    
    if (!options.Target().empty()){
        settings.target_name = options.Target();
    }
    if (!options.Bazel().empty()){
        settings.setup.bazel_wrapper.derive = false;
        settings.setup.bazel_wrapper.program_name = options.Bazel();
    }
    else{
        settings.setup.bazel_wrapper.derive = true;
    }
    if (options.Verbose()){
        settings.verbose = true;
    }
    
    return settings;
❱


◀private: static▶ Settings ☀Default_Settings()❰
    Settings settings;
    
    settings.verbose = false;
    
    //setting up repo
    settings.repo.use_run_path = false;
    settings.repo.run_path = "/home/thickey/Desktop/main-na";
    
    //calling bazel
    settings.setup.bazel_wrapper.derive = false;
    settings.setup.bazel_wrapper.program_name = "./bazel";
    settings.setup.bazel_wrapper.search_derive_programs.emplace_back("bazel");
    settings.setup.bazel_wrapper.search_derive_programs.emplace_back("bazel_wrapper");
    
    //what target to build and how to build it
    settings.target_name = "//atg/hello_world/cuda:hello_world_nvcc";
    settings.build.environment = Run_Environment::REMOTE;
    settings.build.strategy = Spawn_Strategy::DEFAULT;
    
    return settings;
❱