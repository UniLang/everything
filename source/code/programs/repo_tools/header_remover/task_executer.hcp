class
❪iostream❫
❪string❫
❪utility❫
❪"code/programs/repo_tools/header_remover/program_options/program_options"❫
❪"code/utilities/filesystem/paths/lib"❫
❪"code/utilities/streams/filestreams/read_all/lib"❫
❪"code/utilities/streams/filestreams/write_all/lib"❫

❪"code/utilities/program/call/process_spawn/process_spawner"❫
❪"code/utilities/types/strings/observers/other/lib"❫
❪"code/utilities/types/strings/transformers/trimming/lib"❫
❪"code/utilities/build/profiler/profile_compilation_timer"❫
❪"code/utilities/types/strings/transformers/other/lib"❫
❪"code/utilities/linguistics/computer/header_detection/cpp_header_detector"❫
⚯
⚞⚟


◀public: static▶ void ☀Execute_Needed_Tasks(Program_Options const& options) ❰

    
    //step into the repo
    Set_Path(options.Run_Dir());
    
    //open the file
    auto file_lines = Read_Each_Line_Of_File_Into_Vector(options.File());
    
    //get all the header lines
    auto header_indexes = Cpp_Header_Detector::Get_All_Indexes_Of_Lines_That_Are_Header_Includes(file_lines);
    
    std::cout << header_indexes.size() << " headers detected ";
    std::cout << Profile_Compilation_Timer::Profile(options.File()) << std::endl;
    
    //try to remove each header
    for (auto index: header_indexes){
        
        auto include_statement = file_lines[index];
        
        //check its not the self header
        if (Is_Self_Header(include_statement,options.File())){
            std::cout << "skipping self header: " << include_statement << std::endl;
            continue;
        }

        //get rid of the include statement
        file_lines[index] = "";
        Write_Each_Line_Of_Vector_Into_File(options.File(),file_lines);
        
        std::cout << "removing " << include_statement << " ";
        
        //test the removal
        auto profile_time = Profile_Compilation_Timer::Profile(options.File());
        
        
        //the header can stay removed
        if (profile_time != ""){
            std::cout << "REMOVED " << profile_time << std::endl;
        }
        
        
        //the header can not stay removed
        else{
            std::cout << "REQUIRED" << std::endl;
            
            //restore header
            file_lines[index] = include_statement;
            Write_Each_Line_Of_Vector_Into_File(options.File(),file_lines);
        }
    }
    
    
    //print how many headers were removed
    auto header_indexes_after = Cpp_Header_Detector::Get_All_Indexes_Of_Lines_That_Are_Header_Includes(file_lines);
    auto headers_removed = header_indexes.size() - header_indexes_after.size();
    std::cout << headers_removed << " headers removed." << std::endl;
    
    

❱

◀public: static▶ bool ☀Is_Self_Header(std::string const& include, std::string file) ❰

    Replace_File_Extension(file,"hh");
    return Contains_Substring(include,file);
    
    
❱

◀public: static▶ bool ☀Test_Via_Compilation_Target(Program_Options const& options) ❰

    std::string command;
    command += "./bazel build ";
    command += options.Target();
    
    auto results = Process_Spawner::Execute_And_Get_Back_Results(command);
    
    if (results.return_code != 0){
        return false;
    }
    
    return true;
❱