class
❪"code/programs/repo_tools/build_determinism/settings/settings_getter"❫
❪"code/utilities/output/printers/lib"❫
❪"code/utilities/program/wrappers/git/repo_establisher/repo_establisher"❫
❪"code/utilities/program/wrappers/bazel/setup/wrapper/bazel_wrapper_deriver"❫
❪"code/utilities/program/wrappers/bazel/setup/config/bazel_config_deriver"❫
❪"code/programs/repo_tools/build_determinism/determinism_ab_runner"❫
❪"code/programs/repo_tools/build_determinism/reporter"❫
❪"code/programs/repo_tools/build_determinism/subcommand_filter"❫
❪"code/programs/repo_tools/build_determinism/determinism_problem_getter"❫
❪"code/utilities/random/lib"❫
❪"code/utilities/filesystem/files/observers/lstat_wrap/lib"❫
❪"code/utilities/program/wrappers/bazel/bazel_runner"❫
❪"code/utilities/filesystem/files/moving/lib"❫
❪"code/programs/repo_tools/build_determinism/file_isolator"❫
❪"code/programs/repo_tools/build_determinism/scans/scan_results"❫
⚯
❪"code/programs/repo_tools/build_determinism/scans/scanner"❫
❪"code/programs/repo_tools/build_determinism/scan_utilities"❫
❪"code/utilities/program/wrappers/bazel/setup/bazel_setup_deriver"❫
❪"code/programs/repo_tools/build_determinism/scan_utilities"❫
❪"code/programs/repo_tools/build_determinism/scans/scan_results_printer"❫
❪"code/programs/repo_tools/build_determinism/settings/ab_settings"❫
❪"code/utilities/formats/json/converters/lib"❫
⚞⚟


//OTHER NOTES:
//other articles about build determinism:
//https://www.chromium.org/developers/testing/isolated-testing/deterministic-builds
//http://blog.llvm.org/2019/11/deterministic-builds-with-clang-and-lld.html
//http://planet.clang.org/
//http://lists.llvm.org/pipermail/llvm-dev/2017-July/115196.html
//https://github.com/mgrang/non-determinism
//https://blog.conan.io/2019/09/02/Deterministic-builds-with-C-C++.html
//http://blog.mindfab.net/2013/12/on-way-to-deterministic-binariy-gcc.html


//filenames in object files.  why?
//https://stackoverflow.com/questions/32413176/why-do-common-c-compilers-include-the-source-filename-in-the-output
//https://stackoverflow.com/questions/32400931/why-dont-two-binaries-of-programs-with-only-comments-changed-exactly-match-in-g/32401320#32401320
//https://www.technovelty.org/linux/stripping-shared-libraries.html

//https://docs.bazel.build/versions/master/workspace-log.html


◀public: static▶ void ☀Execute_Needed_Tasks(Program_Options const& options) ❰

    //get the default settings modified by user's program options.
    auto settings = Settings_Getter::Get(options);
    
    //this will decide which directories to do the analysis in.
    //it might clone and copy folders, it might use existing paths given by the user.
    //the directories of the repos derived can correlate to different branches.
    //for example: if you are doing multiple a/b tests across branches.
    auto ab_settings = Setup_AB_Workspace(settings);
    //std::cout << As_JSON_String(ab_settings) << std::endl;
    
    //derive different parts of how the bazel repo is setup
    Bazel_Setup_Deriver::Possibly_Derive_Parts_Of_Bazel_Setup(settings.setup,ab_settings[0].a_path);
    
    //at this point we have the directories we want to operate in, and knowledge of how to run bazel within them.
    //we move onto doing some kind of analysis.
    
    auto scan_results = Scanner::Perform_Requested_Scans(settings,ab_settings);
    Scan_Results_Printer::Print_Needed_Scan_Info(settings,scan_results);
    
    if (settings.do_default_diagnosis){
        Do_Regular_AB_Test(settings,ab_settings);
    }
❱


◀private: static▶ std::vector<Ab_Settings> ☀Setup_AB_Workspace(Settings & settings) ❰

    std::vector<Ab_Settings> ab_settings;
    
    for (auto const& repo: settings.repos){
        
        //before starting the analysis, we either clone or move into an existing repo.
        //This is chosen by the user and regardless of their choice, we will end up at the root of a repository.
        //NOTE: we want to avoid cloning the repo more than once from a branch as the branch may change.
        //for example, master would be changing frequently and me affect results.
        //so instead we use the same repository for the whole analysis.
        Maybe_Output_And_Flush_With_Newline(settings.verbose,"setting up repo...");
        
        Ab_Settings ab_setting;
        ab_setting.a_build.environment = Run_Environment::REMOTE;
        ab_setting.b_build.environment = Run_Environment::REMOTE;
        ab_setting.a_build.strategy = Spawn_Strategy::DEFAULT;
        ab_setting.b_build.strategy = Spawn_Strategy::DEFAULT;
        
        
        if (settings.concurrency == Concurrency::SEQUENTIAL){
            auto paths = Repo_Establisher::Establish_N_Repos(repo,1);
            ab_setting.a_path = paths[0].path;
            ab_setting.b_path = paths[0].path;
        }
        else {
            auto paths = Repo_Establisher::Establish_N_Repos(repo,2);
            ab_setting.a_path = paths[0].path;
            ab_setting.b_path = paths[1].path;
        }
        
        Maybe_Output_And_Flush_With_Newline(settings.verbose,"A test folder established: " + ab_setting.a_path);
        Maybe_Output_And_Flush_With_Newline(settings.verbose,"B test folder established: " + ab_setting.b_path);
        ab_settings.emplace_back(ab_setting);
    }
    
    return ab_settings;
❱


◀private: static▶ void ☀Do_Regular_AB_Test(Settings const& settings, std::vector<Ab_Settings> const& ab_settings) ❰

    //Perform the AB test and get back results.

    for (auto const& it: ab_settings){
        auto results = Determinism_Ab_Runner::Do_AB_Test(settings,it);
        
        //Analyze the results for the user.
        Reporter::Report(results,settings.report);
        
        //Isolate the problem files.
        File_Isolator::Attempt_To_Isolate_Nondeterministic_Files(results,settings,it);
    }
❱

