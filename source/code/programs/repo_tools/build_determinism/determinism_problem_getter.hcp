class
❪iostream❫
❪string❫
❪utility❫
❪"src/main/protobuf/spawn.pb.h"❫
❪"code/programs/repo_tools/build_determinism/data/spawn_pairings"❫
❪"code/programs/repo_tools/build_determinism/data/determinism_pairings"❫
❪"code/programs/repo_tools/build_determinism/data/determinism_problem"❫
❪"code/utilities/output/printers/lib"❫
❪"code/utilities/output/printers/lib"❫
⚯
⚞⚟

◀public: static▶ std::vector<Determinism_Problem> ☀Get(std::pair<tools::protos::SpawnExec,tools::protos::SpawnExec> const& match)❰

    auto s1_input_set = Get_Input_Map(match.first);
    auto s1_output_set = Get_Output_Map(match.first);
    auto s2_input_set = Get_Input_Map(match.second);
    auto s2_output_set = Get_Output_Map(match.second);
    
    std::vector<Determinism_Problem> problems;
    
    if (s1_input_set.size() != s2_input_set.size()){
        Determinism_Problem temp;
        temp.type = Determinism_Problem_Type::INPUT_SIZE;
        temp.message = "wrong input size";
        problems.emplace_back(temp);
    }
    
    if (s1_output_set.size() != s2_output_set.size()){
        Determinism_Problem temp;
        temp.type = Determinism_Problem_Type::OUTPUT_SIZE;
        temp.message = "wrong output size";
        problems.emplace_back(temp);
    }
    
    for (auto const& it: s1_input_set){
        auto find = s2_input_set.find(it.first);
        if (find == s2_input_set.end()){
            Determinism_Problem temp;
            temp.type = Determinism_Problem_Type::MISSING_INPUT;
            temp.file_path = it.first;
            temp.message = "input missing across runs: (" + it.first + ")";
            problems.emplace_back(temp);
        }
        else{
            if (it.second.hash() != find->second.hash()){
                Determinism_Problem temp;
                temp.type = Determinism_Problem_Type::WRONG_INPUT_HASH;
                temp.file_path = it.first;
                temp.message = "input hashes don't match: (" + it.first + ")";
                problems.emplace_back(temp);
            }
        }
    }
    
    for (auto const& it: s1_output_set){
        auto find = s2_output_set.find(it.first);
        if (find == s2_output_set.end()){
            Determinism_Problem temp;
            temp.type = Determinism_Problem_Type::MISSING_OUTPUT;
            temp.file_path = it.first;
            temp.message = "output missing across runs: (" + it.first + ")";
            problems.emplace_back(temp);
        }
        else{
            if (it.second.hash() != find->second.hash()){
                Determinism_Problem temp;
                temp.type = Determinism_Problem_Type::WRONG_OUTPUT_HASH;
                temp.file_path = it.first;
                temp.message = "output hashes don't match: (" + it.first + ")";
                problems.emplace_back(temp);
            }
        }
    }
    
    return problems;
❱

◀private: static▶ std::map<std::string,tools::protos::Digest> ☀Get_Input_Map(tools::protos::SpawnExec const& s)❰
    std::map<std::string,tools::protos::Digest> m;
    for (auto & it: s.inputs()){
        m.insert({it.path(),it.digest()});
    }
    return m;
❱
◀private: static▶ std::map<std::string,tools::protos::Digest> ☀Get_Output_Map(tools::protos::SpawnExec const& s)❰
    std::map<std::string,tools::protos::Digest> m;
    for (auto & it: s.actual_outputs()){
        m.insert({it.path(),it.digest()});
    }
    return m;
❱