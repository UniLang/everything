class
❪"code/programs/repo_tools/build_determinism/settings/settings_getter"❫
❪"code/utilities/output/printers/lib"❫
❪"code/utilities/output/printers/lib"❫
❪"code/utilities/program/wrappers/git/repo_establisher/repo_establisher"❫
❪"code/utilities/program/wrappers/bazel/setup/wrapper/bazel_wrapper_deriver"❫
❪"code/programs/repo_tools/build_determinism/determinism_ab_runner"❫
❪"code/programs/repo_tools/build_determinism/reporter"❫
❪"code/programs/repo_tools/build_determinism/subcommand_filter"❫
❪"code/programs/repo_tools/build_determinism/determinism_problem_getter"❫
❪"code/utilities/random/lib"❫
❪"code/utilities/types/strings/transformers/appending/lib"❫
❪"code/utilities/filesystem/files/observers/lstat_wrap/lib"❫
❪"code/utilities/program/wrappers/bazel/bazel_runner"❫
❪"code/utilities/filesystem/files/moving/lib"❫
❪"code/programs/repo_tools/build_determinism/file_isolator"❫
❪"code/programs/repo_tools/build_determinism/scans/environment_scan/environment_scan_results"❫
❪"code/programs/repo_tools/build_determinism/settings/ab_settings"❫
⚯
❪"code/programs/repo_tools/build_determinism/scan_utilities"❫
⚞⚟

◀public: static▶ std::vector<Environment_Scan_Results> ☀Do_Multi_Environment_AB_Test(Settings const& settings, std::vector<Ab_Settings> const& ab_settings) ❰
    
    std::vector<Environment_Scan_Results> all_results;
    for (auto const& it: ab_settings){
        auto x = Do_Test(settings,it);
        all_results.emplace_back(x);
    }
    
    return all_results;
❱

◀private: static▶ Environment_Scan_Results ☀Do_Test(Settings const& settings, Ab_Settings const& ab_settings) ❰

    Environment_Scan_Results results;
    
    //do A/B determinism experiments multiple times on different kinds of environments
    for (size_t i = 0; i < settings.environment_scan; ++i){
        Maybe_Output_And_Flush_With_Newline(settings.verbose,"on iteration " + std::to_string(i));
        
        Maybe_Output_And_Flush_With_Newline(settings.verbose,"doing local/local test");
        Do_AB_Experiment_With_Environment_Combination(settings,ab_settings,Run_Environment::LOCAL,Run_Environment::LOCAL,results.local_local);
        
        Maybe_Output_And_Flush_With_Newline(settings.verbose,"doing remote/remote test");
        Do_AB_Experiment_With_Environment_Combination(settings,ab_settings,Run_Environment::REMOTE,Run_Environment::REMOTE,results.remote_remote);

        Maybe_Output_And_Flush_With_Newline(settings.verbose,"doing local/remote test");
        Do_AB_Experiment_With_Environment_Combination(settings,ab_settings,Run_Environment::LOCAL,Run_Environment::REMOTE,results.local_remote);
    }
    
    return results;
❱

◀private: static▶ void ☀Do_AB_Experiment_With_Environment_Combination(Settings settings, Ab_Settings ab_settings, Run_Environment s1, Run_Environment s2, std::pair<int,int> & results)❰

    //set new strategy
    ab_settings.a_build.environment = s1;
    ab_settings.b_build.environment = s2;
    
    //run experiment and record determinism results
    auto d_results = Determinism_Ab_Runner::Do_AB_Test(settings,ab_settings);
    Scan_Utilities::Increment_Determinism_Results(d_results,results);
❱

