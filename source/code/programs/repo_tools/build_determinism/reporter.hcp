class
❪iostream❫
❪string❫
❪utility❫
❪set❫
❪"code/utilities/program/call/lib"❫
❪"code/utilities/output/printers/lib"❫
❪"code/utilities/output/printers/lib"❫
❪"code/utilities/filesystem/paths/lib"❫
❪"code/utilities/types/strings/observers/splitting/lib"❫
❪"code/utilities/types/vectors/observers/lib"❫
❪"code/utilities/types/sets/lib"❫
❪"code/utilities/types/strings/observers/path/lib"❫
❪"src/main/protobuf/spawn.pb.h"❫
❪"code/programs/repo_tools/build_determinism/data/spawn_pairings"❫
❪"code/programs/repo_tools/build_determinism/data/determinism_problem"❫
❪"code/utilities/types/map/lib"❫
❪"code/programs/repo_tools/build_determinism/spawn_pairer"❫
❪"code/programs/repo_tools/build_determinism/spawn_pair_determinism_checker"❫
❪"code/programs/repo_tools/build_determinism/determinism_ab_runner"❫
❪"code/programs/repo_tools/build_determinism/determinism_problem_getter"❫
❪"code/programs/repo_tools/build_determinism/settings/report_settings"❫
❪"code/programs/repo_tools/build_determinism/subcommand_filter"❫
⚯
⚞⚟



◀public: static▶ void ☀Report(Determinism_Pairings const& results, Report_Settings const& settings)❰

    //if the inputs are already nondeterministic there was probably nondeterminism further up the subcommand graph.
    //we should filter down to only the commands that had deterministic input but created nondeterministic output.
    //this will help us target where the nondeterminism actually starts and what tools are responsible.
    auto filtered_results = Subcommand_Filter::Filter_By_Subcommands_That_Cause_Nondeterminism(results.nondeterministic);
    
    //tell the user which programs we think are nondeterministic
    if (settings.print_nondeterministic_programs){
        Report_Nondeterminisic_Programs(filtered_results);
    }
    
    //tell the user the determinism problems
    if (settings.print_nondeterministic_problems){
        Report_Nondeterminism_Problems(filtered_results);
    }
    
    //tell the user the subcommands that caused the problem
    if (settings.print_nondeterministic_subcommands){
        Report_Subcommand_That_Caused_Problems(filtered_results);
    }
    
    //tell the user a set of synthesized statements on what is nondeterministic
    if (settings.print_nondeterministic_synthesized_statements){
        Report_Via_Synthesized_Statements(filtered_results);
    }
❱



◀private: static▶ void ☀Report_Subcommand_That_Caused_Problems(std::vector<std::pair<tools::protos::SpawnExec,tools::protos::SpawnExec>> const& command_pairs)❰

    if (!command_pairs.empty()){
        std::cerr << "see the following subcommands:" << std::endl;
        for (auto const& it: command_pairs){
            auto command_args = it.first.command_args();
            std::vector<std::string> v;
            for (auto const& it: command_args){
                v.emplace_back(it);
            }
            std::cout << Get_As_Space_Seperated_String(v) << std::endl;
        }
    }
❱


◀private: static▶ void ☀Report_Nondeterminisic_Programs(std::vector<std::pair<tools::protos::SpawnExec,tools::protos::SpawnExec>> const& command_pairs)❰

    auto programs = Guess_Nondeterministic_Programs(command_pairs);
    if (programs.empty()){
        std::cout << "No programs were nondeterministic." << std::endl;
    }
    else{
        
        if (programs.size() == 1){
            std::cerr << "The following program was nondeterministic: ";
            std::string program_name = "";
            for (auto const& it: programs){
                program_name = it;
            }
            std::cerr << program_name;
            std::cerr << std::endl;
        }
        else{
            std::cerr << "The following programs were nondeterministic: ";
            std::cerr << programs;
            std::cerr << std::endl;
        }
    }
❱
◀private: static▶ std::set<std::string> ☀Guess_Nondeterministic_Programs(std::vector<std::pair<tools::protos::SpawnExec,tools::protos::SpawnExec>> const& command_pairs)❰
    std::set<std::string> programs;
    for (auto const& it: command_pairs){
        auto command_args = it.first.command_args();
        if (!command_args.empty()){
            programs.insert(command_args[0]);
        }
    }
    
    return programs;
❱
◀private: static▶ void ☀Report_Nondeterminism_Problems(std::vector<std::pair<tools::protos::SpawnExec,tools::protos::SpawnExec>> const& command_pairs)❰

    for (auto const& it: command_pairs){
        auto problems = Determinism_Problem_Getter::Get(it);
        for (auto const& problem: problems){
            std::cerr << problem.message << std::endl;
        }
    }
❱
◀private: static▶ void ☀Report_Via_Synthesized_Statements(std::vector<std::pair<tools::protos::SpawnExec,tools::protos::SpawnExec>> const& command_pairs)❰
    std::set<std::string> statements;
    for (auto const& it: command_pairs){
        auto program_name = Get_Synthesized_Program_Name(it.first);
        auto generic_file_types = Get_Synthesized_File_Types(it);
        
        //produce synthesized statements
        for (auto const& it: generic_file_types){
            std::string statement;
            statement = program_name + " produces nondeterministic ";
            statement += it;
            statements.insert(statement);
        }
    }
    
    Print_On_Each_Line(statements);
❱

◀private: static▶ std::string ☀Get_Synthesized_Program_Name(tools::protos::SpawnExec const& s)❰
        std::string program_name = "";
        auto command_args = s.command_args();
        if (!command_args.empty()){
            program_name = command_args[0];
        }
        program_name = Get_Path_Basename(program_name);
        return program_name;
❱


◀private: static▶ std::set<std::string> ☀Get_Synthesized_File_Types(std::pair<tools::protos::SpawnExec,tools::protos::SpawnExec> const& s)❰

    // I was going to use libmagic but it just reports .o and .a file MIME types and MIME encodings.
    // these are reported really generically, like: "binary"
    // The "file" command does much better.
    // It produces a better description (presumably because it does the extra work of parsing ELF files.
    // Until we get a better overall API, we'll want to combine these strategies and also take into consideration the file extension as an easy assumption.
    // (eventhough file extension doesn't mean anything in linux).
    //this analyze tries to give a generic description of the file's file type.
    //https://manpages.debian.org/testing/libmagic-dev/libmagic.3.en.html
    //https://github.com/file/file

    auto problems = Determinism_Problem_Getter::Get(s);
    std::set<std::string> file_types;
    for (auto const& it: problems){
        if (!it.file_path.empty()){
            auto extension = Get_File_Extension(it.file_path);
            //do more sophisticated analysis with libmagic and file
            
            
            //TODO: use map
            if (extension == "o"){
                file_types.insert("object files");
            }
            else if (extension == "a"){
                file_types.insert("archive files");
            }
            else if (extension == "so"){
                file_types.insert("shared objects");
            }
            else if (extension == "py"){
                file_types.insert("python files");
            }
            else if (extension == "go"){
                file_types.insert("go files");
            }
            else{
                file_types.insert("files");
            }
        }
    }
    return file_types;
❱
















