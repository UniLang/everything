class
❪iostream❫
❪string❫
❪utility❫
❪set❫
❪"src/main/protobuf/spawn.pb.h"❫
❪"code/programs/repo_tools/build_determinism/data/determinism_problem"❫
❪"code/programs/repo_tools/build_determinism/determinism_problem_getter"❫
⚯
⚞⚟

◀public: static▶ std::vector<std::pair<tools::protos::SpawnExec,tools::protos::SpawnExec>> ☀Filter_By_Subcommands_That_Cause_Nondeterminism(std::vector<std::pair<tools::protos::SpawnExec,tools::protos::SpawnExec>> const& command_pairs)❰
    std::vector<std::pair<tools::protos::SpawnExec,tools::protos::SpawnExec>> result;
    
    for (auto const& it: command_pairs){
        auto problems = Determinism_Problem_Getter::Get(it);
        if (Subcommand_Caused_Nondeterminsim(problems)){
            result.emplace_back(it);
        }
    }
    
    return result;
❱
◀private: static▶ bool ☀Subcommand_Caused_Nondeterminsim(std::vector<Determinism_Problem> const& problems)❰
    for (auto const& it: problems){
        
        //if anything is wrong with the input we forfeit the opportunity to prove
        //that the subcommand is nondeterministic.  how could we?  It's already getting
        //non deterministic input.
        if (it.type == Determinism_Problem_Type::INPUT_SIZE){
            return false;
        }
        if (it.type == Determinism_Problem_Type::MISSING_INPUT){
            return false;
        }
        if (it.type == Determinism_Problem_Type::WRONG_INPUT_HASH){
            return false;
        }
    }
    return true;
❱