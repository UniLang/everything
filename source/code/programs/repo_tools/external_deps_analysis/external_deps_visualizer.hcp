class
❪iostream❫
❪string❫
❪set❫
❪utility❫
❪"code/utilities/program/call/lib"❫
❪"code/utilities/filesystem/paths/lib"❫
❪"code/utilities/types/vectors/transformers/lib"❫
❪"code/utilities/types/strings/observers/other/lib"❫
❪"code/utilities/types/strings/transformers/removing/lib"❫
❪"code/utilities/types/strings/transformers/appending/lib"❫
❪"code/utilities/types/sets/lib"❫
❪"code/utilities/program/wrappers/graphviz/graphviz_image_maker"❫
❪"code/programs/repo_tools/external_deps_analysis/settings/settings"❫
❪"code/programs/repo_tools/external_deps_analysis/analysis_state"❫
❪"code/utilities/types/strings/observers/path/lib"❫
❪"code/utilities/data_structures/counters/unique_counter/unique_counter"❫
⚯
⚞⚟

◀public: static▶ void ☀Visualize(Settings const& settings, Analysis_State const& state)❰

    std::vector<std::string> relationships_strs;
    for (auto const& it: state.relationships){
        std::string line = "";
        line += "\"";
        line += it.first;
        line += "\"";
        line += " -> ";
        line += "\"";
        line += it.second;
        line += "\"";
        relationships_strs.emplace_back(line);
    }
    
    std::string x;
    Append_With_Newline(x,"digraph results {");
    //Append_With_Newline(x,"splines=false;");
    Append_With_Newline(x,"node [");
    Append_With_Newline(x,"fontname=\"Arial\",");
    //Append_With_Newline(x,"shape = plaintext,");
    Append_With_Newline(x,"height=.1");
    Append_With_Newline(x,"]");
    for (auto const& it: relationships_strs){
        Append_With_Newline(x,it);
    }
    Append_With_Newline(x,"}");
    Graphviz_Image_Maker::Make(x,settings.result_path,settings.dep_name);
❱