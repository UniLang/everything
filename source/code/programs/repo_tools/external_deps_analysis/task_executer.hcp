class
❪iostream❫
❪string❫
❪utility❫
❪"code/utilities/program/call/lib"❫
❪"code/utilities/output/printers/lib"❫
❪"code/utilities/output/printers/lib"❫
❪"code/programs/repo_tools/external_deps_analysis/settings/settings"❫
❪"code/programs/repo_tools/external_deps_analysis/analysis_state"❫
❪"code/utilities/filesystem/paths/lib"❫
❪"code/utilities/types/vectors/transformers/lib"❫
❪"code/utilities/types/strings/observers/other/lib"❫
❪"code/utilities/types/strings/transformers/removing/lib"❫
❪"code/utilities/types/strings/transformers/appending/lib"❫
❪"code/utilities/types/sets/lib"❫
❪"code/utilities/program/wrappers/graphviz/graphviz_image_maker"❫
❪"code/programs/repo_tools/external_deps_analysis/program_options/program_options"❫
❪"code/programs/repo_tools/external_deps_analysis/settings/settings_getter"❫
⚯
❪"code/utilities/program/wrappers/bazel/query/bazel_query_runner"❫
❪"code/utilities/types/queue/lib"❫
❪"code/programs/repo_tools/external_deps_analysis/external_deps_visualizer"❫
⚞⚟


◀public: static▶ void ☀Execute_Needed_Tasks(Program_Options const& options) ❰

    //get the settings and start in the appropriate directory.
    auto settings = Settings_Getter::Get(options);
    Possibly_Set_Path(settings.use_run_path,settings.run_path);
    
    //start the analysis at a particular dependency.
    Analysis_State state;
    state.deps_to_explore.push(settings.dep_name);
    
    //build all the relationships.
    //we keep popping of the queue till its empty.
    //while analyzing a popped item, we may add more items onto the queue.
    Observe_Each_Item_In_Queue_Avoiding_Duplicates(state.deps_to_explore,[&](std::queue<std::string> & deps_to_explore, std::string const& dep){
        
        //debug message
        std::string message = "querying " + dep + "... ";
        Maybe_Output_And_Flush(settings.verbose,message);
        
        Explore_The_Direct_Relationships(settings,state,dep);
    });
    
    //remove cycles
    Remove_If(state.relationships,[&](std::pair<std::string,std::string> p){
        return p.first == p.second;
    });
    
    External_Deps_Visualizer::Visualize(settings,state);
❱

◀private: static▶ void ☀Explore_The_Direct_Relationships(Settings const& settings, Analysis_State & state, std::string const& dep)❰

    //bazel query to get direct 3rd party dependencies
    auto results = Bazel_Query_Runner::Get_All_Third_Party_Libs_That_Rely_On_Third_Party_Lib(settings.bazel_wrapper,dep);
    
    Maybe_Output_And_Flush(settings.verbose,results);
    
    //add relationships
    for (auto const& it: results){state.relationships.emplace_back(dep,it);}
    
    //add the next set of deps to explore
    for (auto const& it: results){state.deps_to_explore.push(it);}
❱