class
❪iostream❫
❪fstream❫
❪"code/programs/repo_tools/aquery_size/program_options/program_options"❫
⚯
❪"code/utilities/build/build_repo_establisher/build_repo_establisher"❫
❪"code/utilities/program/wrappers/bazel/query/bazel_aquery_runner"❫
❪"code/utilities/filesystem/paths/lib"❫
❪"code/utilities/filesystem/files/observers/lstat_wrap/lib"❫
⚞⚟


◀public: static▶ void ☀Execute_Needed_Tasks(Program_Options const& options) ❰

    //We establish a repo and a context for building artifacts in it.
    //This setup tries to be agnostic to any expectations about the repo's hosting, layout, and build system.
    //It tries to derive things like:
    //where/how the repository is cloned from, what branch it should be on or whether the repo already exists on the system.
    //Analyze the repository to learn how to build it
    auto repo_context = Build_Repo_Establisher::Establish_Repo_For_Building(options.Run_Dir(),options.Url(),options.Branch());
    
    auto actions = Bazel_Aquery_Runner::Run_Aquery(repo_context.program_to_run_build,options.Target());
    
    //extract all files
    std::vector<std::string> all_files;
        for (auto const& x2: actions.artifacts()){
            all_files.emplace_back(x2.exec_path());
        }
    
    
    //move to bazel-source
    //TODO: these paths are all wrong (source is the name of a folder in a specific repo)
    if (File_Exists(repo_context.repo.path + "/bazel-source")){
        Set_Path(repo_context.repo.path + "/bazel-source");
    }
    else if (File_Exists(repo_context.repo.path + "/source/bazel-source")){
        Set_Path(repo_context.repo.path + "/source/bazel-source");
    }
    else {
        Set_Path(repo_context.repo.path);
    }
    
    Print_File_Sizes(all_files);
❱

◀private: static▶ void ☀Print_File_Sizes(std::vector<std::string> const& all_files) ❰

    std::vector<std::pair<std::uintmax_t,std::string>> sized_files;
    for (auto const& it: all_files){
        if (File_Exists(it)){
            sized_files.emplace_back(std::filesystem::file_size(it),it);
        }
    }
    
    std::sort(sized_files.begin(),sized_files.end(),[&](std::pair<std::uintmax_t,std::string> const& a, std::pair<std::uintmax_t,std::string> const& b){
        return a.first < b.first;
    });
    for (auto const& it: sized_files){
        std::cout << it.first << " " << it.second << std::endl;
    }
❱